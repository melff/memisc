[{"path":"https://melff.github.io/mclogit/articles/anes48.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analysing the American National Election Study of 1948 with 'memisc'","text":"vignette gives example analysis typical social science data set. data file American National Election Study 19481 available American National Election Studies website. data file contains data USA-wide surveys conducted October November 1948 Survey Research Centre, University Michigan (principal investigators: Angus Campbell Robert L. Kahn). total number cases data set 662 number variables 65 (details data set can found https://electionstudies.org/studypages/1948prepost/1948prepost.htm). 662 cases 65 variables, 1948 ANES data set relatively small compared current social science data sets. larger data sets can processed along lines vignette. Unlike 1948 ANES data, size well , cases, legal restrictions prohibit inclusion data set package, however. vignette starts demonstration data file can examined loading subset data can loaded memory. loading subset memory, descriptive analyses conducted showcase construction contingency tables general tables descriptive statistics using genTable function. addition, logit analysis demonstrated collection several logit coefficients comprehensive table mtable function. noted analyses reported following conducted purpose demonstrating features package considered conclusive scientific evidence kind. vignette run help knitr package. allows showcase data management facilities provided memisc. following code also demonstrates output created facilities memisc can neatly integrated reports generated knitr. start, adjust knitr’s output (vignette formatted) produce HTML possible.","code":"knit_print.codebook <-function(x,...)    knitr::asis_output(format_html(x,...))  knit_print.descriptions <-function(x,...)    knitr::asis_output(format_html(x,...))  knit_print.ftable <-function(x,options,...)   knitr::asis_output(     format_html(x,                 digits=if(length(options$ftable.digits))                           options$ftable.digits                        else 0,                 ...)) # We can now adjust the number of digits after the comma # for each column e.g. by adding an `ftable.digits` option # to an R chunk, as in ```{r,ftable=c(2,2,0)}  knit_print.mtable <-function(x,...)   knitr::asis_output(format_html(x,...))"},{"path":"https://melff.github.io/mclogit/articles/anes48.html","id":"reading-in-a-portable-spss-data-file","dir":"Articles","previous_headings":"","what":"Reading in a “portable” SPSS data file","title":"Analysing the American National Election Study of 1948 with 'memisc'","text":"start importing data R. following code extracts SPSS portable file NES1948.POR zip file NES1948.ZIP delivered memisc package. Now portable file temporary directory path file contained string variable nes1948.por. next step, file declared SPSS/PSPP portable file using function spss.portable.file, first argument takes path file. spss.portable.file reads information variables contained data set counts number cases file. , standard /O operations used file, data read just thrown away without allocating core memory data. counting cases can, course, suppressed take long. stage, data loaded memory yet. can see variables exist inside data set: Note variable names changed uppercase lowercase (SPSS distinguish uppercase lowercase variable names uppercase looks like shouting). Casefolding suppressed call spsp.portable.file(nes1948.por,tolower=FALSE). also can ask description (“variable label”) variable: even code book using (shown output taken thirty pages). can also get codebook first variabels instead,  VVERSION — ‘NES VERSION NUMBER’     VDSETNO — ‘NES DATASET NUMBER’     V480001 — ‘ICPSR ARCHIVE NUMBER’     V480002 — ‘INTERVIEW NUMBER’     V480003 — ‘POP CLASSIFICATION’","code":"library(memisc) options(digits=3) nes1948.por <- unzip(system.file(\"anes/NES1948.ZIP\",package=\"memisc\"),                      \"NES1948.POR\",exdir=tempfile()) nes1948 <- spss.portable.file(nes1948.por) Warning: 9 variables have duplicated labels:   V480004, V480012, V480020, V480021A, V480021B, V480033A, V480033B,   V480034A, V480034B print(nes1948) SPSS portable file '/tmp/RtmppaVpeV/file1cbe671a024b/NES1948.POR'      with 67 variables and 662 observations names(nes1948) [1] \"VVERSION\" \"VDSETNO\"  \"V480001\"  \"V480002\"  \"V480003\"  \"V480004\"   [7] \"V480005\"  \"V480006\"  \"V480007\"  \"V480008\"  \"V480009\"  \"V480010\"  [13] \"V480011\"  \"V480012\"  \"V480013\"  \"V480014A\" \"V480014B\" \"V480015A\" [19] \"V480015B\" \"V480016A\" \"V480016B\" \"V480017A\" \"V480017B\" \"V480018\"  [25] \"V480019\"  \"V480020\"  \"V480021A\" \"V480021B\" \"V480022A\" \"V480022B\" [31] \"V480023\"  \"V480024\"  \"V480025A\" \"V480025B\" \"V480026\"  \"V480027\"  [37] \"V480028\"  \"V480029\"  \"V480030\"  \"V480031A\" \"V480031B\" \"V480031C\" [43] \"V480032A\" \"V480032B\" \"V480032C\" \"V480033A\" \"V480033B\" \"V480034A\" [49] \"V480034B\" \"V480035A\" \"V480035B\" \"V480036A\" \"V480036B\" \"V480037\"  [55] \"V480038\"  \"V480039\"  \"V480040\"  \"V480041\"  \"V480042\"  \"V480043\"  [61] \"V480044\"  \"V480045\"  \"V480046\"  \"V480047\"  \"V480048\"  \"V480049\"  [67] \"V480050\" description(nes1948) codebook(nes1948) codebook(nes1948[1:5])"},{"path":"https://melff.github.io/mclogit/articles/anes48.html","id":"reading-in-a-subset-of-the-data","dir":"Articles","previous_headings":"Reading in a “portable” SPSS data file","what":"Reading in a subset of the data","title":"Analysing the American National Election Study of 1948 with 'memisc'","text":"decided variables use can read subset data: subset ANES 1948 read now contained variable vote.48, contains object class data.set. data.set “embellished” version data.frame, data structure intended contained labelled vectors. labelled vectors contain special information attached variables original data set, variable labels, value labels, general missing values. short summary special information shows call str. output shows, example, variable V480018 description (variable label) “R VOTE/” considered nominal level measurement, seven value labels one defined missing value. Since variable names ANES data set mnemonic, rename variables: Since many data sets available public repositories non-mnemonic variable names example, might convenient data loading renaming one step. Indeed possible: start analyses, take closer look data.  vote — ‘R VOTE/’     occupation.hh — ‘OCCUPATION HEAD’     unionized.hh — ‘HEAD BELONG LBR UN’     gender — ‘SEX RESPONDENT’     race — ‘RACE RESPONDENT’     age — ‘AGE RESPONDENT’     education — ‘EDUCATION RESPONDENT’     total.income — ‘TOTAL 1948 INCOME’     religious.pref — ‘RELIGIOUS PREFERENCE’    now obtained codebook, contains information class type variables data set, value labels defined missing values, counts distinct values variables.","code":"vote.48 <- subset(nes1948,               select=c(                   V480018,                   V480029,                   V480030,                   V480045,                   V480046,                   V480047,                   V480048,                   V480049,                   V480050                   )) str(vote.48) Data set with 662 obs. of 9 variables:  $ V480018: Nmnl. item w/ 7 labels for 1,2,3,... + ms.v.  num  1 2 1 2 1 2 2 1 2 1 ...  $ V480029: Nmnl. item w/ 12 labels for 10,20,30,... + ms.v.  num  70 30 40 10 10 20 80 80 40 40 ...  $ V480030: Nmnl. item w/ 4 labels for 1,2,8,... + ms.v.  num  1 2 2 2 2 2 2 2 1 1 ...  $ V480045: Nmnl. item w/ 3 labels for 1,2,9 + ms.v.  num  1 2 2 2 1 2 1 2 1 1 ...  $ V480046: Nmnl. item w/ 4 labels for 1,2,3,... + ms.v.  num  1 1 1 1 1 1 1 1 1 1 ...  $ V480047: Nmnl. item w/ 7 labels for 1,2,3,... + ms.v.  num  3 3 2 3 2 3 4 5 2 2 ...  $ V480048: Nmnl. item w/ 4 labels for 1,2,3,... + ms.v.  num  1 2 2 3 3 2 1 1 2 2 ...  $ V480049: Nmnl. item w/ 8 labels for 1,2,3,... + ms.v.  num  4 7 5 7 5 7 5 2 5 6 ...  $ V480050: Nmnl. item w/ 6 labels for 1,2,3,... + ms.v.  num  1 1 2 1 2 1 1 1 1 2 ... vote.48 <- rename(vote.48,                   V480018 = \"vote\",                   V480029 = \"occupation.hh\",                   V480030 = \"unionized.hh\",                   V480045 = \"gender\",                   V480046 = \"race\",                   V480047 = \"age\",                   V480048 = \"education\",                   V480049 = \"total.income\",                   V480050 = \"religious.pref\"         ) vote.48 <- subset(nes1948,                   select=c(                     vote           = V480018,                     occupation.hh  = V480029,                     unionized.hh   = V480030,                     gender         = V480045,                     race           = V480046,                     age            = V480047,                     education      = V480048,                     total.income   = V480049,                     religious.pref = V480050                   )) codebook(vote.48)"},{"path":[]},{"path":"https://melff.github.io/mclogit/articles/anes48.html","id":"some-descriptive-analyses","dir":"Articles","previous_headings":"Analysis","what":"Some descriptive analyses","title":"Analysing the American National Election Study of 1948 with 'memisc'","text":"start analyses contingency table, first make preparations: recode variables interest smaller number categories order get results easier read interpret. constructed unordered factors vote3, occup4, relig3, race2 can proceed examining association vote, occupational class, relgious denomination, race. First, look upon simple contingency table. Tables percentages may seem informative impact various factors vote. use function genTable obtain tables percentages: Obviously, voters farmer blue collar worker households especially supportive President Truman, voters upper white collar background largely supported Republican Candidate Dewey. table shows Catholics adherents denominations supportive Truman Dewey. African Americans apparently supported Truman large majority. number members group sample small, however, inference shaky. table percentage vote income suggests income considerable influence choice either Truman Dewey, unequal distribution income categories warrants refined analysis takes account uncertainty vote percentages. Therefore, percentages support Truman broken income shown confidence intervals: Occupational class evenly distributed sample, thus may possible obtain precise estimates percentages support Truman occupational classes: upper lower white-collar blue-collar classes quite distinct regard percentages support Truman. point estimates percentages outside confidence intervals respective occupational classes, confidence intervals even overlap. However, clear whether farmers distinct blue-collar lower white-collar classes.","code":"vote.48 <- within(vote.48,{   vote3 <- recode(vote,     1 -> \"Truman\",     2 -> \"Dewey\",     3:4 -> \"Other\"     )   occup4 <- recode(occupation.hh,     10:20 -> \"Upper white collar\",     30 -> \"Other white collar\",     40:70 -> \"Blue collar\",     80 -> \"Farmer\"     )   relig3 <- recode(religious.pref,     1 -> \"Protestant\",     2 -> \"Catholic\",     3:5 -> \"Other,none\"     )    race2 <- recode(race,     1 -> \"White\",     2 -> \"Black\"     )   }) Warning in recode(vote, \"Truman\" <- 1, \"Dewey\" <- 2, \"Other\" <- 3:4): recoding created 260 NAs Warning in recode(occupation.hh, \"Upper white collar\" <- 10:20, \"Other white collar\" <- 30, : recoding created 106 NAs Warning in recode(religious.pref, \"Protestant\" <- 1, \"Catholic\" <- 2, \"Other,none\" <- 3:5): recoding created 5 NAs Warning in recode(race, \"White\" <- 1, \"Black\" <- 2): recoding created 17 NAs ftable(xtabs(~vote3+occup4,data=vote.48)) gt1 <- genTable(percent(vote3)~occup4,data=vote.48) ## For knitr-ing, we use ```{r, ftable.digits=c(2,2,2,0)} here. ftable(gt1,row.vars=2) gt2 <- genTable(percent(vote3)~relig3,data=vote.48) ftable(gt2,row.vars=2) gt3 <- genTable(percent(vote3)~race2,data=vote.48) ftable(gt3,row.vars=2) gt4 <- genTable(percent(vote3)~total.income,data=vote.48) ftable(gt4,row.vars=2) ## For knitr-ing, we use ```{r, ftable.digits=c(2,2,2)} here. inc.tab <- genTable(percent(vote3,ci=TRUE)~total.income,data=vote.48) ftable(inc.tab,row.vars=c(3,2)) occup.tab <- genTable(percent(vote3,ci=TRUE)~occup4,data=vote.48) ftable(occup.tab,row.vars=c(3,2))"},{"path":"https://melff.github.io/mclogit/articles/anes48.html","id":"logit-modelling-of-candidate-choice","dir":"Articles","previous_headings":"Analysis > Some descriptive analyses","what":"Logit modelling of candidate choice","title":"Analysing the American National Election Study of 1948 with 'memisc'","text":"following conduct logit analysis vote Truman. First, assign non-standard contrasts categorical predictors. , function contr used assign treatment (dummy) contrasts occup4 total.income baseline category 3 4, respectively. now fit logistic regression models impact occupational class, income, religious denomination vote choice supporting Truman. contrasts occupational class income factors compare choices members blue-collar class classes middle income group ($ 2000-2999) income groups. religious denomination factor compares Protestants Catholics denominations. First, use mtable construct comparative table estimates model1, model2, model3. thus can compare impact occupational class income choice candidate Truman. mtable returns object class \"mtable\". formatted looks close requirements typical social science publications. Yet least want change technical variable names non-technical ones, can use relabel: comparison pseudo-R-Square values model 1 2 suggests occupational class stronger influence preference Truman household income. Indeed, occupational class taken account, effect income longer statistically significant column corresponding model 3 indicates. Second, compare effect occupational class religious denomination preference Truman along lines . use mtable collect estimates model1, model4, model5 common table. comparison pseudo-R-squared values suggests also effect religious denomination weaker occupational class. However, third column table indicates effect religious denomination remains statistically significant.","code":"vote.48 <- within(vote.48,{   contrasts(occup4) <- contr(\"treatment\",base = 3)   contrasts(total.income) <- contr(\"treatment\",base = 4)   }) model1 <- glm((vote3==\"Truman\")~occup4,data=vote.48,               family=\"binomial\") model2 <- glm((vote3==\"Truman\")~total.income,data=vote.48,               family=\"binomial\") model3 <- glm((vote3==\"Truman\")~occup4+total.income,data=vote.48,               family=\"binomial\") model4 <- glm((vote3==\"Truman\")~relig3,data=vote.48,               family=\"binomial\") model5 <- glm((vote3==\"Truman\")~occup4+relig3,data=vote.48,               family=\"binomial\") mtable(model1,model2,model3,summary.stats=c(\"Nagelkerke R-sq.\",\"Deviance\",\"AIC\",\"N\")) Calls: model1: glm(formula = (vote3 == \"Truman\") ~ occup4, family = \"binomial\",      data = vote.48) model2: glm(formula = (vote3 == \"Truman\") ~ total.income, family = \"binomial\",      data = vote.48) model3: glm(formula = (vote3 == \"Truman\") ~ occup4 + total.income, family = \"binomial\",      data = vote.48)  ===============================================================================                                              model1      model2      model3     -------------------------------------------------------------------------------   (Intercept)                                1.047***    0.708***    1.316***                                               (0.184)     (0.210)     (0.268)       occup4: Upper white collar/Blue collar    -2.448***               -2.328***                                               (0.327)                 (0.357)       occup4: Other white collar/Blue collar    -1.080***               -1.015**                                                (0.315)                 (0.323)       occup4: Farmer/Blue collar                -0.622                  -0.792*                                                 (0.362)                 (0.383)       total.income: UNDER $500/$2000-2999                   -0.708      -0.662                                                              (0.737)     (1.056)       total.income: $500-$999/$2000-2999                    -0.238       0.912                                                              (0.607)     (1.143)       total.income: $1000-1999/$2000-2999                   -0.115       0.144                                                              (0.343)     (0.440)       total.income: $3000-3999/$2000-2999                   -0.807**    -0.527                                                              (0.289)     (0.338)       total.income: $4000-4999/$2000-2999                   -0.875*     -0.509                                                              (0.358)     (0.411)       total.income: $5000 AND OVER/$2000-2999               -1.470***   -0.535                                                              (0.337)     (0.405)     -------------------------------------------------------------------------------   Nagelkerke R-sq.                           0.246       0.085       0.274        Deviance                                 404.190     524.433     390.551        AIC                                      412.190     538.433     410.551        N                                        344         398         340          ===============================================================================   Significance: *** = p < 0.001; ** = p < 0.01; * = p < 0.05 relabel(mtable(             \"Model 1\"=model1,             \"Model 2\"=model2,             \"Model 3\"=model3,             summary.stats=c(\"Nagelkerke R-sq.\",\"Deviance\",\"AIC\",\"N\")),           UNDER=\"under\",           \"AND OVER\"=\"and over\",           occup4=\"Occup. class\",           total.income=\"Income\",           gsub=TRUE           ) Calls: Model 1: glm(formula = (vote3 == \"Truman\") ~ occup4, family = \"binomial\",      data = vote.48) Model 2: glm(formula = (vote3 == \"Truman\") ~ total.income, family = \"binomial\",      data = vote.48) Model 3: glm(formula = (vote3 == \"Truman\") ~ occup4 + total.income, family = \"binomial\",      data = vote.48)  ====================================================================================                                                  Model 1     Model 2     Model 3     ------------------------------------------------------------------------------------   (Intercept)                                     1.047***    0.708***    1.316***                                                    (0.184)     (0.210)     (0.268)       Occup. class: Upper white collar/Blue collar   -2.448***               -2.328***                                                    (0.327)                 (0.357)       Occup. class: Other white collar/Blue collar   -1.080***               -1.015**                                                     (0.315)                 (0.323)       Occup. class: Farmer/Blue collar               -0.622                  -0.792*                                                      (0.362)                 (0.383)       Income: under $500/$2000-2999                              -0.708      -0.662                                                                   (0.737)     (1.056)       Income: $500-$999/$2000-2999                               -0.238       0.912                                                                   (0.607)     (1.143)       Income: $1000-1999/$2000-2999                              -0.115       0.144                                                                   (0.343)     (0.440)       Income: $3000-3999/$2000-2999                              -0.807**    -0.527                                                                   (0.289)     (0.338)       Income: $4000-4999/$2000-2999                              -0.875*     -0.509                                                                   (0.358)     (0.411)       Income: $5000 and over/$2000-2999                          -1.470***   -0.535                                                                   (0.337)     (0.405)     ------------------------------------------------------------------------------------   Nagelkerke R-sq.                                0.246       0.085       0.274        Deviance                                      404.190     524.433     390.551        AIC                                           412.190     538.433     410.551        N                                             344         398         340          ====================================================================================   Significance: *** = p < 0.001; ** = p < 0.01; * = p < 0.05 relabel(mtable(               \"Model 1\"=model1,               \"Model 4\"=model4,               \"Model 5\"=model5,               summary.stats=c(\"Nagelkerke R-sq.\",\"Deviance\",\"AIC\",\"N\")),             occup4=\"Occup. class\",             relig3=\"Religion\",             gsub=TRUE             ) Calls: Model 1: glm(formula = (vote3 == \"Truman\") ~ occup4, family = \"binomial\",      data = vote.48) Model 4: glm(formula = (vote3 == \"Truman\") ~ relig3, family = \"binomial\",      data = vote.48) Model 5: glm(formula = (vote3 == \"Truman\") ~ occup4 + relig3, family = \"binomial\",      data = vote.48)  ====================================================================================                                                  Model 1     Model 4     Model 5     ------------------------------------------------------------------------------------   (Intercept)                                     1.047***   -0.213       0.698**                                                     (0.184)     (0.126)     (0.216)       Occup. class: Upper white collar/Blue collar   -2.448***               -2.385***                                                    (0.327)                 (0.337)       Occup. class: Other white collar/Blue collar   -1.080***               -1.098***                                                    (0.315)                 (0.326)       Occup. class: Farmer/Blue collar               -0.622                  -0.346                                                       (0.362)                 (0.374)       Religion: Catholic/Protestant                               0.877***    0.685*                                                                  (0.243)     (0.292)       Religion: Other,none/Protestant                             0.975**     1.191**                                                                 (0.347)     (0.441)     ------------------------------------------------------------------------------------   Nagelkerke R-sq.                                0.246       0.060       0.281        Deviance                                      404.190     537.711     393.105        AIC                                           412.190     543.711     405.105        N                                             344         402         344          ====================================================================================   Significance: *** = p < 0.001; ** = p < 0.01; * = p < 0.05"},{"path":"https://melff.github.io/mclogit/articles/gentab.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Importing data from SPSS and Stata","text":"R well suited statistical graphics, application advanced data analysis techniques, Monte Carlo studies estimators. However, lacks support typical data management tasks arise social sciences well simple generation desctiptive statistics. “memisc” facilitates typical data management tasks survey researchers, also generation descriptive statistics, often first step serious social science data analysis. particular facilitates creation tables percentages descriptive statistics broken subgroups data. mainly achieved function genTable, described following section. section thereafter describes tables thus created can exported LaTeX HTML.","code":""},{"path":"https://melff.github.io/mclogit/articles/gentab.html","id":"creating-tables-of-descriptive-statistics","dir":"Articles","previous_headings":"","what":"Creating Tables of Descriptive Statistics","title":"Importing data from SPSS and Stata","text":"General table descriptive statistics can created using function genTable(). syntax calls function quite similar function xtabs(): first argument (tagged formula) formula determines descriptive statistics used groups computed. left-hand side formula determines statistics computed. right-hand side determines grouping factor(s). second argument optional data= argument determines data frame data set descriptive statistics computed. illustrated following example, uses (like page item objects) GLES 2013 election study1. example first create table descriptives age distribution respondents per German federal state: table look good, transprose : next example create table percentages second votes per federal state. First prepare data, though: (code run, warnings issued, indicate conditions exhaustive, , observations none conditions call cases() met. corresponding elements resulting vector contain NA observations. present case occurs observations missing values intent.turnout turnout.) set data, get table percentages: course also possible create multi-dimensional tables, .e. tables created grouping one factor:","code":"library(memisc) ZA5702 <- spss.system.file(\"Data/ZA5702_v2-0-0.sav\") gles2013work <- subset(ZA5702,                        select=c(                          wave                  = survey,                          gender                   = vn1,                          byear                 = vn2c,                          bmonth                = vn2b,                          intent.turnout        = v10,                          turnout               = n10,                          voteint.candidate     = v11aa,                          voteint.list          = v11ba,                          postal.vote.candidate = v12aa,                          postal.vote.list      = v12ba,                          vote.candidate        = n11aa,                          vote.list             = n11ba,                                           bula                  = bl                        )) gles2013work <- within(gles2013work,{   measurement(byear) <- \"interval\"   measurement(bmonth) <- \"interval\"   age <- 2013 - byear   age[bmonth > 9] <- age[bmonth > 9] - 1    }) options(digits=3) age.tab <- genTable(c(Mean=mean(age),            `Std.dev`=sd(age),            Median=median(age))~bula,          data=gles2013work) age.tab bula           Baden-Wuerttemberg Bayern Berlin Brandenburg Bremen Hamburg Hessen   Mean                  54.5   54.4   52.8        59.7   60.4    51.5   56.9   Std.dev               18.9   18.9   19.8        19.3   11.5    18.7   18.5   Median                57.0   56.0   57.0        62.5   63.0    53.0   60.0          bula           Mecklenburg-Vorpommern Niedersachsen Nordrhein-Westfalen   Mean                      57.0          55.1                53.9   Std.dev                   19.2          18.4                19.1   Median                    60.5          56.0                55.0          bula           Rheinland-Pfalz Saarland Sachsen Sachsen-Anhalt Schleswig-Holstein   Mean               57.2     61.9    58.3           54.7               60.0   Std.dev            18.2     17.3    16.7           17.1               19.9   Median             60.5     65.0    60.5           56.0               65.0          bula           Thueringen   Mean          57.8   Std.dev       17.4   Median        60.0 age.tab <- t(age.tab) age.tab bula                     Mean Std.dev Median   Baden-Wuerttemberg     54.5    18.9   57.0   Bayern                 54.4    18.9   56.0   Berlin                 52.8    19.8   57.0   Brandenburg            59.7    19.3   62.5   Bremen                 60.4    11.5   63.0   Hamburg                51.5    18.7   53.0   Hessen                 56.9    18.5   60.0   Mecklenburg-Vorpommern 57.0    19.2   60.5   Niedersachsen          55.1    18.4   56.0   Nordrhein-Westfalen    53.9    19.1   55.0   Rheinland-Pfalz        57.2    18.2   60.5   Saarland               61.9    17.3   65.0   Sachsen                58.3    16.7   60.5   Sachsen-Anhalt         54.7    17.1   56.0   Schleswig-Holstein     60.0    19.9   65.0   Thueringen             57.8    17.4   60.0 gles2013work <- within(gles2013work,{    candidate.vote <- cases(               wave == 1 & intent.turnout == 6 -> postal.vote.candidate,               wave == 1 & intent.turnout %in% 4:5 -> 900,               wave == 1 & intent.turnout %in% 1:3 -> voteint.candidate,               wave == 2 & turnout == 1 -> vote.candidate,               wave == 2 & turnout == 2 -> 900             )    list.vote <- cases(               wave == 1 & intent.turnout == 6 -> postal.vote.list,               wave == 1 & intent.turnout %in% 4:5 -> 900,               wave == 1 & intent.turnout %in% 1:3 -> voteint.list,               wave == 2 & turnout ==1 -> vote.list,               wave == 2 & turnout ==2 -> 900             )    candidate.vote <- recode(as.item(candidate.vote),                       \"CDU/CSU\"   =  1 <- 1,                       \"SPD\"       =  2 <- 4,                       \"FDP\"       =  3 <- 5,                       \"Grüne\"     =  4 <- 6,                       \"Linke\"     =  5 <- 7,                       \"NPD\"       =  6 <- 206,                       \"Piraten\"   =  7 <- 215,                       \"AfD\"       =  8 <- 322,                       \"Other\"     = 10 <- 801,                       \"No Vote\"   = 90 <- 900,                       \"WN\"        = 98 <- -98,                       \"KA\"        = 99 <- -99                   )   list.vote <- recode(as.item(list.vote),                       \"CDU/CSU\"   =  1 <- 1,                       \"SPD\"       =  2 <- 4,                       \"FDP\"       =  3 <- 5,                       \"Grüne\"     =  4 <- 6,                       \"Linke\"     =  5 <- 7,                       \"NPD\"       =  6 <- 206,                       \"Piraten\"   =  7 <- 215,                       \"AfD\"       =  8 <- 322,                       \"Other\"     = 10 <- 801,                       \"No Vote\"   = 90 <- 900,                       \"WN\"        = 98 <- -98,                       \"KA\"        = 99 <- -99                   )       missing.values(candidate.vote) <- 98:99    missing.values(list.vote) <- 98:99    measurement(candidate.vote) <- \"nominal\"    measurement(list.vote) <- \"nominal\"  }) Warning in cases(postal.vote.candidate <- wave == 1 & intent.turnout == : conditions are not exhaustive Warning in cases(postal.vote.list <- wave == 1 & intent.turnout == 6, 900 <- wave == : conditions are not exhaustive vote.tab <- genTable(percent(list.vote)~bula,                      data=gles2013work) options(digits=1) t(vote.tab) bula                     CDU/CSU   SPD   FDP Grüne Linke   NPD Piraten   AfD   Baden-Wuerttemberg        27.7  21.8   7.0  17.2   6.0   0.4     2.1   4.6   Bayern                    36.4  17.7   5.5  10.6   5.3   0.0     2.4   4.0   Berlin                    26.5  22.3   8.4  10.2  13.9   1.8     1.8   6.6   Brandenburg               20.4  22.8   2.5   5.6  18.5   0.6     0.6   2.5   Bremen                    21.7  26.1   0.0  17.4  13.0   0.0     0.0   4.3   Hamburg                   22.2  35.6   2.2   4.4   6.7   2.2     0.0   4.4   Hessen                    42.0  26.5   3.0   8.5   4.0   0.0     0.5   3.0   Mecklenburg-Vorpommern    32.9  19.9   2.1   4.1  17.8   1.4     2.7   1.4   Niedersachsen             32.7  32.4   3.2   9.5   3.2   0.0     0.7   0.7   Nordrhein-Westfalen       32.7  31.3   3.4  10.7   3.7   0.4     2.3   1.8   Rheinland-Pfalz           39.4  21.3   1.6   6.3   8.7   1.6     0.8   3.9   Saarland                  40.0  40.0   0.0   0.0   0.0   0.0     0.0   0.0   Sachsen                   49.4  16.6   1.2   3.3  14.2   0.3     1.2   0.9   Sachsen-Anhalt            27.0  29.5   1.2   8.3  19.1   0.4     0.8   0.4   Schleswig-Holstein        28.4  25.9   4.3   9.5   4.3   0.0     0.0   5.2   Thueringen                35.1  15.9   1.6   2.9  22.4   1.2     0.0   2.4                          bula                     Other No Vote     N   Baden-Wuerttemberg       1.1    12.3 285.0   Bayern                   2.0    16.0 451.0   Berlin                   0.6     7.8 166.0   Brandenburg              1.2    25.3 162.0   Bremen                   0.0    17.4  23.0   Hamburg                  2.2    20.0  45.0   Hessen                   0.0    12.5 200.0   Mecklenburg-Vorpommern   0.0    17.8 146.0   Niedersachsen            0.4    17.3 284.0   Nordrhein-Westfalen      0.7    13.1 563.0   Rheinland-Pfalz          1.6    15.0 127.0   Saarland                 0.0    20.0  30.0   Sachsen                  0.3    12.7 332.0   Sachsen-Anhalt           0.0    13.3 241.0   Schleswig-Holstein       0.9    21.6 116.0   Thueringen               0.8    17.6 245.0 gles2013work <- within(gles2013work,{    # We relabel the items, since they are originally in German   labels(turnout) <- c(\"Yes, voted\"=1, \"No, did not vote\"=2)      labels(gender) <- c(\"Male\"=1,\"Female\"=2) }) genTable(percent(turnout)~gender+bula,          data=gles2013work) , , bula = Baden-Wuerttemberg                    gender                    Male Female   Yes, voted         88     85   No, did not vote   12     15   N                  90     61  , , bula = Bayern                    gender                    Male Female   Yes, voted         85     80   No, did not vote   15     20   N                  89    129  , , bula = Berlin                    gender                    Male Female   Yes, voted        100     85   No, did not vote    0     15   N                  38     52  , , bula = Brandenburg                    gender                    Male Female   Yes, voted         83     77   No, did not vote   17     23   N                  36     62  , , bula = Bremen                    gender                    Male Female   Yes, voted         91     80   No, did not vote    9     20   N                  11      5  , , bula = Hamburg                    gender                    Male Female   Yes, voted         88     76   No, did not vote   12     24   N                  16     21  , , bula = Hessen                    gender                    Male Female   Yes, voted         91     81   No, did not vote    9     19   N                  66     48  , , bula = Mecklenburg-Vorpommern                    gender                    Male Female   Yes, voted         84     72   No, did not vote   16     28   N                  32     47  , , bula = Niedersachsen                    gender                    Male Female   Yes, voted         88     83   No, did not vote   12     17   N                  75     70  , , bula = Nordrhein-Westfalen                    gender                    Male Female   Yes, voted         90     82   No, did not vote   10     18   N                 148    158  , , bula = Rheinland-Pfalz                    gender                    Male Female   Yes, voted         84     85   No, did not vote   16     15   N                  43     34  , , bula = Saarland                    gender                    Male Female   Yes, voted         91     72   No, did not vote    9     28   N                  11     18  , , bula = Sachsen                    gender                    Male Female   Yes, voted         88     88   No, did not vote   12     12   N                 103     73  , , bula = Sachsen-Anhalt                    gender                    Male Female   Yes, voted         89     81   No, did not vote   11     19   N                  63     73  , , bula = Schleswig-Holstein                    gender                    Male Female   Yes, voted         89     85   No, did not vote   11     15   N                  37     33  , , bula = Thueringen                    gender                    Male Female   Yes, voted         91     71   No, did not vote    9     29   N                  70     73"},{"path":"https://melff.github.io/mclogit/articles/gentab.html","id":"formatting-tables-of-descriptive-statistics","dir":"Articles","previous_headings":"","what":"Formatting Tables of Descriptive Statistics","title":"Importing data from SPSS and Stata","text":"results genTable() objects class \"table\" can re-arranged “flattened” table function ftable. demonstrate , continue previous example: Arranging cells table using ftable() improves appearance results genTable() screen, include results word processor document LaTeX file, facilities needed provided “memisc”. include flattened table LaTeX document, one can convert store appropriate format using toLatex() writeLines() HTML output, one can use show_html() (e.g. inclusion “knitr” documents) write_html(), functions based format_html(). continue example demonstate : Continuing another example: course can also export LaTeX:","code":"gt <- genTable(percent(turnout)~gender+bula,          data=gles2013work) # We beautify the table a bit ... names(dimnames(gt)) <- c(\"Voted\",\"Gender\",\"State\") gt <- dimrename(gt,\"Yes, voted\"=\"Yes\",                 \"No, did not vote\"=\"No\") ftable(gt,col.vars = c(\"Gender\",\"Voted\")) Gender Male         Female                                Voted   Yes  No   N    Yes  No   N State                                                     Baden-Wuerttemberg              88  12  90     85  15  61 Bayern                          85  15  89     80  20 129 Berlin                         100   0  38     85  15  52 Brandenburg                     83  17  36     77  23  62 Bremen                          91   9  11     80  20   5 Hamburg                         88  12  16     76  24  21 Hessen                          91   9  66     81  19  48 Mecklenburg-Vorpommern          84  16  32     72  28  47 Niedersachsen                   88  12  75     83  17  70 Nordrhein-Westfalen             90  10 148     82  18 158 Rheinland-Pfalz                 84  16  43     85  15  34 Saarland                        91   9  11     72  28  18 Sachsen                         88  12 103     88  12  73 Sachsen-Anhalt                  89  11  63     81  19  73 Schleswig-Holstein              89  11  37     85  15  33 Thueringen                      91   9  70     71  29  73 ft <- ftable(gt,col.vars = c(\"Gender\",\"Voted\")) lt <- toLatex(ft,digits=c(1,1,0,1,1,0)) writeLines(lt,con=\"Voted2013-GenderState.tex\") show_html(ft,digits=c(1,1,0,1,1,0)) show_html(ft,digits=c(1,1,0,1,1,0),show.titles=FALSE) # Writing into a HTML file ... write_html(ft,digits=c(1,1,0,1,1,0),show.titles=FALSE,            file=\"Voted2013-GenderState.html\") # age.tab was created earlier age.ftab <- ftable(age.tab,row.vars=1) show_html(age.ftab,digits=1,show.titles=FALSE) toLatex(age.ftab,digits=1,show.titles=FALSE) \\begin{tabular}{llD{.}{.}{1}D{.}{.}{1}D{.}{.}{1}} \\toprule  && \\multicolumn{1}{c}{Mean}&\\multicolumn{1}{c}{Std.dev}&\\multicolumn{1}{c}{Median}\\\\ \\midrule Baden-Wuerttemberg     && 54.5 & 18.9 & 57.0\\\\ Bayern                 && 54.4 & 18.9 & 56.0\\\\ Berlin                 && 52.8 & 19.8 & 57.0\\\\ Brandenburg            && 59.7 & 19.3 & 62.5\\\\ Bremen                 && 60.4 & 11.5 & 63.0\\\\ Hamburg                && 51.5 & 18.7 & 53.0\\\\ Hessen                 && 56.9 & 18.5 & 60.0\\\\ Mecklenburg-Vorpommern && 57.0 & 19.2 & 60.5\\\\ Niedersachsen          && 55.1 & 18.4 & 56.0\\\\ Nordrhein-Westfalen    && 53.9 & 19.1 & 55.0\\\\ Rheinland-Pfalz        && 57.2 & 18.2 & 60.5\\\\ Saarland               && 61.9 & 17.3 & 65.0\\\\ Sachsen                && 58.3 & 16.7 & 60.5\\\\ Sachsen-Anhalt         && 54.7 & 17.1 & 56.0\\\\ Schleswig-Holstein     && 60.0 & 19.9 & 65.0\\\\ Thueringen             && 57.8 & 17.4 & 60.0\\\\ \\bottomrule \\end{tabular}"},{"path":[]},{"path":"https://melff.github.io/mclogit/articles/import.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Generating Tables of Descriptive Statistics with ","text":"\"foreign\" package R already provides facilities import data statistical software packages SPSS Stata, limited way survey data generally represented R. , since variables R data frame can numerical vectors factors, direct translation SPSS Stata data sets data frames lead loss information information, variable labels, variable labels, user-specified missing values. (Value labels can preserved translating factor levels, means losing information original codes. also lead undesired missing values, variables original data sets partially labelled.) \"memisc\" package reason provides functions allow import SPSS Stata data sets objects class \"data.set\" defined .","code":""},{"path":"https://melff.github.io/mclogit/articles/import.html","id":"the-role-of-importer-objects","dir":"Articles","previous_headings":"","what":"The role of \"importer\" objects","title":"Generating Tables of Descriptive Statistics with ","text":"Importing data using facilities provided \"memisc\" package consists two steps. first step, description data file collected object class \"importer\". second step, data imported \"data.set\" objects help \"importer\" objects. \"importer\" objects contain meta-data e.g. variable labels, value labels, user-defined missing values. allows get overview structure file without need loading complete data, advantageous esp. data set large. example, help \"importer object\" possible see labels variables one can select variables data file actually needed. data set object R memory can created -- imprtr importer object -- calls like subset(imprtr,...), imprtr[...] .data.set(imprtr). examples given following.","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/articles/import.html","id":"importing-from-a-spss-system-file","dir":"Articles","previous_headings":"Importing data from SPSS files","what":"Importing from a SPSS \"system\" file","title":"Generating Tables of Descriptive Statistics with ","text":"order import data SPSS \"system\" file, usual binary format SPSS data now usually saved often distributed, one needs first make file contains data known R, following example: : \"system file\" declared using function spss.system.file(), metadata becomes available, number cases variables (just seen), names labels variables (seen ): : (extract full output shown, since data set contains many 979 variables.) \"importer\" object, ZA5702 example, also allow obtain full codebook refrain showing codebook obvious reason creating much output. inspection data file shows, variable names standardised, yet non-mnemonic structure. Variables referring questions asked pre-election wave GLES 2013 study names starting \"v\", referring questions asked post-election wave names starting \"v\", referring question asked waves names starting \"nv\". specific analysis, variable names useful. reason want rename . loading data, convenient data import renaming one step example : variable names left equality sign variable names appear data set import, variable names right equality aign variable names exist data file. demonstration information can extracted data file, create codebook one items data set: gles2013work$turnout — 'Wahlbeteiligung'","code":"library(memisc) ZA5702 <- spss.system.file(\"Data/ZA5702_v2-0-0.sav\") ZA5702 SPSS system file 'Data/ZA5702_v2-0-0.sav'      with 979 variables and 3911 observations description(ZA5702) study    'Studiennummer'                        version  'GESIS Archiv Version'                 year     'Erhebungsjahr'                        field    'Erhebungszeitraum'                    glescomp 'GLES-Komponente'                      survey   'Erhebung/Welle'                       lfdn     'Laufende Nummer (Kumulation)'         vlfdn    'Laufende Nummer (Vorwahl)'            nlfdn    'Laufende Nummer (Nachwahl)'           datum    'Datum der Befragung (Monat/Tag/Jahr)' codebook(ZA5702) gles2013work <- subset(ZA5702,                        select=c(                          wave                  = survey,                          intent.turnout        = v10,                          turnout               = n10,                          voteint.candidate     = v11aa,                          voteint.list          = v11ba,                          postal.vote.candidate = v12aa,                          postal.vote.list      = v12ba,                          vote.candidate        = n11aa,                          vote.list             = n11ba,                                           bula                  = bl                        )) codebook(gles2013work$turnout)"},{"path":"https://melff.github.io/mclogit/articles/import.html","id":"import-from-a-spss-portable-file","dir":"Articles","previous_headings":"Importing data from SPSS files","what":"Import from a SPSS \"portable\" file","title":"Generating Tables of Descriptive Statistics with ","text":"Data SPSS \"portable\" files imported essentially way data SPSS \"system\" files: first step make data set known R: : Since file contains German umlauts (contrast previous example), need convert character coding value labels etc. \"Latin-1\" (original coding data) native encoding system (unless computer using natively \"Latin-1\" encoding - must Mac Linux System - variant UTF8). Importer objects created \"portable\" files can examined way importer objects created \"system\" files. example, get description variables data set (variable labels) codebook. : actually import data make accessible analysis can (), use .data.set(), subset() example:","code":"ZA3861 <- spss.portable.file(\"Data/ZA3861.por\") ZA3861 SPSS portable file 'Data/ZA3861.por'      with 331 variables and 3263 observations ZA3861 <- Iconv(ZA3861,from=\"latin1\") description(ZA3861) vvpnid   'Fallnummer'                                  vsplitwo 'West-Ost-Kennung'                            vvornach 'Vor-/Nachwahl'                               vland    'Bundesland'                                  v10      'Wirtschaftl. Lage allgemein'                 v20      'Wirtschaftl. Lage retrospektiv'              v30      'Wirtschaftl. Lage prospektiv'                v31      'Wichtigkeit Erst/Zweitstimme BTW (nicht 94)' v40      'Demokratiezufriedenheit'                     v50      'Staerke Politikinteresse' work2002 <- subset(ZA3861,     select=c(           respid            = vvpnid,           split.wo          = vsplitwo,           split.vor.nach    = vvornach,           Bundesland        = vland,           Erststimme        = v69,           Zweitstimme       = v70,           Geschlecht        = vsex,           GebMonat          = vmonat,           GebJahr           = vjahr,           Konfession        = vrelig,           Kirchgang         = vkirchg,           Erwerbst          = vberuftg,           FrErwerbst        = vfrbertg,           Beruf             = vberuf,           Famstand          = vfamstdn,           Partner           = vpartner,           BildungP          = vpbildga,           BerufstP          = vpberuft,           FrBerufstP        = vpfbertg,           BerufP            = vpberuf,           ReprGewicht       = vgvwnw         )     )"},{"path":"https://melff.github.io/mclogit/articles/import.html","id":"import-from-a-fixed-width-file-accompanied-by-spss-syntax","dir":"Articles","previous_headings":"Importing data from SPSS files","what":"Import from a fixed-width file accompanied by SPSS syntax","title":"Generating Tables of Descriptive Statistics with ","text":"Data recent study components American National Elecion Study comes fixed-width format, additional SPSS syntax files define columns, variable labels, value labels, missing values. memisc also provides importer function data. Naturally requires little bit information. addition actual data file, also need file SPSS syntax specifying data columns. Optionally, Syntax files define variable labels, value lables, missing values can also specified. : information data can now obtained returned importer object way importer objects describe SPSS \"system\" SPSS \"portable\" files. , can use names(), description(), codebook(). get data memory R can use () functions .data.set() subset().","code":"anes2008TS <- spss.fixed.file(\"Data/anes2008/anes2008TS_dat.txt\",                               columns.file=\"Data/anes2008/anes2008TS_col.sps\",                               varlab.file=\"Data/anes2008/anes2008TS_lab.sps\",                               codes.file=\"Data/anes2008/anes2008TS_cod.sps\",                               missval.file=\"Data/anes2008/anes2008TS_md.sps\") anes2008TS SPSS fixed column file 'issues/anes2008/anes2008TS_dat.txt'      with 1954 variables and 2322 observations     with variable labels from file 'issues/anes2008/anes2008TS_lab.sps'      with value labels from file 'issues/anes2008/anes2008TS_cod.sps'      with missing value definitions from file 'issues/anes2008/anes2008TS_md.sps'"},{"path":"https://melff.github.io/mclogit/articles/import.html","id":"importing-data-from-a-stata-file","dir":"Articles","previous_headings":"Importing data from SPSS files","what":"Importing data from a Stata file","title":"Generating Tables of Descriptive Statistics with ","text":"Data Stata files (Stata Version 12) can imported way data SPSS files. main difference function used , fact user-defined missing values exists Stata. , see following example: : gles2013work.dta$turnout — 'Wahlbeteiligung'","code":"library(memisc) ZA5702.dta <- Stata.file(\"Data/ZA5702_v2-0-0.dta\") ZA5702.dta Stata file 'Data/ZA5702_v2-0-0.dta'      with 874 variables and 3911 observations gles2013work.dta <- subset(ZA5702.dta,                        select=c(                          wave                  = survey,                          intent.turnout        = v10,                          turnout               = n10,                          voteint.candidate     = v11aa,                          voteint.list          = v11ba,                          postal.vote.candidate = v12aa,                          postal.vote.list      = v12ba,                          vote.candidate        = n11aa,                          vote.list             = n11ba,                                           bula                  = bl                        )) codebook(gles2013work.dta$turnout)"},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Handling questionnaire items with 'memisc'","text":"R great tool data analysis data management tasks arise context big data analytics. Nevertheless still room improvement terms support data management tasks arise social sciences, especially comes handling data come social surveys opinion surveys. main reason way questionnaire item responses usually coded machine-readable survey data sets directly easily translate R’s data types numeric categorical data, , numerical vectors factors. consequence, many social scientists exercise everyday data management tasks commercial software packages SPSS Stata, may social scientists either afford commercial software prefer use, principle, open-source software steps data management analysis. one aim “memisc” package provide bridge social science data sets variables contain coded responses questionnaire items, typical structures involving labelled numeric response codes numeric codes declared “missing values”. illustrative example, suppose pre-election survey, respondents asked party going vote constituency framework first-past--post electoral system. Suppose response categories offered respondents “Conservative”, “Labour”, “Liberal Democrat”, “party”.1 survey agency actually conducts interviews sample voters may, according common practice, use following codes collect responses question vote intention: data sets contain results coding essentially numeric data – additional information “value labels” (labels attached numeric values) “missing values” (numeric values indicate responses one usually want include statistical analysis). coding frame responses survey questionnaires far uncommon social sciences, straightforward retain information R objects. two main alternatives, (1) one store responses numeric vector, thereby losing information labelled values, (2) one store responses factor, thereby losing information contained codes. Either way, one lose information “missing values”. course, one can filter missing values data analysis replacing NA, convenient facilities automatically.","code":""},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"standard-attributes-of-survey-items","dir":"Articles","previous_headings":"","what":"Standard attributes of survey items","title":"Handling questionnaire items with 'memisc'","text":"“memisc” package introduces new data type (correctly S4 class) allows handle data, allows adjust labels missing values definitions translate data needed either numeric vectors factors, thereby automatically filtering missing values. data time (S4 class) , lack better term, called \"item\". general, users bother construction item vectors. Usually generated data sets imported data files SPSS Stata format. page mainly concerned describing structure item vectors can manipulated data management step usually precedes data analysis. thus possible data management R importing pristine data obtained data archives data providers, survey institutes principal investigator delegated data collection. course, facilities introduced \"item\" data type also allow create appropriate representations survey item responses principal investigator obtains raw numeric codes. following, construction \"item\" vectors raw numeric data mainly used highlight structure.","code":""},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"value_labels","dir":"Articles","previous_headings":"Standard attributes of survey items","what":"Value labels","title":"Handling questionnaire items with 'memisc'","text":"Suppose numeric vector responses question vote intention coded using coding frame shown looks follows numeric vector transformed \"item\" vector attaching labels codes. R code attach labels reflect coding frame shown may look like follows (formatted nicely): voteint now item vector, particular \"show\" method defined: Like factors, R shows contents vector, labels shown (instead codes). Since item vectors typically quite long, come interviewing survey sample usual survey sample sizes 2000, usually want see values vector. \"memisc\" anticipates shows single line output. (output, also “level measurement” shown, point consquence. become clear later implications “level measurement” .) line usual semantics labels(voteint) now show us description labels values assigned: Now rather want shorter labels, can change either something like labels(voteint) <- ... changing labels using relabel(): Let us take look result:","code":"Loading required package: lattice Loading required package: MASS Attaching package: 'memisc' The following objects are masked from 'package:stats':      contr.sum, contr.treatment, contrasts The following object is masked from 'package:base':      as.array voteint [1]  4  3  9  2 97 99  9  9  1  1  3  3  9  3  9  1  1  9  9  3  1  9  1  9  9  [26]  9 98 99  9  2  1  1  4  9  1  1  1 98  2  9  2  9  1  1  3  1  2  3  1  2  [51]  9  1  9 97  9  1  9  1  9  9  1  9 97  9 97  9  4  2  9  2  9  1  9  2  4  [76]  1  2  1  2  9  9  4  9 97  3  1  1  1  9  9  1  9  3 99  3  4  4  3  1  9 [101]  4 97  1 99  2  2 98  3  3 98  1  9 98 99  1  3  9  9  2  1  1  9  1  2  1 [126]  9  9  1  4  9  9  1  4  4  9 99  3  9  9  9  3  4  9  9  4  4  9  4  4  9 [151]  2  1  1  1  1  9  9  9  1  3  1  2 99  3  2  9  2 99  2  3  9  1  1  1  2 [176]  9  4  1 98  3 99 99  9  9  3  9  1  2  1  9  2  4 98  1  4 99  9  2  2  2 # This is to be run *after* memisc has been loaded. labels(voteint) <- c(Conservative       =  1,                      Labour             =  2,                      \"Liberal Democrat\" =  3, # We have whitespace in the label,                       \"Other Party\"      =  4, # so we need quotation marks                      \"Will not vote\"    =  9,                      \"Don't know\"       = 97,                      \"Answer refused\"   = 98,                      \"Not applicable\"   = 99) class(voteint) [1] \"double.item\" attr(,\"package\") [1] \"memisc\" str(voteint) Nmnl. item w/ 8 labels for 1,2,3,...  num [1:200] 4 3 9 2 97 99 9 9 1 1 ... voteint Item (measurement: nominal, type: double, length = 200)    [1:200] Other Party Liberal Democrat Will not vote Labour Don't know ... labels(voteint) Values and labels:      1 'Conservative'         2 'Labour'               3 'Liberal Democrat'     4 'Other Party'          9 'Will not vote'       97 'Don't know'          98 'Answer refused'      99 'Not applicable' voteint <- relabel(voteint,                    \"Conservative\"     = \"Cons\",                    \"Labour\"           = \"Lab\",                    \"Liberal Democrat\" = \"LibDem\",                    \"Other Party\"      = \"Other\",                    \"Will not vote\"    = \"NoVote\",                    \"Don't know\"       = \"DK\",                    \"Answer refused\"   = \"Refused\",                    \"Not applicable\"   = \"N.a.\") labels(voteint) Values and labels:      1 'Cons'        2 'Lab'         3 'LibDem'      4 'Other'       9 'NoVote'     97 'DK'         98 'Refused'    99 'N.a.' voteint Item (measurement: nominal, type: double, length = 200)    [1:200] Other LibDem NoVote Lab DK N.a. NoVote NoVote Cons Cons LibDem ... str(voteint) Nmnl. item w/ 8 labels for 1,2,3,...  num [1:200] 4 3 9 2 97 99 9 9 1 1 ..."},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"missing_values","dir":"Articles","previous_headings":"Standard attributes of survey items","what":"Missing values","title":"Handling questionnaire items with 'memisc'","text":"coding plan shown , values 97, 98, 99 marked “missing values”, , represent coded responses, considered valid sense providing information respondent’s vote intention. statistical analysis vote intention natural replace NA. Yet replacing codes 97, 98, 99 already stage importing data R memory mean loss potentially precious information since precludes, e.g. motivation refuse responding vote intention question antencedents undecidedness. Hence better mark values delay replacement NA later stage analysis vote intentions able undo change “missingness” values. example, may one interested antecedents response refusals also interested analyse vote intention non-voting excluded included. memisc package provides, like SPSS PSPP, facilities mark particular values item vector “missing” change designations throughout data preperation stage. several ways \"memisc\" make distinctions valid missing values. first way mirrors way done SPSS. illustrate return fictitious vote intention example. values 97,98,99 voteint designated “missing” missing values reflected output voteint, (labels ) missing values marked * output: also possible extend set missing values: add another value set missing values. missing values can recalled usual: missing values turned NA voteint coerced numeric vector factor, usually happens eventual statistical analysis: also possible drop missing value designations: contrast SPSS possible \"memisc\" designate valid, .e. non-missing values: Instead individual valid missing values also possible define range values valid:","code":"missing.values(voteint) <- c(97,98,99) voteint Item (measurement: nominal, type: double, length = 200)    [1:200] Other LibDem NoVote Lab *DK *N.a. NoVote NoVote Cons Cons LibDem ... missing.values(voteint) <- missing.values(voteint) + 9 missing.values(voteint) 97, 98, 99, 9 as.numeric(voteint)[1:30] [1]  4  3 NA  2 NA NA NA NA  1  1  3  3 NA  3 NA  1  1 NA NA  3  1 NA  1 NA NA [26] NA NA NA NA  2 as.factor(voteint)[1:30] [1] Other  LibDem <NA>   Lab    <NA>   <NA>   <NA>   <NA>   Cons   Cons   [11] LibDem LibDem <NA>   LibDem <NA>   Cons   Cons   <NA>   <NA>   LibDem [21] Cons   <NA>   Cons   <NA>   <NA>   <NA>   <NA>   <NA>   <NA>   Lab    Levels: Cons Lab LibDem Other missing.values(voteint) <- NULL missing.values(voteint) NULL as.numeric(voteint)[1:30] [1]  4  3  9  2 97 99  9  9  1  1  3  3  9  3  9  1  1  9  9  3  1  9  1  9  9 [26]  9 98 99  9  2 valid.values(voteint) <- 1:4 valid.values(voteint) 1, 2, 3, 4 missing.values(voteint) 9, 97, 98, 99 valid.range(voteint) <- c(1,9) missing.values(voteint) 97, 98, 99"},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"annotations","dir":"Articles","previous_headings":"Standard attributes of survey items","what":"Other attributes of survey items","title":"Handling questionnaire items with 'memisc'","text":"software packages targeted social scientists also allow add annotations variables data set, subject syntactic constraints variable names. annotations usually called “variable labels” software packages. \"memisc\" corresponding term “description”. continuation running example, add description vote intention variable: contrast software, \"memisc\" allows attach arbitrarily annotation survey items, wording survey question:","code":"description(voteint) <- \"Vote intention\" description(voteint) [1] \"Vote intention\" wording(voteint) <- \"Which party are you going to vote for in the general election next Tuesday?\" wording(voteint) [1] \"Which party are you going to vote for in the general election next Tuesday?\" annotation(voteint) description:      Vote intention  wording:      Which party are you going to vote for in the general election next      Tuesday? annotation(voteint)[\"wording\"] wording  \"Which party are you going to vote for in the general election next Tuesday?\""},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"codebooks-of-survey-items","dir":"Articles","previous_headings":"Standard attributes of survey items","what":"Codebooks of survey items","title":"Handling questionnaire items with 'memisc'","text":"common survey research describe data set form codebook. codebook summarises variable data set terms relevant attributes, , label attached variable (context memisc package called “description”), labels attached values variable, values variable supposed missing valid, well univariate summary statistics variable, usually without missing variables included. functionality provided package function codebook(). codebook() applied \"item\" object returns \"codebook\" object, printed console gives overview variable usually required codebook data set (production codebooks whole data sets described ). illustrate codebook() function now produce codebook voteint item variable created : can seen output, codebook() function reports name variable, description (defined variable), question wording (defined). reports storage mode (use R), level measurement (“nominal”, “ordinal”, “interval”, “ratio”) range valid values (alternatively, individually defined valid values, individually defined missing values, ranges missing values). item variables value labels, shows table frequencies labelled values, percentages valid values values missings included. Codebooks particularly useful find “wild codes”, codes labelled, usually produced coding errors. coding errors may less common data sets produced CAPI CATI online surveys, may occur older data sets age computer-assisted interviewing also course data management. use codebooks demonstrated following deliberatly adding coding errors copy voteint variable: presence “wild codes” can now spotted using codebook(): output shows 20 observations contain wild codes variable. don’t get list wild codes part codebook? reason codebook supposed also work continuous variables thousands unique, unlabelled values. Users certainly like see part codebook. order get list wild codes development version “memisc” contains function wild.codes(), apply variable voteint1 see 6.5 3.5 percent observations wild codes 5 7. see codebook() works variables without value labels, create unlabelled copy voteint variable: Usually, variables without labelled values represent measures interval ratio scale. case, want see many unlabelled values , want get statistics, mean, variance, etc. purpose, decleare variable voteint2 interval-scale level measurement.2 convenience including word-processor documents, also possibility export codebooks HTML:  voteint — ‘Vote intention’ “party going vote general election next Tuesday?”","code":"codebook(voteint) ================================================================================     voteint 'Vote intention'     \"Which party are you going to vote for in the general election next    Tuesday?\"  --------------------------------------------------------------------------------     Storage mode: double    Measurement: nominal    Valid range: 1 - 9     Values and labels     N Valid Total                                            1   'Cons'          49  27.8  24.5     2   'Lab'           26  14.8  13.0     3   'LibDem'        21  11.9  10.5     4   'Other'         19  10.8   9.5     9   'NoVote'        61  34.7  30.5    97 M 'DK'             6         3.0    98 M 'Refused'        7         3.5    99 M 'N.a.'          11         5.5 voteint1 <- voteint voteint1[sample(length(voteint),size=20)] <- c(rep(5,13),rep(7,7)) codebook(voteint1) ================================================================================     voteint1 'Vote intention'     \"Which party are you going to vote for in the general election next    Tuesday?\"  --------------------------------------------------------------------------------     Storage mode: double    Measurement: nominal    Valid range: 1 - 9     Values and labels     N Valid Total                                            1   'Cons'          44  25.0  22.0     2   'Lab'           24  13.6  12.0     3   'LibDem'        16   9.1   8.0     4   'Other'         17   9.7   8.5     9   'NoVote'        55  31.2  27.5    97 M 'DK'             6         3.0    98 M 'Refused'        7         3.5    99 M 'N.a.'          11         5.5         (unlab.val.)    20  11.4  10.0 wild.codes(voteint1) Counts Percent 5   13.0     6.5 7    7.0     3.5 voteint2 <- voteint labels(voteint2) <- NULL # This deletes all value labels codebook(voteint2) ================================================================================     voteint2 'Vote intention'     \"Which party are you going to vote for in the general election next    Tuesday?\"  --------------------------------------------------------------------------------     Storage mode: double    Measurement: nominal    Valid range: 1 - 9     Values               N Valid Total                                              (unlab.val.)   176 100.0  88.0      M (unlab.mss.)    24        12.0 measurement(voteint2) <- \"interval\" codebook(voteint2) ================================================================================     voteint2 'Vote intention'     \"Which party are you going to vote for in the general election next    Tuesday?\"  --------------------------------------------------------------------------------     Storage mode: double    Measurement: interval    Valid range: 1 - 9     Values                 N Percent                                          M (unlab.mss.)      24    12.0                                             Min: 1.000                          Max: 9.000                         Mean: 4.483                     Std.Dev.: 3.413 show_html(codebook(voteint))"},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"data-sets-containers-of-survey-items","dir":"Articles","previous_headings":"","what":"Data sets: Containers of survey items","title":"Handling questionnaire items with 'memisc'","text":"Usually one expects able handle data responses survey items isolation, part data set, contains multitude observations many variables. usual data structure R contain observation--variables data data frame. principle possible put survey item vectors described data frame, nevertheless \"memisc\" package provides special data structure contain survey item data called data sets data set-objects, , objects class \"data.set\". opens possibility automatically translate survey items regular vectors factors, expected typical data analysis functions, lm() glm().","code":""},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"the-structure-of-data-set-objects","dir":"Articles","previous_headings":"Data sets: Containers of survey items","what":"The structure of \"data.set\" objects","title":"Handling questionnaire items with 'memisc'","text":"Data set objects essentially row--column structure data frames: set vectors (however class \"item\") length, row data set values vectors. Observations can addressed rows \"data.set\" variabels can addressed columns, just one may used regards data frames. data management operations can data frames can also done data sets (merging using functions () within()). Yet contrast data frames, data sets always expected contain objects class \"item\", vectors factors \"data.set\" object constructed changed \"item\" objects. Another difference way \"data.set\" objects shown console. S4 objects, user types name \"data.set\" objects, function show() (print()) applied . show()-method data set objects defined way first observations first variables shown console – contrast print() applied data frame, shows observations variables. may intuitive convenient shown observations small data frame, want data set contains 2000 observations several hundred variables, dimensions typical social science data sets can download data archives ICPSR GESIS. main facilitites \"data.set\" objects demonstrated follows. First, create data set fictional survey responses , take look already sizeable \"data.set\"” object: case, data set three variables, shown, observations see first 25. Actually number observations shown can determined option \"show.max.obs\" defaults 25, can changed convenient: really want see complete data console, can use print() instead: large data sets, Eurobarometer trend file …","code":"Data <- data.set(           vote = sample(c(1,2,3,4,8,9,97,99),                         size=300,replace=TRUE),           region = sample(c(rep(1,3),rep(2,2),3,99),                           size=300,replace=TRUE),           income = round(exp(rnorm(300,sd=.7))*2000)           ) Data Data set with 300 observations and 3 variables     vote region income  1    2      3   4950  2   99     99    727  3    2      3   1667  4   97     99   2970  5    1      1   2943  6    9      2   1351  7    1      1   1540  8    4      1   2270  9    3      1   2047 10    8      1   6042 11    9     99   1589 12    3     99   5126 13    1      1   1206 14    8      2   8878 15    8      1   2859 16    3      1   1038 17    2      2   1844 18    2      1   2928 19    9     99    921 20   97      1   2885 21    1      2   1453 22    4      3   1185 23    8      2   3593 24    2      3   4981 25    2      2   8243 .. .... ...... ...... (25 of 300 observations shown) options(show.max.obs=5) Data Data set with 300 observations and 3 variables    vote region income 1    2      3   4950 2   99     99    727 3    2      3   1667 4   97     99   2970 5    1      1   2943 . .... ...... ...... (5 of 300 observations shown) # Back to the default options(show.max.obs=25) print(Data)"},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"manipulating-data-in-data-sets","dir":"Articles","previous_headings":"Data sets: Containers of survey items","what":"Manipulating data in data sets","title":"Handling questionnaire items with 'memisc'","text":"Typical data management tasks otherwise done commercial packages like SPSS Stata can conducted within data set objects. Actually provide possibility (author package) main reason \"memisc\" package created. demonstrate , continue fictional data prepare analysis: Now added information data set reflects code plan variables, take look looks like: can see, labelled item look bit like factors, difference: User-defined missing values marked asterisk. Subsetting data set object works expected:","code":"Data <- within(Data,{   description(vote) <- \"Vote intention\"   description(region) <- \"Region of residence\"   description(income) <- \"Household income\"   wording(vote) <- \"If a general election would take place next Tuesday,                     the candidate of which party would you vote for?\"   wording(income) <- \"All things taken into account, how much do all                     household members earn in sum?\"   foreach(x=c(vote,region),{     measurement(x) <- \"nominal\"     })   measurement(income) <- \"ratio\"   labels(vote) <- c(                     Conservatives         =  1,                     Labour                =  2,                     \"Liberal Democrats\"   =  3,                     \"Other\"               =  4,                     \"Don't know\"          =  8,                     \"Answer refused\"      =  9,                     \"Not applicable\"      = 97,                     \"Not asked in survey\" = 99)   labels(region) <- c(                     England               =  1,                     Scotland              =  2,                     Wales                 =  3,                     \"Not applicable\"      = 97,                     \"Not asked in survey\" = 99)   foreach(x=c(vote,region,income),{     annotation(x)[\"Remark\"] <- \"This is not a real survey item, of course ...\"     })   missing.values(vote) <- c(8,9,97,99)   missing.values(region) <- c(97,99)    # These to variables do not appear in the   # the resulting data set, since they have the wrong length.   junk1 <- 1:5   junk2 <- matrix(5,4,4)    }) Warning in within(Data, {: Variables 'junk1','junk2' have wrong length, removing them. Data Data set with 300 observations and 3 variables                     vote               region income  1               Labour                Wales   4950  2 *Not asked in survey *Not asked in survey    727  3               Labour                Wales   1667  4      *Not applicable *Not asked in survey   2970  5        Conservatives              England   2943  6      *Answer refused             Scotland   1351  7        Conservatives              England   1540  8                Other              England   2270  9    Liberal Democrats              England   2047 10          *Don't know              England   6042 11      *Answer refused *Not asked in survey   1589 12    Liberal Democrats *Not asked in survey   5126 13        Conservatives              England   1206 14          *Don't know             Scotland   8878 15          *Don't know              England   2859 16    Liberal Democrats              England   1038 17               Labour             Scotland   1844 18               Labour              England   2928 19      *Answer refused *Not asked in survey    921 20      *Not applicable              England   2885 21        Conservatives             Scotland   1453 22                Other                Wales   1185 23          *Don't know             Scotland   3593 24               Labour                Wales   4981 25               Labour             Scotland   8243 .. .................... .................... ...... (25 of 300 observations shown) EnglandData <- subset(Data,region == \"England\") EnglandData Data set with 132 observations and 3 variables                     vote  region income  1        Conservatives England   2943  2        Conservatives England   1540  3                Other England   2270  4    Liberal Democrats England   2047  5          *Don't know England   6042  6        Conservatives England   1206  7          *Don't know England   2859  8    Liberal Democrats England   1038  9               Labour England   2928 10      *Not applicable England   2885 11                Other England   2155 12                Other England   1280 13      *Not applicable England   4111 14               Labour England    689 15 *Not asked in survey England   2421 16                Other England   5511 17 *Not asked in survey England   4628 18          *Don't know England    896 19          *Don't know England    842 20          *Don't know England    948 21        Conservatives England   2346 22        Conservatives England   1234 23                Other England   1186 24        Conservatives England   1215 25      *Not applicable England   5516 .. .................... ....... ...... (25 of 132 observations shown)"},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"codebooks","dir":"Articles","previous_headings":"Data sets: Containers of survey items","what":"Codebooks of data sets","title":"Handling questionnaire items with 'memisc'","text":"Previouly, created code book individual survey items. also possible create codebook whole data set (one usually wants codebook ). Obtaining codebook simple, applying function codebook() data frame: website, looks better HTML:  vote — ‘Vote intention’ “general election take place next Tuesday, candidate party vote ?”    Remark: real survey item, course …   region — ‘Region residence’    Remark: real survey item, course …   income — ‘Household income’ “things taken account, much household members earn sum?”    Remark: real survey item, course …","code":"codebook(Data) ================================================================================     vote 'Vote intention'     \"If a general election would take place next Tuesday, the candidate of which    party would you vote for?\"  --------------------------------------------------------------------------------     Storage mode: double    Measurement: nominal    Missing values: 8, 9, 97, 99     Values and labels              N Valid Total                                                     1   'Conservatives'          32  21.1  10.7     2   'Labour'                 41  27.0  13.7     3   'Liberal Democrats'      36  23.7  12.0     4   'Other'                  43  28.3  14.3     8 M 'Don't know'             47        15.7     9 M 'Answer refused'         29         9.7    97 M 'Not applicable'         28         9.3    99 M 'Not asked in survey'    44        14.7     Remark:        This is not a real survey item, of course ...  ================================================================================     region 'Region of residence'  --------------------------------------------------------------------------------     Storage mode: double    Measurement: nominal    Missing values: 97, 99     Values and labels              N Valid Total                                                     1   'England'               132  51.4  44.0     2   'Scotland'               87  33.9  29.0     3   'Wales'                  38  14.8  12.7    99 M 'Not asked in survey'    43        14.3     Remark:        This is not a real survey item, of course ...  ================================================================================     income 'Household income'     \"All things taken into account, how much do all household members earn in    sum?\"  --------------------------------------------------------------------------------     Storage mode: double    Measurement: ratio          Min:   245.000         Max: 13596.000        Mean:  2556.743    Std.Dev.:  2158.757     Remark:        This is not a real survey item, of course ... show_html(codebook(Data))"},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"translating-data-sets-into-data-frames","dir":"Articles","previous_headings":"Data sets: Containers of survey items","what":"Translating data sets into data frames","title":"Handling questionnaire items with 'memisc'","text":"punchline existence \"data.set\" objects however can coerced regular data frames, using .data.frame(), causes survey items translated regular numeric vectors factors using .numeric(), .factor() .ordered() , pre-determined missing values changed NA. Whether survey item changed numerical vector, unordered ordered factor depends declared measurement level (can manipulated measurement() shown ). example developed far, variables vote region declared nominal level measurement, income declared ratio scale. , statistical analyses, want first two variables handled (unordered) factors, income variable numerical vector. addition, want user-declared missing values changed NA observations respondents stated “don’t know” goint go vote excluded analysis. let’s see whether works - coerce data set data frame: Indeed translation works expected, can use statistical analysis, simple cross tab: fact, since many functions xtabs(), lm(), glm(), etc. coerce theire data= argument data frame, explicit coercion .data.frame() always needed: Sometimes want missing values included, possible : convenience, also codebook method data frames:  vote — ‘Vote intention’     region — ‘Region residence’     income — ‘Household income’","code":"DataFr <- as.data.frame(Data) ## Looking a the data frame structure str(DataFr) 'data.frame':   300 obs. of  3 variables:  $ vote  : Factor w/ 4 levels \"Conservatives\",..: 2 NA 2 NA 1 NA 1 4 3 NA ...   ..- attr(*, \"label\")= chr \"Vote intention\"  $ region: Factor w/ 3 levels \"England\",\"Scotland\",..: 3 NA 3 NA 1 2 1 1 1 1 ...   ..- attr(*, \"label\")= chr \"Region of residence\"  $ income: num  4950 727 1667 2970 2943 ...   ..- attr(*, \"label\")= chr \"Household income\" ## Looking at the first 25 observations DataFr[1:25,] vote   region income 1             Labour    Wales   4950 2               <NA>     <NA>    727 3             Labour    Wales   1667 4               <NA>     <NA>   2970 5      Conservatives  England   2943 6               <NA> Scotland   1351 7      Conservatives  England   1540 8              Other  England   2270 9  Liberal Democrats  England   2047 10              <NA>  England   6042 11              <NA>     <NA>   1589 12 Liberal Democrats     <NA>   5126 13     Conservatives  England   1206 14              <NA> Scotland   8878 15              <NA>  England   2859 16 Liberal Democrats  England   1038 17            Labour Scotland   1844 18            Labour  England   2928 19              <NA>     <NA>    921 20              <NA>  England   2885 21     Conservatives Scotland   1453 22             Other    Wales   1185 23              <NA> Scotland   3593 24            Labour    Wales   4981 25            Labour Scotland   8243 xtabs(~vote+region,data=DataFr) region vote                England Scotland Wales   Conservatives          16        4     7   Labour                 12       17     7   Liberal Democrats      20        7     3   Other                  24       13     4 xtabs(~vote+region,data=Data) region vote                England Scotland Wales   Conservatives          16        4     7   Labour                 12       17     7   Liberal Democrats      20        7     3   Other                  24       13     4 xtabs(~vote+region,data=within(Data,                                 vote <- include.missings(vote))) region vote                   England Scotland Wales   Conservatives             16        4     7   Labour                    12       17     7   Liberal Democrats         20        7     3   Other                     24       13     4   *Don't know               19       19     4   *Answer refused           11       10     3   *Not applicable           12        5     6   *Not asked in survey      18       12     4 show_html(codebook(DataFr))"},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"more-tools-for-data-preparation","dir":"Articles","previous_headings":"","what":"More tools for data preparation","title":"Handling questionnaire items with 'memisc'","text":"social scientists work survey data, always organised coded way suits intended data analysis. reasons, \"memisc\" package provides two functions recode() cases(). former – name suggests – recoding, second allows complex distinctions cases can seen general version ifelse(). two functions demonstrated “real-life” example.","code":""},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"recode","dir":"Articles","previous_headings":"More tools for data preparation","what":"Recoding","title":"Handling questionnaire items with 'memisc'","text":"function recode() similar semantics function name package \"car\" designed way conflict function. fact, recode() called way expected package \"car\", dispatch processing function. words, users package may use recode() used . version recode() function provided \"memisc\" differs \"car\" version far syntax R-ish (believe). load example data set – subset German Longitudinal Election Study 20133 – R’s memory. simple example use recode() use function recode German Bundesländer item two values East West Germany. first create codebook variable contains Bundesländer codes:  bula — ‘Bundesland’    now recode Bundesländer codes new variable: check whether successful: can seen, recode() called way old codes transferred new ones, also new codes labelled.","code":"load(system.file(\"gles/gles2013work.RData\",package=\"memisc\")) with(gles2013work,      show_html(codebook(bula))) gles2013work <- within(gles2013work,                        east.west <- recode(bula,                                           East = 1 <- c(3,4,8,13,14,16),                                           West = 2 <- c(1,2,5:7,9:12,15)                                           )) xtabs(~bula+east.west,data=gles2013work) east.west bula                     East West   Baden-Wuerttemberg        0  333   Bayern                    0  507   Berlin                  190    0   Brandenburg             212    0   Bremen                    0   27   Hamburg                   0   49   Hessen                    0  232   Mecklenburg-Vorpommern  160    0   Niedersachsen             0  331   Nordrhein-Westfalen       0  619   Rheinland-Pfalz           0  150   Saarland                  0   45   Sachsen                 402    0   Sachsen-Anhalt          252    0   Schleswig-Holstein        0  131   Thueringen              271    0"},{"path":"https://melff.github.io/mclogit/articles/items.html","id":"case-distinctions","dir":"Articles","previous_headings":"More tools for data preparation","what":"Case distinctions","title":"Handling questionnaire items with 'memisc'","text":"Recoding can used combine codes item smaller set, sometimes one needs complex data preparations, values variable set conditional values another one, etc. tasks, \"memisc\" package provides function cases(). function takes several expressions evaluate logical vectors arguments returns numeric vector factor, values level indicate observation expressions evaluates TRUE respective observation. factor levels named logical expressions. simple example looks thus: example cases() returns factor. can also made return numeric value: example shows way cases() works abstract. can made used practical example best demonstrated real-world example, using data German Longitudinal Election Study. 2013 election module, intention vote pre-election respondents interviewed pre-election wave (wave==1) participation election respondents interviewed post-election wave (wave==2) recorded different data set variables, named intent.turnout turnout. variable intent.voteint codes whether respondents sure participate (1), likely participate (2), undecided (3), likely (4), sure participate (5), whether cast postal vote (6). Variable turnout codes participated election (1) (2). intention candidate vote recorded variable voteint.candidate intention list vote recoded variable voteint.list pre-election wave. postal vote party candidate recorded variable postal.vote.candidate party list variable postal.vote.list. Recalled votes post-election wave recorded variables vote.candidate vote.list. various variables combined two variables valid values waves, candidate.vote list.vote. , several conditions handled: whether respondent pre-election post-election wave, whether s/likely sure vote, whether cast postal vote. Thus variable cases() helpful : code shown following: pre-election wave (wave == 1), candidate.vote variable receives value postal vote variable postal.vote.candidate postal vote cast (intent.turnout == 6), receives value 900 respondents likely sure vote (intent.turnout %% 4:5), value variable voteint.candidate others (intent.turnout %% 1:3). post-election wave (wave == 2) variable candidate.vote receives value variable vote.candidate respondent voted (turnout == 1) value 900 s/voted (turnout == 2). variable list.vote constructed analogous manner variables wave, intent.turnout, turnout, postal.vote.list, voteint.list vote.list. constructin, resulting variables candidate.vote list.vote labelled missing values declared: Finally, can get cross-tabulation list votes East-West factor cross tabulation candidate votes list votes:","code":"x <- 1:10 xc <- cases(x <= 3,              x > 3 & x <= 7,              x > 7) data.frame(x,xc) x             xc 1   1         x <= 3 2   2         x <= 3 3   3         x <= 3 4   4 x > 3 & x <= 7 5   5 x > 3 & x <= 7 6   6 x > 3 & x <= 7 7   7 x > 3 & x <= 7 8   8          x > 7 9   9          x > 7 10 10          x > 7 xn <- cases(1 <- x <= 3,              2 <- x > 3 & x <= 7,              3 <- x > 7) data.frame(x,xn) x xn 1   1  1 2   2  1 3   3  1 4   4  2 5   5  2 6   6  2 7   7  2 8   8  3 9   9  3 10 10  3 gles2013work <- within(gles2013work,{    candidate.vote <- cases(               wave == 1 & intent.turnout == 6 -> postal.vote.candidate,               wave == 1 & intent.turnout %in% 4:5 -> 900,               wave == 1 & intent.turnout %in% 1:3 -> voteint.candidate,               wave == 2 & turnout == 1 -> vote.candidate,               wave == 2 & turnout == 2 -> 900             )    list.vote <- cases(               wave == 1 & intent.turnout == 6 -> postal.vote.list,               wave == 1 & intent.turnout %in% 4:5 -> 900,               wave == 1 & intent.turnout %in% 1:3 -> voteint.list,               wave == 2 & turnout ==1 -> vote.list,               wave == 2 & turnout ==2 -> 900             ) }) Warning in cases(postal.vote.candidate <- wave == 1 & intent.turnout == : 78 NAs created Warning in cases(postal.vote.list <- wave == 1 & intent.turnout == 6, 900 <- wave == : 78 NAs created gles2013work <- within(gles2013work,{   candidate.vote <- recode(as.item(candidate.vote),                       \"CDU/CSU\"   =  1 <- 1,                       \"SPD\"       =  2 <- 4,                       \"FDP\"       =  3 <- 5,                       \"Grüne\"     =  4 <- 6,                       \"Linke\"     =  5 <- 7,                       \"NPD\"       =  6 <- 206,                       \"Piraten\"   =  7 <- 215,                       \"AfD\"       =  8 <- 322,                       \"Other\"     = 10 <- 801,                       \"No Vote\"   = 90 <- 900,                       \"WN\"        = 98 <- -98,                       \"KA\"        = 99 <- -99                   )   list.vote <- recode(as.item(list.vote),                       \"CDU/CSU\"   =  1 <- 1,                       \"SPD\"       =  2 <- 4,                       \"FDP\"       =  3 <- 5,                       \"Grüne\"     =  4 <- 6,                       \"Linke\"     =  5 <- 7,                       \"NPD\"       =  6 <- 206,                       \"Piraten\"   =  7 <- 215,                       \"AfD\"       =  8 <- 322,                       \"Other\"     = 10 <- 801,                       \"No Vote\"   = 90 <- 900,                       \"WN\"        = 98 <- -98,                       \"KA\"        = 99 <- -99                   )       missing.values(candidate.vote) <- 98:99    missing.values(list.vote) <- 98:99    measurement(candidate.vote) <- \"nominal\"    measurement(list.vote) <- \"nominal\" }) Warning in recode(as.item(candidate.vote), `CDU/CSU` = 1 <- 1, SPD = 2 <- 4, : recoding created 18 NAs Warning in recode(as.item(list.vote), `CDU/CSU` = 1 <- 1, SPD = 2 <- 4, : recoding created 19 NAs xtabs(~list.vote+east.west,data=gles2013work) east.west list.vote East West   CDU/CSU  440  714   SPD      268  554   FDP       32   87   Grüne     70  226   Linke    227  101   NPD       11    6   Piraten   14   34   AfD       27   63   Other      6   21   No Vote  197  318 xtabs(~list.vote+candidate.vote,data=gles2013work) candidate.vote list.vote CDU/CSU  SPD  FDP Grüne Linke  NPD Piraten  AfD Other No Vote   CDU/CSU    1060   29   20     3    12    0       2    0     2       0   SPD          44  700    1    39    14    1       2    1     1       0   FDP          67   13   33     1     0    0       2    0     0       0   Grüne        32  102    4   141     7    0       5    3     0       0   Linke        10   45    2    15   245    2       2    2     1       0   NPD           0    2    0     0     1   12       0    0     1       0   Piraten       3    3    1     8     5    0      25    1     0       0   AfD          20    7    2     2     5    2       5   43     2       0   Other         5    4    0     3     1    1       0    1    11       0   No Vote       0    0    0     0     0    0       0    0     0     515"},{"path":"https://melff.github.io/mclogit/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Elff. Maintainer.","code":""},{"path":"https://melff.github.io/mclogit/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Elff M (2023). memisc: Management Survey Data Presentation Analysis Results. R package version 0.99.31.8, https://github.com/melff/memisc/, https://melff.github.io/memisc.","code":"@Manual{,   title = {memisc: Management of Survey Data and Presentation of Analysis Results},   author = {Martin Elff},   year = {2023},   note = {R package version 0.99.31.8, https://github.com/melff/memisc/},   url = {https://melff.github.io/memisc}, }"},{"path":[]},{"path":"https://melff.github.io/mclogit/index.html","id":"tools-for-managing-survey-data-and-creating-tables-of-estimates-and-data-summaries","dir":"","previous_headings":"","what":"Tools for Managing Survey Data and Creating Tables of Estimates and Data Summaries","title":"Management of Survey Data and Presentation of Analysis Results","text":"One aims package make life easier useRs deal survey data sets. provides infrastructure management survey data including value labels, definable missing values, recoding variables, production code books, import (subsets ) SPSS Stata files. , provides functionality produce tables data frames arbitrary descriptive statistics (almost) publication-ready tables regression model estimates, can exported LaTeX HTML. Releases published CRAN. Pre-releases available source binary form. install sources GitHub can use devtools::install_github(\"melff/memisc\",subdir=\"pkg\").","code":""},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":null,"dir":"Reference","previous_headings":"","what":"Introduction to the 'memisc' Package — Memisc","title":"Introduction to the 'memisc' Package — Memisc","text":"package collects assortment tools intended make work R easier author package submitted public hope also useful others. tools package can grouped four major categories: Data preparation management Data analysis Presentation analysis results Programming","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":"survey-items","dir":"Reference","previous_headings":"","what":"Survey Items","title":"Introduction to the 'memisc' Package — Memisc","text":"memisc provides facilities work users   packages like SPSS, SAS, Stata know `variable labels', `value labels'   `user-defined missing values'. context package   aspects data represented \"description\",   \"labels\", \"missing.values\" attributes   data vector.    facilities useful, example, work   survey data contain coded items like vote intention   may following structure: Question: ``parliamentary election next tuesday, party vote ?'' statistical package like SPSS allows   attach labels like `Conservative Party', `Labour Party', etc.   codes 1,2,3, etc. mark   mark codes 96, 97, 98, 99   `missing' thus exclude variables statistical   analyses. memisc provides similar facilities.   Labels can attached codes calls like labels(x) <- something   expendanded calls like labels(x) <- labels(x) + something,   codes can marked `missing'   calls like missing.values(x) <- something   missing.values(x) <- missing.values(x) + something. memisc defines class called \"data.set\", similar class \"data.frame\".   main difference especially geared toward containing survey item data.   Transformations within \"data.set\" objects retain information   value labels, missing values etc. Using .data.frame sets data   R's statistical functions, explicitely seldom necessary.   See data.set.","code":""},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":"more-convenient-import-of-external-data","dir":"Reference","previous_headings":"","what":"More Convenient Import of External Data","title":"Introduction to the 'memisc' Package — Memisc","text":"Survey data sets often relative large contain thousand variables.   specific analyses one needs however relatively small subset variables.   Although modern computers enough RAM load data sets completely R session,   efficient drop variables loading. Also, loading   large data set completely can time-consuming, R allocate space   many variables. Loading just subset variables really needed analysis   efficient convenient - tends much quicker. Thus package provides   facilities load subsets variables, without need load complete data set.   , loading data SPSS files organized way informations   variable labels, value labels, user-defined missing values retained.   made possible definition importer objects,   subset method exists. importer objects contain   information variables external data set data.   data loaded memory functions subset .data.set   used.","code":""},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":"recoding","dir":"Reference","previous_headings":"","what":"Recoding","title":"Introduction to the 'memisc' Package — Memisc","text":"memisc also contains facilities recoding   survey items. Simple recodings, example collapsing answer   categories, can done using function recode.   complex recodings, example construction indices   multiple items, complex case distinctions, can done   using function cases. function may also   useful programming, far generalization   ifelse.","code":""},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":"code-books","dir":"Reference","previous_headings":"","what":"Code Books","title":"Introduction to the 'memisc' Package — Memisc","text":"function codebook produces code book   external data set internal \"data.set\" object. codebook contains   conveniently formatted way concise information every variable data set,   value labels missing values defined univariate statistics. extended example facilities contained vignette \"anes48\",   demo(anes48)","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":"tables-and-data-frames-of-descriptive-statistics","dir":"Reference","previous_headings":"","what":"Tables and Data Frames of Descriptive Statistics","title":"Introduction to the 'memisc' Package — Memisc","text":"genTable generalization xtabs:   Instead counts, also descriptive statistics like means variances   can reported conditional levels factors. Also conditional   percentages factor can obtained using function. addition Aggregate    function provided, syntax genTable,   gives data frame descriptive statistics instead table   object.","code":""},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":"per-subset-analysis","dir":"Reference","previous_headings":"","what":"Per-Subset Analysis","title":"Introduction to the 'memisc' Package — Memisc","text":"variant   standard function : Conditioning factors   specified formula   obtained data frame subsets analysed.   Therefore need attach data frame   use dollar operator.","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":"publication-ready-tables-of-coefficients","dir":"Reference","previous_headings":"","what":"Publication-Ready Tables of Coefficients","title":"Introduction to the 'memisc' Package — Memisc","text":"Journals Political Social Sciences usually require estimates regression models presented following form: tables coefficient estimates can produced mtable. see possibilities function, use example(mtable).","code":"==================================================                     Model 1     Model 2     Model 3     --------------------------------------------------     Coefficients     (Intercept)     30.628***    6.360***   28.566***                     (7.409)     (1.252)     (7.355)     pop15           -0.471**                -0.461**                     (0.147)                 (0.145)     pop75           -1.934                  -1.691                     (1.041)                 (1.084)     dpi                          0.001      -0.000                                 (0.001)     (0.001)     ddpi                         0.529*      0.410*                                 (0.210)     (0.196)     --------------------------------------------------     Summaries     R-squared         0.262       0.162       0.338     adj. R-squared    0.230       0.126       0.280     N                50          50          50     =================================================="},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":"latex-representation-of-r-objects","dir":"Reference","previous_headings":"","what":"LaTeX Representation of R Objects","title":"Introduction to the 'memisc' Package — Memisc","text":"Output produced mtable can transformed LaTeX tables appropriate method generic function toLatex defined package utils. addition, memisc defines toLatex methods matrices ftable objects. Note results produced genTable can coerced ftable objects. Also, default method toLatex function defined coerces argument matrix applies matrix method toLatex.","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":"looping-over-variables","dir":"Reference","previous_headings":"","what":"Looping over Variables","title":"Introduction to the 'memisc' Package — Memisc","text":"Sometimes users want contruct loops run variables rather values.   example, one wants set missing values battery items.   purpose, package contains function foreach.   set 8 9 missing values items knowledge1,   knowledge2, knowledge3, one can use","code":"foreach(x=c(knowledge1,knowledge2,knowledge3),         missing.values(x) <- 8:9)"},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":"changing-names-of-objects-and-labels-of-factors","dir":"Reference","previous_headings":"","what":"Changing Names of Objects and Labels of Factors","title":"Introduction to the 'memisc' Package — Memisc","text":"R already makes possible change names object.   Substituting names dimnames   can done programming tricks. package defines   function rename,   dimrename, colrename, rowrename   implement tricks convenient way, programmers   (like author package) need reinvent weel   every instance changing names object.","code":""},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":"dimension-preserving-versions-of-lapply-and-sapply","dir":"Reference","previous_headings":"","what":"Dimension-Preserving Versions of lapply and sapply","title":"Introduction to the 'memisc' Package — Memisc","text":"function involved call    sapply returns result array matrix,   dimensional information gets lost. Also, list object   lapply sapply applied   dimension attribute, result looses information.   functions Lapply   Sapply defined package preserve   dimensional information.","code":""},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":"combining-vectors-and-arrays-by-names","dir":"Reference","previous_headings":"","what":"Combining Vectors and Arrays by Names","title":"Introduction to the 'memisc' Package — Memisc","text":"generic function collect collects several objects   mode one object, using names, rownames,   colnames /dimnames. methods   atomic vectors, arrays (including matrices), data frames.   example leads ","code":"a <- c(a=1,b=2)   b <- c(a=10,c=30)   collect(a,b) x  y   a  1 10   b  2 NA   c NA 30"},{"path":"https://melff.github.io/mclogit/reference/00memisc.html","id":"reordering-of-matrices-and-arrays","dir":"Reference","previous_headings":"","what":"Reordering of Matrices and Arrays","title":"Introduction to the 'memisc' Package — Memisc","text":"memisc package includes reorder   method arrays matrices. example, matrix   method default reorders rows matrix according results   function.","code":""},{"path":"https://melff.github.io/mclogit/reference/By.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Evaluation of an Expression — By","title":"Conditional Evaluation of an Expression — By","text":"function evaluates expression within subsets   data frame, subsets defined formula.","code":""},{"path":"https://melff.github.io/mclogit/reference/By.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Evaluation of an Expression — By","text":"","code":"By(formula,expr,data=parent.frame())"},{"path":"https://melff.github.io/mclogit/reference/By.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Evaluation of an Expression — By","text":"formula expression (preferably) formula       containing names conditioning variables factors. expr expression evaluated unique combination     values variables contained formula. data data frame, object can coerced     data frame (example, table), environment,     values variables formula     expr taken.","code":""},{"path":"https://melff.github.io/mclogit/reference/By.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional Evaluation of an Expression — By","text":"list class \"\", giving results combination values   variables formula.","code":""},{"path":"https://melff.github.io/mclogit/reference/By.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Evaluation of an Expression — By","text":"","code":"berkeley <- Aggregate(Table(Admit,Freq)~.,data=UCBAdmissions) (Bres <- By(~Dept,glm(cbind(Admitted,Rejected)~Gender,family=\"binomial\"),data=berkeley)) #> Dept: A #>  #> Call:  glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\") #>  #> Coefficients: #>  (Intercept)  GenderFemale   #>       0.4921        1.0521   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    19.05  #> Residual Deviance: 5.551e-15 \tAIC: 15.71 #> ------------------------------------------------------------  #> Dept: B #>  #> Call:  glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\") #>  #> Coefficients: #>  (Intercept)  GenderFemale   #>       0.5337        0.2200   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    0.2586  #> Residual Deviance: 0 \tAIC: 14.27 #> ------------------------------------------------------------  #> Dept: C #>  #> Call:  glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\") #>  #> Coefficients: #>  (Intercept)  GenderFemale   #>      -0.5355       -0.1249   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    0.751  #> Residual Deviance: -4.929e-14 \tAIC: 16.9 #> ------------------------------------------------------------  #> Dept: D #>  #> Call:  glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\") #>  #> Coefficients: #>  (Intercept)  GenderFemale   #>     -0.70396       0.08199   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    0.2979  #> Residual Deviance: 1.883e-13 \tAIC: 16.65 #> ------------------------------------------------------------  #> Dept: E #>  #> Call:  glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\") #>  #> Coefficients: #>  (Intercept)  GenderFemale   #>      -0.9570       -0.2002   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    0.9904  #> Residual Deviance: 1.821e-14 \tAIC: 15.6 #> ------------------------------------------------------------  #> Dept: F #>  #> Call:  glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\") #>  #> Coefficients: #>  (Intercept)  GenderFemale   #>      -2.7697        0.1889   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    0.3836  #> Residual Deviance: -4.863e-14 \tAIC: 13.83 # The results all have 'data' components str(Bres[[1]]$data) #> 'data.frame':\t2 obs. of  4 variables: #>  $ Gender  : Factor w/ 2 levels \"Male\",\"Female\": 1 2 #>  $ Dept    : Factor w/ 6 levels \"A\",\"B\",\"C\",\"D\",..: 1 1 #>  $ Admitted: num  512 89 #>  $ Rejected: num  313 19  attach(berkeley) (Bres <- By(~Dept,glm(cbind(Admitted,Rejected)~Gender,family=\"binomial\"))) #> Dept: A #>  #> Call:  glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\") #>  #> Coefficients: #>  (Intercept)  GenderFemale   #>       0.4921        1.0521   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    19.05  #> Residual Deviance: 5.551e-15 \tAIC: 15.71 #> ------------------------------------------------------------  #> Dept: B #>  #> Call:  glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\") #>  #> Coefficients: #>  (Intercept)  GenderFemale   #>       0.5337        0.2200   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    0.2586  #> Residual Deviance: 0 \tAIC: 14.27 #> ------------------------------------------------------------  #> Dept: C #>  #> Call:  glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\") #>  #> Coefficients: #>  (Intercept)  GenderFemale   #>      -0.5355       -0.1249   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    0.751  #> Residual Deviance: -4.929e-14 \tAIC: 16.9 #> ------------------------------------------------------------  #> Dept: D #>  #> Call:  glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\") #>  #> Coefficients: #>  (Intercept)  GenderFemale   #>     -0.70396       0.08199   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    0.2979  #> Residual Deviance: 1.883e-13 \tAIC: 16.65 #> ------------------------------------------------------------  #> Dept: E #>  #> Call:  glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\") #>  #> Coefficients: #>  (Intercept)  GenderFemale   #>      -0.9570       -0.2002   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    0.9904  #> Residual Deviance: 1.821e-14 \tAIC: 15.6 #> ------------------------------------------------------------  #> Dept: F #>  #> Call:  glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\") #>  #> Coefficients: #>  (Intercept)  GenderFemale   #>      -2.7697        0.1889   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    0.3836  #> Residual Deviance: -4.863e-14 \tAIC: 13.83 detach(berkeley)"},{"path":"https://melff.github.io/mclogit/reference/Descriptives.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectors of Univariate Sample Statistics — Descriptives","title":"Vectors of Univariate Sample Statistics — Descriptives","text":"Descriptives(x) gives vector sample statistics   use codebook.","code":""},{"path":"https://melff.github.io/mclogit/reference/Descriptives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectors of Univariate Sample Statistics — Descriptives","text":"","code":"Descriptives(x,...) # S4 method for atomic Descriptives(x, weights = NULL, ...) # S4 method for item.vector Descriptives(x, weights = NULL, ...)"},{"path":"https://melff.github.io/mclogit/reference/Descriptives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectors of Univariate Sample Statistics — Descriptives","text":"x atomic vector \"item.vector\" object. weights optional vector weights. ... arguments, passed future methods.","code":""},{"path":"https://melff.github.io/mclogit/reference/Descriptives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectors of Univariate Sample Statistics — Descriptives","text":"numeric vector sample statistics, containing range, mean, standard deviation, skewness (excess) kurtosis.","code":""},{"path":"https://melff.github.io/mclogit/reference/Descriptives.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectors of Univariate Sample Statistics — Descriptives","text":"","code":"x <- rnorm(100) Descriptives(x) #>          Min          Max         Mean     Std.Dev.     Skewness     Kurtosis  #> -2.921739508  3.344690911  0.002586872  1.047571766  0.047233157  0.494066711"},{"path":"https://melff.github.io/mclogit/reference/Foreach.html","id":null,"dir":"Reference","previous_headings":"","what":"Loop over Variables in a Data Frame or Environment — foreach","title":"Loop over Variables in a Data Frame or Environment — foreach","text":"foreach evaluates expression given untagged argument substituting   variables. expression may also contain assignments, take effect   caller's environment.","code":""},{"path":"https://melff.github.io/mclogit/reference/Foreach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loop over Variables in a Data Frame or Environment — foreach","text":"","code":"foreach(...,.sorted,.outer=FALSE)"},{"path":"https://melff.github.io/mclogit/reference/Foreach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loop over Variables in a Data Frame or Environment — foreach","text":"... tagged untagged arguments.     tagged arguments define 'variables' looped ,     first untagged argument defines expression wich     evaluated. .sorted optional logical value; relevant     range variable specified using column operator     \":\". Decises whether variable names sorted     alphabetically range variables created. argument missing, default value TRUE, foreach() called     global environment, otherwise FALSE. .outer optional logical value; TRUE, combination     variables used evaluate expression,     FALSE (default) variables need     length corresponding values     variables used evaluation expression.","code":""},{"path":"https://melff.github.io/mclogit/reference/Foreach.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loop over Variables in a Data Frame or Environment — foreach","text":"","code":"x <- 1:3 y <- -(1:3) z <- c(\"Uri\",\"Schwyz\",\"Unterwalden\") print(x) #> [1] 1 2 3 print(y) #> [1] -1 -2 -3 print(z) #> [1] \"Uri\"         \"Schwyz\"      \"Unterwalden\" foreach(var=c(x,y,z),          # assigns names   names(var) <- letters[1:3]   # to the elements of x, y, and z   ) print(x) #> a b c  #> 1 2 3  print(y) #>  a  b  c  #> -1 -2 -3  print(z) #>             a             b             c  #>         \"Uri\"      \"Schwyz\" \"Unterwalden\"   ds <- data.set(         a = c(1,2,3,2,3,8,9),         b = c(2,8,3,2,1,8,9),         c = c(1,3,2,1,2,8,8)       ) print(ds) #>   a b c #> 1 1 2 1 #> 2 2 8 3 #> 3 3 3 2 #> 4 2 2 1 #> 5 3 1 2 #> 6 8 8 8 #> 7 9 9 8 ds <- within(ds,{        description(a) <- \"First item in questionnaire\"       description(b) <- \"Second item in questionnaire\"       description(c) <- \"Third item in questionnaire\"              wording(a) <- \"What number do you like first?\"       wording(b) <- \"What number do you like second?\"       wording(c) <- \"What number do you like third?\"        foreach(x=a:c,{ # Lazy data documentation:         labels(x) <- c(    # a,b,c get value labels in one statement                          one = 1,                          two = 2,                        three = 3,                 \"don't know\" = 8,          \"refused to answer\" = 9)         missing.values(x) <- c(8,9)         })       })        codebook(ds) #> ================================================================================ #>  #>    a 'First item in questionnaire' #>  #>    \"What number do you like first?\" #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: interval #>    Missing values: 8, 9 #>  #>    Values and labels           N Valid Total #>                                              #>    1   'one'                   1  20.0  14.3 #>    2   'two'                   2  40.0  28.6 #>    3   'three'                 2  40.0  28.6 #>    8 M 'don't know'            1        14.3 #>    9 M 'refused to answer'     1        14.3 #>                                              #>         Min: 1.000                           #>         Max: 3.000                           #>        Mean: 2.200                           #>    Std.Dev.: 0.748                           #>  #> ================================================================================ #>  #>    b 'Second item in questionnaire' #>  #>    \"What number do you like second?\" #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: interval #>    Missing values: 8, 9 #>  #>    Values and labels           N Valid Total #>                                              #>    1   'one'                   1  25.0  14.3 #>    2   'two'                   2  50.0  28.6 #>    3   'three'                 1  25.0  14.3 #>    8 M 'don't know'            2        28.6 #>    9 M 'refused to answer'     1        14.3 #>                                              #>         Min: 1.000                           #>         Max: 3.000                           #>        Mean: 2.000                           #>    Std.Dev.: 0.707                           #>  #> ================================================================================ #>  #>    c 'Third item in questionnaire' #>  #>    \"What number do you like third?\" #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: interval #>    Missing values: 8, 9 #>  #>    Values and labels     N Valid Total #>                                        #>    1   'one'             2  40.0  28.6 #>    2   'two'             2  40.0  28.6 #>    3   'three'           1  20.0  14.3 #>    8 M 'don't know'      2        28.6 #>                                        #>         Min: 1.000                     #>         Max: 3.000                     #>        Mean: 1.800                     #>    Std.Dev.: 0.748                     #>   # The colon-operator respects the order of the variables # in the data set, if .sorted=FALSE with(ds[c(3,1,2)],      foreach(x=a:c,              print(description(x))             )) #> [1] \"First item in questionnaire\" #> [1] \"Third item in questionnaire\"  # Since .sorted=TRUE, the colon operator creates a range  # of alphabetically sorted variables. with(ds[c(3,1,2)],      foreach(x=a:c,              print(description(x)),              .sorted=TRUE             )) #> [1] \"First item in questionnaire\" #> [1] \"Second item in questionnaire\" #> [1] \"Third item in questionnaire\"  # The variables in reverse order with(ds,      foreach(x=c:a,              print(description(x))             )) #> [1] \"Third item in questionnaire\" #> [1] \"Second item in questionnaire\" #> [1] \"First item in questionnaire\"  # The colon operator can be combined with the  # concatenation function with(ds,      foreach(x=c(a:b,c,c,b:a),              print(description(x))             )) #> [1] \"First item in questionnaire\" #> [1] \"Second item in questionnaire\" #> [1] \"Third item in questionnaire\" #> [1] \"Third item in questionnaire\" #> [1] \"Second item in questionnaire\" #> [1] \"First item in questionnaire\"  # Variables can also be selected by regular expressions. with(ds,      foreach(x=rx(\"[a-b]\"),              print(description(x))             )) #> [1] \"First item in questionnaire\" #> [1] \"Second item in questionnaire\"  # A demonstration for '.outer=TRUE' foreach(l=letters[1:2],         i=1:3,         cat(paste0(l,i,\"\\n\")),         .outer=TRUE) #> a1 #> b1 #> a2 #> b2 #> a3 #> b3"},{"path":"https://melff.github.io/mclogit/reference/Groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Operate on grouped data in data frames and data sets — Groups","title":"Operate on grouped data in data frames and data sets — Groups","text":"Group creates grouped variant object   class \"data.frame\" class \"data.set\", methods   within defined, well-known   functions can applied \"groupwise\".","code":""},{"path":"https://melff.github.io/mclogit/reference/Groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Operate on grouped data in data frames and data sets — Groups","text":"","code":"# Create an object of class \"grouped.data\" from a # data frame or a data set. Groups(data,by,...) # S3 method for data.frame Groups(data,by,...) # S3 method for data.set Groups(data,by,...) # S3 method for grouped.data Groups(data,by,...)  # Recombine grouped data into a data fame or a data set recombine(x,...) # S3 method for grouped.data.frame recombine(x,...) # S3 method for grouped.data.set recombine(x,...)  # Recombine grouped data and coerce the result appropriately: # S3 method for grouped.data as.data.frame(x,...) # S4 method for grouped.data.frame as.data.set(x,row.names=NULL,...) # S4 method for grouped.data.set as.data.set(x,row.names=NULL,...)  # Methods of the generics \"with\" and \"within\" for grouped data # S3 method for grouped.data with(data,expr,...) # S3 method for grouped.data within(data,expr,recombine=FALSE,...)  # This is equivalent to with(Groups(data,by),expr,...) withGroups(data,by,expr,...) # This is equivalent to within(Groups(data,by),expr,recombine,...) withinGroups(data,by,expr,recombine=TRUE,...)"},{"path":"https://melff.github.io/mclogit/reference/Groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Operate on grouped data in data frames and data sets — Groups","text":"data object classes \"data.frame\", \"data.set\"     argument Groups, withGroups, withinGroups, formula factors levels define     groups. expr expression, several expressions enclosed curly     braces. recombine logical vector; resulting grouped     data recombined? x object class \"grouped.data\". row.names optional character vector row names. ... arguments, ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/Groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Operate on grouped data in data frames and data sets — Groups","text":"applied data frame Groups returns object class attributes     \"grouped.data.frame\", \"grouped.data\", \"data.frame\", applied object class     \"data.set\", returns object class attributes \"grouped.data.set\",     \"grouped.data\", \"data.set\". applied objects class attributed     \"grouped.data\", functions () amd within()     evaluate expr separately group defined     Groups. () returns array composed results     expr, within() returns modified copy     data argument, \"grouped.data\" object     (\"grouped.data.frame\" \"grouped.data.set\"), unless argument     recombine=TRUE set. expression expr may contain references variables     n_, N_, i_. n_ equal size     respective group (number rows belonging ),     N_ equal total number observations     groups. variable i_ equals indices rows     belonging respective group observations.","code":""},{"path":"https://melff.github.io/mclogit/reference/Groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Operate on grouped data in data frames and data sets — Groups","text":"","code":"some.data <- data.frame(x=rnorm(n=100)) some.data <- within(some.data,{     f <- factor(rep(1:4,each=25),labels=letters[1:4])     g <- factor(rep(1:5,each=4,5),labels=LETTERS[1:5])     y <- x + rep(1:4,each=25) +  0.75*rep(1:5,each=4,5) })  # For demonstration purposes, we create an # 'empty' group: some.data <- subset(some.data,                        f!=\"a\" | g!=\"C\")  some.grouped.data <- Groups(some.data,                            ~f+g)      # Computing the means of y for each combination f and g group.means <- with(some.grouped.data,                     mean(y)) group.means #>    g #> f          A        B        C        D        E #>   a 1.192013 2.804581       NA 4.248869 4.293577 #>   b 2.362952 3.224517 4.773872 4.897670 4.993074 #>   c 3.713604 4.399962 4.779567 5.865470 7.322921 #>   d 4.766810 4.830461 6.084168 7.575296 8.044888  # Obtaining a groupwise centered variant of y some.grouped.data <- within(some.grouped.data,{     y.cent <- y - mean(y) },recombine=FALSE)  # The groupwise centered variable should have zero mean # whithin each group group.means <- with(some.grouped.data,                     round(mean(y.cent),15)) group.means #>    g #> f   A B  C D E #>   a 0 0 NA 0 0 #>   b 0 0  0 0 0 #>   c 0 0  0 0 0 #>   d 0 0  0 0 0  # The following demonstrates the use of n_, N_, and i_ # An external copy of y y1 <- some.data$y group.means.n <- with(some.grouped.data,                       c(mean(y),  # Group means for y                         n_,       # Group sizes                         sum(y)/n_,# Group means for y                         n_/N_,    # Relative group sizes                         sum(y1)/N_,# NOT the grand mean                         sum(y1[i_])/n_)) # Group mean for y1 group.means.n #> , , g = A #>  #>                 f #>                           a          b          c          d #>   mean(y)        1.19201329 2.36295189 3.71360403 4.76680994 #>   n_             8.00000000 4.00000000 4.00000000 4.00000000 #>   sum(y)/n_      1.19201329 2.36295189 3.71360403 4.76680994 #>   n_/N_          0.08333333 0.04166667 0.04166667 0.04166667 #>   sum(y1)/N_     4.73334807 4.73334807 4.73334807 4.73334807 #>   sum(y1[i_])/n_ 1.19201329 2.36295189 3.71360403 4.76680994 #>  #> , , g = B #>  #>                 f #>                           a          b          c          d #>   mean(y)        2.80458108 3.22451718 4.39996169 4.83046127 #>   n_             5.00000000 7.00000000 4.00000000 4.00000000 #>   sum(y)/n_      2.80458108 3.22451718 4.39996169 4.83046127 #>   n_/N_          0.05208333 0.07291667 0.04166667 0.04166667 #>   sum(y1)/N_     4.73334807 4.73334807 4.73334807 4.73334807 #>   sum(y1[i_])/n_ 2.80458108 3.22451718 4.39996169 4.83046127 #>  #> , , g = C #>  #>                 f #>                   a        b        c          d #>   mean(y)        NA 4.773872 4.779567 6.08416821 #>   n_             NA 6.000000 6.000000 4.00000000 #>   sum(y)/n_      NA 4.773872 4.779567 6.08416821 #>   n_/N_          NA 0.062500 0.062500 0.04166667 #>   sum(y1)/N_     NA 4.733348 4.733348 4.73334807 #>   sum(y1[i_])/n_ NA 4.773872 4.779567 6.08416821 #>  #> , , g = D #>  #>                 f #>                           a          b          c          d #>   mean(y)        4.24886851 4.89766964 5.86547026 7.57529607 #>   n_             4.00000000 4.00000000 7.00000000 5.00000000 #>   sum(y)/n_      4.24886851 4.89766964 5.86547026 7.57529607 #>   n_/N_          0.04166667 0.04166667 0.07291667 0.05208333 #>   sum(y1)/N_     4.73334807 4.73334807 4.73334807 4.73334807 #>   sum(y1[i_])/n_ 4.24886851 4.89766964 5.86547026 7.57529607 #>  #> , , g = E #>  #>                 f #>                           a          b          c          d #>   mean(y)        4.29357690 4.99307415 7.32292142 8.04488841 #>   n_             4.00000000 4.00000000 4.00000000 8.00000000 #>   sum(y)/n_      4.29357690 4.99307415 7.32292142 8.04488841 #>   n_/N_          0.04166667 0.04166667 0.04166667 0.08333333 #>   sum(y1)/N_     4.73334807 4.73334807 4.73334807 4.73334807 #>   sum(y1[i_])/n_ 4.29357690 4.99307415 7.32292142 8.04488841 #>   # Names can be attached to the groupwise results with(some.grouped.data,      c(Centered=round(mean(y.cent),15),        Uncentered=mean(y))) #> , , g = A #>  #>             f #>                     a        b        c       d #>   Centered   0.000000 0.000000 0.000000 0.00000 #>   Uncentered 1.192013 2.362952 3.713604 4.76681 #>  #> , , g = B #>  #>             f #>                     a        b        c        d #>   Centered   0.000000 0.000000 0.000000 0.000000 #>   Uncentered 2.804581 3.224517 4.399962 4.830461 #>  #> , , g = C #>  #>             f #>               a        b        c        d #>   Centered   NA 0.000000 0.000000 0.000000 #>   Uncentered NA 4.773872 4.779567 6.084168 #>  #> , , g = D #>  #>             f #>                     a       b       c        d #>   Centered   0.000000 0.00000 0.00000 0.000000 #>   Uncentered 4.248869 4.89767 5.86547 7.575296 #>  #> , , g = E #>  #>             f #>                     a        b        c        d #>   Centered   0.000000 0.000000 0.000000 0.000000 #>   Uncentered 4.293577 4.993074 7.322921 8.044888 #>   some.data.ungrouped <- recombine(some.grouped.data) str(some.data.ungrouped) #> 'data.frame':\t96 obs. of  5 variables: #>  $ x     : num  2.655 -1.29 -0.314 -1.363 1.752 ... #>  $ y     : num  4.405 0.46 1.436 0.387 4.252 ... #>  $ g     : Factor w/ 5 levels \"A\",\"B\",\"C\",\"D\",..: 1 1 1 1 2 2 2 2 4 4 ... #>  $ f     : Factor w/ 4 levels \"a\",\"b\",\"c\",\"d\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ y.cent: num  3.213 -0.732 0.244 -0.805 1.448 ...  # It all works with \"data.set\" objects some.dataset <- as.data.set(some.data) some.grouped.dataset <- Groups(some.dataset,~f+g)  with(some.grouped.dataset,      c(Mean=mean(y),        Variance=var(y))) #> , , g = A #>  #>           f #>                   a        b         c         d #>   Mean     1.192013 2.362952 3.7136040 4.7668099 #>   Variance 1.973335 1.439871 0.5662356 0.2889099 #>  #> , , g = B #>  #>           f #>                   a         b         c         d #>   Mean     2.804581 3.2245172 4.3999617 4.8304613 #>   Variance 1.204138 0.7112348 0.6697395 0.3536233 #>  #> , , g = C #>  #>           f #>             a          b        c        d #>   Mean     NA 4.77387217 4.779567 6.084168 #>   Variance NA 0.08448601 1.294520 1.630878 #>  #> , , g = D #>  #>           f #>                   a        b       c        d #>   Mean     4.248869 4.897670 5.86547 7.575296 #>   Variance 1.315415 1.992881 0.66932 1.087450 #>  #> , , g = E #>  #>           f #>                   a        b        c         d #>   Mean     4.293577 4.993074 7.322921 8.0448884 #>   Variance 1.203480 0.133074 2.188409 0.7538612 #>   # The following two expressions are equivalent: with(Groups(some.data,~f+g),mean(y)) #>    g #> f          A        B        C        D        E #>   a 1.192013 2.804581       NA 4.248869 4.293577 #>   b 2.362952 3.224517 4.773872 4.897670 4.993074 #>   c 3.713604 4.399962 4.779567 5.865470 7.322921 #>   d 4.766810 4.830461 6.084168 7.575296 8.044888 withGroups(some.data,~f+g,mean(y)) #>    g #> f          A        B        C        D        E #>   a 1.192013 2.804581       NA 4.248869 4.293577 #>   b 2.362952 3.224517 4.773872 4.897670 4.993074 #>   c 3.713604 4.399962 4.779567 5.865470 7.322921 #>   d 4.766810 4.830461 6.084168 7.575296 8.044888  # The following two expressions are equivalent: some.data <- within(Groups(some.data,~f+g),{     y.cent <- y - mean(y)     y.cent.1 <- y - sum(y)/n_ })  some.data <- withinGroups(some.data,~f+g,{     y.cent <- y - mean(y)     y.cent.1 <- y - sum(y)/n_ })  # Both variants of groupwise centred varaibles should # have zero groupwise means: withGroups(some.data,~f+g,{     c(round(mean(y.cent),15),       round(mean(y.cent.1),15)) }) #> , , g = A #>  #>    f #>     a b c d #>   1 0 0 0 0 #>   2 0 0 0 0 #>  #> , , g = B #>  #>    f #>     a b c d #>   1 0 0 0 0 #>   2 0 0 0 0 #>  #> , , g = C #>  #>    f #>      a b      c d #>   1 NA 0  0e+00 0 #>   2 NA 0 -1e-15 0 #>  #> , , g = D #>  #>    f #>     a b c d #>   1 0 0 0 0 #>   2 0 0 0 0 #>  #> , , g = E #>  #>    f #>     a b c d #>   1 0 0 0 0 #>   2 0 0 0 0 #>"},{"path":"https://melff.github.io/mclogit/reference/Iconv.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Annotations, and Value Labels between Encodings — Iconv","title":"Convert Annotations, and Value Labels between Encodings — Iconv","text":"function uses base package function iconv   translate variable descriptions (.k.variable labels)   value labels item, data.set,   importer objects specified encoding. useful UTF-8 systems data file come ancient   encoding like 'Latin-1' long used Windows systems.","code":""},{"path":"https://melff.github.io/mclogit/reference/Iconv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Annotations, and Value Labels between Encodings — Iconv","text":"","code":"Iconv(x,from=\"\",to=\"\",...)  # S3 method for annotation Iconv(x,from=\"\",to=\"\",...)  # S3 method for data.set Iconv(x,from=\"\",to=\"\",...)  # S3 method for importer Iconv(x,from=\"\",to=\"\",...)  # S3 method for item Iconv(x,from=\"\",to=\"\",...)  # S3 method for value.labels Iconv(x,from=\"\",to=\"\",...)"},{"path":"https://melff.github.io/mclogit/reference/Iconv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Annotations, and Value Labels between Encodings — Iconv","text":"x object attributes re-encoded. character string desribing original encoding character string desribing target encoding ... arguments, passed iconv","code":""},{"path":"https://melff.github.io/mclogit/reference/Iconv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Annotations, and Value Labels between Encodings — Iconv","text":"Iconv returns copy first argument re-encoded    attributes.","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/Iconv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Annotations, and Value Labels between Encodings — Iconv","text":"","code":"if (FALSE) { # Locate an SPSS 'system' file and get info on variables, their labels etc. ZA5302 <- spss.system.file(\"Daten/ZA5302_v6-0-0.sav\",to.lower=FALSE)  # Convert labels etc. from 'latin1' to the encoding of the current locale. ZA5302 <- Iconv(ZA5302,from=\"latin1\")  # Write out the codebook writeLines(as.character(codebook(ZA5302)),            con=\"ZA5302-cdbk.txt\")  # Write out the description of the varialbes (their 'variable labels') writeLines(as.character(description(ZA5302)),             con=\"ZA5302-description.txt\") }"},{"path":"https://melff.github.io/mclogit/reference/List.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list and conveniently supply names to its elements — List","title":"Create a list and conveniently supply names to its elements — List","text":"List creates list names elements   arguments given, manner analogously data.frame","code":""},{"path":"https://melff.github.io/mclogit/reference/List.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list and conveniently supply names to its elements — List","text":"","code":"List(...)"},{"path":"https://melff.github.io/mclogit/reference/List.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list and conveniently supply names to its elements — List","text":"... tagged untagged arguments list     formed. untagged arguments variables englosing   environment, names become names list elements.","code":""},{"path":"https://melff.github.io/mclogit/reference/List.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list and conveniently supply names to its elements — List","text":"","code":"num <- 1:3   strng <- c(\"a\",\"b\",\"A\",\"B\")   logi <- rep(FALSE,7)   List(num,strng,logi) #> $num #> [1] 1 2 3 #>  #> $strng #> [1] \"a\" \"b\" \"A\" \"B\" #>  #> $logi #> [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE #>"},{"path":"https://melff.github.io/mclogit/reference/Means.html","id":null,"dir":"Reference","previous_headings":"","what":"Means for groups of observations — Means","title":"Means for groups of observations — Means","text":"function Means() creates table group   means, optionally standard errors, confidence intervals,   numbers valid observations.","code":""},{"path":"https://melff.github.io/mclogit/reference/Means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Means for groups of observations — Means","text":"","code":"Means(data, ...) # S3 method for data.frame Means(data,     by, weights=NULL, subset=NULL,     default=NA,     se=FALSE, ci=FALSE, ci.level=.95,     counts=FALSE, ...) # S3 method for formula Means(data, subset, weights, ...) # S3 method for numeric Means(data, ...) # S3 method for means.table as.data.frame(x, row.names=NULL, optional=TRUE, drop=TRUE, ...) # S3 method for xmeans.table as.data.frame(x, row.names=NULL, optional=TRUE, drop=TRUE, ...)"},{"path":"https://melff.github.io/mclogit/reference/Means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Means for groups of observations — Means","text":"data object usually containing data, formula. data numeric vector object can coerced     data frame, changed data frame data     frame method Means() applied . data formula, data frame constructed     variables formula Means applied     data frame, formula passed = argument. formula, vector variable names data frame     list factors. vector variable names,     extracted data define groups     means computed, variables means     computed named . data frame list factors,     used defined groups means computed,     variables means     computed . formula, left-hand side determines     variables means computed, right-hand side     determines factors define groups. weights optional vector weights, usually variable data. subset optional logical vector select observations,     usually result expression variables data. default default value used empty cells without     observations. se logical value, indicates whether standard errors     computed. ci logical value, indicates whether limits confidence     intervals computed. ci.level number, confidence level confidence interval counts logical value, indicates whether numbers valid     observations reported. x .data.frame(), result Means(). row.names optional character vector. argmument presently     inconsequential included reasons compatiblity     standard methods .data.frame. optional optional logical value. argmument presently     inconsequential included reasons compatiblity     standard methods .data.frame. drop logical value, determines whether \"empty cells\"     dropped resulting data frame. ... arguments, either ignored passed     methods applicable.","code":""},{"path":"https://melff.github.io/mclogit/reference/Means.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Means for groups of observations — Means","text":"array inherits classes \"means.table\" \"table\".  Means called se=TRUE ci=TRUE result additionally inherits class \"xmeans.table\".","code":""},{"path":"https://melff.github.io/mclogit/reference/Means.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Means for groups of observations — Means","text":"","code":"# Preparing example data USstates <- as.data.frame(state.x77) USstates <- within(USstates,{     region <- state.region     name <- state.name     abb <- state.abb     division <- state.division }) USstates$w <- sample(runif(n=6),size=nrow(USstates),replace=TRUE)  # Using the data frame method Means(USstates[c(\"Murder\",\"division\",\"region\")],by=c(\"division\",\"region\")) #> , ,  = Murder #>  #>                     region #> division             Northeast     South North Central      West #>   New England         3.383333                                   #>   Middle Atlantic     7.400000                                   #>   South Atlantic                9.775000                         #>   East South Central           12.300000                         #>   West South Central           10.475000                         #>   East North Central                          7.780000           #>   West North Central                          3.485714           #>   Mountain                                              7.187500 #>   Pacific                                               7.260000 #>  Means(USstates[c(\"Murder\",\"division\",\"region\")],by=USstates[c(\"division\",\"region\")]) #> , ,  = Murder #>  #>                     region #> division             Northeast     South North Central      West #>   New England         3.383333                                   #>   Middle Atlantic     7.400000                                   #>   South Atlantic                9.775000                         #>   East South Central           12.300000                         #>   West South Central           10.475000                         #>   East North Central                          7.780000           #>   West North Central                          3.485714           #>   Mountain                                              7.187500 #>   Pacific                                               7.260000 #>  Means(USstates[c(\"Murder\")],1) #>         Mean #> Murder 7.378 Means(USstates[c(\"Murder\",\"region\")],by=c(\"region\")) #>                 #> region             Murder #>   Northeast      4.722222 #>   South         10.581250 #>   North Central  5.275000 #>   West           7.215385  # Using the formula method # One 'dependent' variable Means(Murder~1, data=USstates) #>         Mean #> Murder 7.378 Means(Murder~division, data=USstates) #>                      #> division                Murder #>   New England         3.383333 #>   Middle Atlantic     7.400000 #>   South Atlantic      9.775000 #>   East South Central 12.300000 #>   West South Central 10.475000 #>   East North Central  7.780000 #>   West North Central  3.485714 #>   Mountain            7.187500 #>   Pacific             7.260000 Means(Murder~division, data=USstates,weights=w) #>                      #> division                Murder #>   New England         3.421944 #>   Middle Atlantic     6.909817 #>   South Atlantic      9.113358 #>   East South Central 12.844899 #>   West South Central 11.046977 #>   East North Central  7.733524 #>   West North Central  3.944567 #>   Mountain            7.051404 #>   Pacific             6.824822 Means(Murder~division+region, data=USstates) #> , ,  = Murder #>  #>                     region #> division             Northeast     South North Central      West #>   New England         3.383333                                   #>   Middle Atlantic     7.400000                                   #>   South Atlantic                9.775000                         #>   East South Central           12.300000                         #>   West South Central           10.475000                         #>   East North Central                          7.780000           #>   West North Central                          3.485714           #>   Mountain                                              7.187500 #>   Pacific                                               7.260000 #>  as.data.frame(Means(Murder~division+region, data=USstates)) #>              division        region    Murder #> 1         New England     Northeast  3.383333 #> 2     Middle Atlantic     Northeast  7.400000 #> 12     South Atlantic         South  9.775000 #> 13 East South Central         South 12.300000 #> 14 West South Central         South 10.475000 #> 24 East North Central North Central  7.780000 #> 25 West North Central North Central  3.485714 #> 35           Mountain          West  7.187500 #> 36            Pacific          West  7.260000  # Standard errors and counts Means(Murder~division, data=USstates, se=TRUE, counts=TRUE) #> , , Statistic = Mean #>  #>                     Variable #> division                 Murder #>   New England         3.3833333 #>   Middle Atlantic     7.4000000 #>   South Atlantic      9.7750000 #>   East South Central 12.3000000 #>   West South Central 10.4750000 #>   East North Central  7.7800000 #>   West North Central  3.4857143 #>   Mountain            7.1875000 #>   Pacific             7.2600000 #>  #> , , Statistic = SE #>  #>                     Variable #> division                 Murder #>   New England         0.4475241 #>   Middle Atlantic     1.7691806 #>   South Atlantic      0.9151015 #>   East South Central  1.0189864 #>   West South Central  1.5040916 #>   East North Central  1.4287757 #>   West North Central  1.0411597 #>   Mountain            0.8565791 #>   Pacific             1.4968634 #>  #> , , Statistic = N #>  #>                     Variable #> division                 Murder #>   New England         6.0000000 #>   Middle Atlantic     3.0000000 #>   South Atlantic      8.0000000 #>   East South Central  4.0000000 #>   West South Central  4.0000000 #>   East North Central  5.0000000 #>   West North Central  7.0000000 #>   Mountain            8.0000000 #>   Pacific             5.0000000 #>  drop(Means(Murder~division, data=USstates, se=TRUE, counts=TRUE)) #>                     Statistic #> division                   Mean         SE          N #>   New England         3.3833333  0.4475241  6.0000000 #>   Middle Atlantic     7.4000000  1.7691806  3.0000000 #>   South Atlantic      9.7750000  0.9151015  8.0000000 #>   East South Central 12.3000000  1.0189864  4.0000000 #>   West South Central 10.4750000  1.5040916  4.0000000 #>   East North Central  7.7800000  1.4287757  5.0000000 #>   West North Central  3.4857143  1.0411597  7.0000000 #>   Mountain            7.1875000  0.8565791  8.0000000 #>   Pacific             7.2600000  1.4968634  5.0000000 as.data.frame(Means(Murder~division, data=USstates, se=TRUE, counts=TRUE)) #>             division Variable      Mean        SE N #> 1        New England   Murder  3.383333 0.4475241 6 #> 2    Middle Atlantic   Murder  7.400000 1.7691806 3 #> 3     South Atlantic   Murder  9.775000 0.9151015 8 #> 4 East South Central   Murder 12.300000 1.0189864 4 #> 5 West South Central   Murder 10.475000 1.5040916 4 #> 6 East North Central   Murder  7.780000 1.4287757 5 #> 7 West North Central   Murder  3.485714 1.0411597 7 #> 8           Mountain   Murder  7.187500 0.8565791 8 #> 9            Pacific   Murder  7.260000 1.4968634 5  # Confidence intervals Means(Murder~division, data=USstates, ci=TRUE) #> , , Statistic = Mean #>  #>                     Variable #> division                 Murder #>   New England         3.3833333 #>   Middle Atlantic     7.4000000 #>   South Atlantic      9.7750000 #>   East South Central 12.3000000 #>   West South Central 10.4750000 #>   East North Central  7.7800000 #>   West North Central  3.4857143 #>   Mountain            7.1875000 #>   Pacific             7.2600000 #>  #> , , Statistic = Lower #>  #>                     Variable #> division                 Murder #>   New England         2.2329361 #>   Middle Atlantic    -0.2121697 #>   South Atlantic      7.6111289 #>   East South Central  9.0571304 #>   West South Central  5.6883091 #>   East North Central  3.8130827 #>   West North Central  0.9380882 #>   Mountain            5.1620124 #>   Pacific             3.1040410 #>  #> , , Statistic = Upper #>  #>                     Variable #> division                 Murder #>   New England         2.2329361 #>   Middle Atlantic    -0.2121697 #>   South Atlantic      7.6111289 #>   East South Central  9.0571304 #>   West South Central  5.6883091 #>   East North Central  3.8130827 #>   West North Central  0.9380882 #>   Mountain            5.1620124 #>   Pacific             3.1040410 #>  drop(Means(Murder~division, data=USstates, ci=TRUE)) #>                     Statistic #> division                   Mean      Lower      Upper #>   New England         3.3833333  2.2329361  2.2329361 #>   Middle Atlantic     7.4000000 -0.2121697 -0.2121697 #>   South Atlantic      9.7750000  7.6111289  7.6111289 #>   East South Central 12.3000000  9.0571304  9.0571304 #>   West South Central 10.4750000  5.6883091  5.6883091 #>   East North Central  7.7800000  3.8130827  3.8130827 #>   West North Central  3.4857143  0.9380882  0.9380882 #>   Mountain            7.1875000  5.1620124  5.1620124 #>   Pacific             7.2600000  3.1040410  3.1040410 as.data.frame(Means(Murder~division, data=USstates, ci=TRUE)) #>             division Variable      Mean      Lower      Upper #> 1        New England   Murder  3.383333  2.2329361  2.2329361 #> 2    Middle Atlantic   Murder  7.400000 -0.2121697 -0.2121697 #> 3     South Atlantic   Murder  9.775000  7.6111289  7.6111289 #> 4 East South Central   Murder 12.300000  9.0571304  9.0571304 #> 5 West South Central   Murder 10.475000  5.6883091  5.6883091 #> 6 East North Central   Murder  7.780000  3.8130827  3.8130827 #> 7 West North Central   Murder  3.485714  0.9380882  0.9380882 #> 8           Mountain   Murder  7.187500  5.1620124  5.1620124 #> 9            Pacific   Murder  7.260000  3.1040410  3.1040410  # More than one dependent variable Means(Murder+Illiteracy~division, data=USstates) #>                      #> division                 Murder Illiteracy #>   New England         3.3833333  0.9166667 #>   Middle Atlantic     7.4000000  1.1666667 #>   South Atlantic      9.7750000  1.5000000 #>   East South Central 12.3000000  1.9500000 #>   West South Central 10.4750000  2.0000000 #>   East North Central  7.7800000  0.8000000 #>   West North Central  3.4857143  0.6285714 #>   Mountain            7.1875000  0.9500000 #>   Pacific             7.2600000  1.1400000 as.data.frame(Means(Murder+Illiteracy~division, data=USstates)) #>             division    Murder Illiteracy #> 1        New England  3.383333  0.9166667 #> 2    Middle Atlantic  7.400000  1.1666667 #> 3     South Atlantic  9.775000  1.5000000 #> 4 East South Central 12.300000  1.9500000 #> 5 West South Central 10.475000  2.0000000 #> 6 East North Central  7.780000  0.8000000 #> 7 West North Central  3.485714  0.6285714 #> 8           Mountain  7.187500  0.9500000 #> 9            Pacific  7.260000  1.1400000  # Confidence intervals Means(Murder+Illiteracy~division, data=USstates, ci=TRUE) #> , , Statistic = Mean #>  #>                     Variable #> division                 Murder Illiteracy #>   New England         3.3833333  0.9166667 #>   Middle Atlantic     7.4000000  1.1666667 #>   South Atlantic      9.7750000  1.5000000 #>   East South Central 12.3000000  1.9500000 #>   West South Central 10.4750000  2.0000000 #>   East North Central  7.7800000  0.8000000 #>   West North Central  3.4857143  0.6285714 #>   Mountain            7.1875000  0.9500000 #>   Pacific             7.2600000  1.1400000 #>  #> , , Statistic = Lower #>  #>                     Variable #> division                 Murder Illiteracy #>   New England         2.2329361  0.6167655 #>   Middle Atlantic    -0.2121697  0.6495522 #>   South Atlantic      7.6111289  1.0807969 #>   East South Central  9.0571304  1.3617494 #>   West South Central  5.6883091  0.8748353 #>   East North Central  3.8130827  0.6758336 #>   West North Central  0.9380882  0.5126359 #>   Mountain            5.1620124  0.3990592 #>   Pacific             3.1040410  0.4343240 #>  #> , , Statistic = Upper #>  #>                     Variable #> division                 Murder Illiteracy #>   New England         2.2329361  0.6167655 #>   Middle Atlantic    -0.2121697  0.6495522 #>   South Atlantic      7.6111289  1.0807969 #>   East South Central  9.0571304  1.3617494 #>   West South Central  5.6883091  0.8748353 #>   East North Central  3.8130827  0.6758336 #>   West North Central  0.9380882  0.5126359 #>   Mountain            5.1620124  0.3990592 #>   Pacific             3.1040410  0.4343240 #>  as.data.frame(Means(Murder+Illiteracy~division, data=USstates, ci=TRUE)) #>              division   Variable       Mean      Lower      Upper #> 1         New England     Murder  3.3833333  2.2329361  2.2329361 #> 2     Middle Atlantic     Murder  7.4000000 -0.2121697 -0.2121697 #> 3      South Atlantic     Murder  9.7750000  7.6111289  7.6111289 #> 4  East South Central     Murder 12.3000000  9.0571304  9.0571304 #> 5  West South Central     Murder 10.4750000  5.6883091  5.6883091 #> 6  East North Central     Murder  7.7800000  3.8130827  3.8130827 #> 7  West North Central     Murder  3.4857143  0.9380882  0.9380882 #> 8            Mountain     Murder  7.1875000  5.1620124  5.1620124 #> 9             Pacific     Murder  7.2600000  3.1040410  3.1040410 #> 10        New England Illiteracy  0.9166667  0.6167655  0.6167655 #> 11    Middle Atlantic Illiteracy  1.1666667  0.6495522  0.6495522 #> 12     South Atlantic Illiteracy  1.5000000  1.0807969  1.0807969 #> 13 East South Central Illiteracy  1.9500000  1.3617494  1.3617494 #> 14 West South Central Illiteracy  2.0000000  0.8748353  0.8748353 #> 15 East North Central Illiteracy  0.8000000  0.6758336  0.6758336 #> 16 West North Central Illiteracy  0.6285714  0.5126359  0.5126359 #> 17           Mountain Illiteracy  0.9500000  0.3990592  0.3990592 #> 18            Pacific Illiteracy  1.1400000  0.4343240  0.4343240  # Some 'non-standard' but still valid usages: with(USstates,      Means(Murder~division+region,subset=region!=\"Northeast\")) #> , ,  = Murder #>  #>                     region #> division                 South North Central      West #>   South Atlantic      9.775000                         #>   East South Central 12.300000                         #>   West South Central 10.475000                         #>   East North Central                7.780000           #>   West North Central                3.485714           #>   Mountain                                    7.187500 #>   Pacific                                     7.260000 #>   with(USstates,      Means(Murder,by=list(division,region))) #> , , Murder #>  #>                    Northeast     South North Central      West #> New England         3.383333                                   #> Middle Atlantic     7.400000                                   #> South Atlantic                9.775000                         #> East South Central           12.300000                         #> West South Central           10.475000                         #> East North Central                          7.780000           #> West North Central                          3.485714           #> Mountain                                              7.187500 #> Pacific                                               7.260000 #>"},{"path":"https://melff.github.io/mclogit/reference/Reshape.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape data frames or data sets — Reshape","title":"Reshape data frames or data sets — Reshape","text":"Reshape convenience   wrapper around reshape somewhat simpler   syntax.","code":""},{"path":"https://melff.github.io/mclogit/reference/Reshape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape data frames or data sets — Reshape","text":"","code":"Reshape(data,...,id,within_id,drop,keep,direction)"},{"path":"https://melff.github.io/mclogit/reference/Reshape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape data frames or data sets — Reshape","text":"data data frame data set reshaped. ... arguments specify variables     long wide format well time variable.     name tags arguments given specify      variable names long format,     arguments specify variables wide format     (observations long vormat)     variable \"time\" variable.     time variable usually last arguments.     \"automatic\" time variable can specified     single argument ... given. id variable name concatenation variable names       (either character strings unquoted symbols), identify       individual units. Defaults \"id\" id variable       specified \"reshapeLong\" attribute data       argument. Needed data reshaped long wide       format. within_id optional variable name        (either character string unquoted symbol), identifies       individual observations units.       Relevant data reshaped long wide       format. drop variable name concatenation variable names       (either character strings unquoted symbols), thast specifies       variables dropped reshaping. keep variable name concatenation variable names       (either character strings unquoted symbols), thast specifies       variables kept reshaping (including ones       used define reshaping). direction character string, either equal \"long\"     \"wide\".","code":""},{"path":"https://melff.github.io/mclogit/reference/Reshape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape data frames or data sets — Reshape","text":"","code":"example.data.wide <- data.frame(     v  = c(35,42),     x1 = c(1.1,2.1),     x2 = c(1.2,2.2),     x3 = c(1.3,2.3),     x4 = c(1.4,2.4),     y1 = c(2.5,3.5),     y2 = c(2.7,3.7),     y3 = c(2.9,3.9)) example.data.wide #>    v  x1  x2  x3  x4  y1  y2  y3 #> 1 35 1.1 1.2 1.3 1.4 2.5 2.7 2.9 #> 2 42 2.1 2.2 2.3 2.4 3.5 3.7 3.9  # The following two calls are equivalent: example.data.long <- Reshape(data=example.data.wide,                              x=c(x1,x2,x3,x4),                              # N.B. it is possible to                              # specify 'empty' i.e. missing                              # measurements                              y=c(y1,y2,y3,),                              t=1:4,                              direction=\"long\")  example.data.long <- Reshape(data=example.data.wide,                              list(                                  x=c(x1,x2,x3,x4),                                  # N.B. it is possible to                                  # specify 'empty' i.e. missing                                  # measurements                                  y=c(y1,y2,y3,)                              ),                              t=1:4,                              direction=\"long\")  example.data.long #>      v t   x   y id #> 1.1 35 1 1.1 2.5  1 #> 1.2 35 2 1.2 2.7  1 #> 1.3 35 3 1.3 2.9  1 #> 1.4 35 4 1.4  NA  1 #> 2.1 42 1 2.1 3.5  2 #> 2.2 42 2 2.2 3.7  2 #> 2.3 42 3 2.3 3.9  2 #> 2.4 42 4 2.4  NA  2  # Since the data frame contains an \"reshapeLong\" attribute # an id variable is already specified and part of the data # frame. example.data.wide <- Reshape(data=example.data.long,                              x=c(x1,x2,x3,x4),                              y=c(y1,y2,y3,),                              t=1:4,                              direction=\"wide\") example.data.wide #>      v id  x1  x2  x3  x4  y1  y2  y3 #> 1.1 35  1 1.1 1.2 1.3 1.4 2.5 2.7 2.9 #> 2.1 42  2 2.1 2.2 2.3 2.4 3.5 3.7 3.9  # Here we examine the case where no \"reshapeLong\" attribute # is present: example.data.wide <- Reshape(data=example.data.long,                              x=c(x1,x2,x3,x4),                              y=c(y1,y2,y3,),                              t=1:4,                              id=v,                              direction=\"wide\") example.data.wide #>      v id  x1  x2  x3  x4  y1  y2  y3 #> 1.1 35  1 1.1 1.2 1.3 1.4 2.5 2.7 2.9 #> 2.1 42  2 2.1 2.2 2.3 2.4 3.5 3.7 3.9   # Here, an \"automatic\" time variable is created. This works # only if there is a single argument other than the data= # and direction= arguments example.data.long <- Reshape(data=example.data.wide,                              list(                                  x=c(x1,x2,x3,x4),                                  y=c(y1,y2,y3,)                              ),                              direction=\"long\")  example.data.long #>      v id times   x   y #> 1.1 35  1     1 1.1 2.5 #> 1.2 35  1     2 1.2 2.7 #> 1.3 35  1     3 1.3 2.9 #> 1.4 35  1     4 1.4  NA #> 2.1 42  2     1 2.1 3.5 #> 2.2 42  2     2 2.2 3.7 #> 2.3 42  2     3 2.3 3.9 #> 2.4 42  2     4 2.4  NA  example.data.wide <- Reshape(data=example.data.long,                              list(                                  x=c(x1,x2,x3,x4),                                  y=c(y1,y2,y3,)                              ),                              direction=\"wide\") example.data.wide #>      v id  x1  x2  x3  x4  y1  y2  y3 #> 1.1 35  1 1.1 1.2 1.3 1.4 2.5 2.7 2.9 #> 2.1 42  2 2.1 2.2 2.3 2.4 3.5 3.7 3.9"},{"path":"https://melff.github.io/mclogit/reference/Sapply.html","id":null,"dir":"Reference","previous_headings":"","what":"A Dimension Preserving Variant of ","title":"A Dimension Preserving Variant of ","text":"Sapply equivalent sapply, except   preserves dimension dimension names   argument X. also preserves dimension   results function FUN.   intended application results e.g.   call . Lapply analog   lapply insofar try simplify   resulting list results FUN.","code":""},{"path":"https://melff.github.io/mclogit/reference/Sapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Dimension Preserving Variant of ","text":"","code":"Sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE) Lapply(X, FUN, ...)"},{"path":"https://melff.github.io/mclogit/reference/Sapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Dimension Preserving Variant of ","text":"X vector list appropriate call sapply. FUN function. ... optional arguments FUN. simplify logical value; result simplified vector matrix possible? USE.NAMES logical; TRUE X character, use X names result unless names already.","code":""},{"path":"https://melff.github.io/mclogit/reference/Sapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Dimension Preserving Variant of ","text":"FUN returns scalar, result dimension   X, otherwise dimension result enhanced relative   X.","code":""},{"path":"https://melff.github.io/mclogit/reference/Sapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Dimension Preserving Variant of ","text":"","code":"berkeley <- Aggregate(Table(Admit,Freq)~.,data=UCBAdmissions) berktest1 <- By(~Dept+Gender,                 glm(cbind(Admitted,Rejected)~1,family=\"binomial\"),                 data=berkeley) berktest2 <- By(~Dept,                 glm(cbind(Admitted,Rejected)~Gender,family=\"binomial\"),                 data=berkeley)  sapply(berktest1,coef) #> (Intercept) (Intercept) (Intercept) (Intercept) (Intercept) (Intercept)  #>   0.4921214   0.5337493  -0.5355182  -0.7039581  -0.9569618  -2.7697438  #> (Intercept) (Intercept) (Intercept) (Intercept) (Intercept) (Intercept)  #>   1.5441974   0.7537718  -0.6604399  -0.6219709  -1.1571488  -2.5808479  Sapply(berktest1,coef) #>     Gender #> Dept       Male     Female #>    A  0.4921214  1.5441974 #>    B  0.5337493  0.7537718 #>    C -0.5355182 -0.6604399 #>    D -0.7039581 -0.6219709 #>    E -0.9569618 -1.1571488 #>    F -2.7697438 -2.5808479  sapply(berktest1,function(x)drop(coef(summary(x)))) #>                    [,1]         [,2]          [,3]          [,4]          [,5] #> Estimate   4.921214e-01 5.337493e-01 -5.355182e-01 -7.039581e-01 -9.569618e-01 #> Std. Error 7.174966e-02 8.754301e-02  1.149408e-01  1.040702e-01  1.615992e-01 #> z value    6.858868e+00 6.096995e+00 -4.659080e+00 -6.764263e+00 -5.921822e+00 #> Pr(>|z|)   6.940823e-12 1.080812e-09  3.176259e-06  1.339898e-11  3.183932e-09 #>                     [,6]         [,7]       [,8]          [,9]         [,10] #> Estimate   -2.769744e+00 1.544197e+00 0.75377180 -6.604399e-01 -6.219709e-01 #> Std. Error  2.197807e-01 2.527203e-01 0.42874646  8.664894e-02  1.083141e-01 #> z value    -1.260231e+01 6.110303e+00 1.75808285 -7.622019e+00 -5.742289e+00 #> Pr(>|z|)    2.050557e-36 9.944221e-10 0.07873341  2.497388e-14  9.340538e-09 #>                    [,11]         [,12] #> Estimate   -1.157149e+00 -2.580848e+00 #> Std. Error  1.182487e-01  2.117103e-01 #> z value    -9.785721e+00 -1.219047e+01 #> Pr(>|z|)    1.296674e-22  3.493965e-34 Sapply(berktest1,function(x)drop(coef(summary(x)))) #> , , Gender = Male #>  #>             Dept #>                         A            B             C             D #>   Estimate   4.921214e-01 5.337493e-01 -5.355182e-01 -7.039581e-01 #>   Std. Error 7.174966e-02 8.754301e-02  1.149408e-01  1.040702e-01 #>   z value    6.858868e+00 6.096995e+00 -4.659080e+00 -6.764263e+00 #>   Pr(>|z|)   6.940823e-12 1.080812e-09  3.176259e-06  1.339898e-11 #>             Dept #>                          E             F #>   Estimate   -9.569618e-01 -2.769744e+00 #>   Std. Error  1.615992e-01  2.197807e-01 #>   z value    -5.921822e+00 -1.260231e+01 #>   Pr(>|z|)    3.183932e-09  2.050557e-36 #>  #> , , Gender = Female #>  #>             Dept #>                         A          B             C             D             E #>   Estimate   1.544197e+00 0.75377180 -6.604399e-01 -6.219709e-01 -1.157149e+00 #>   Std. Error 2.527203e-01 0.42874646  8.664894e-02  1.083141e-01  1.182487e-01 #>   z value    6.110303e+00 1.75808285 -7.622019e+00 -5.742289e+00 -9.785721e+00 #>   Pr(>|z|)   9.944221e-10 0.07873341  2.497388e-14  9.340538e-09  1.296674e-22 #>             Dept #>                          F #>   Estimate   -2.580848e+00 #>   Std. Error  2.117103e-01 #>   z value    -1.219047e+01 #>   Pr(>|z|)    3.493965e-34 #>   sapply(berktest2,coef) #>                      A         B          C           D          E          F #> (Intercept)  0.4921214 0.5337493 -0.5355182 -0.70395810 -0.9569618 -2.7697438 #> GenderFemale 1.0520760 0.2200225 -0.1249216  0.08198719 -0.2001870  0.1888958 Sapply(berktest2,coef) #>               Dept #>                        A         B          C           D          E          F #>   (Intercept)  0.4921214 0.5337493 -0.5355182 -0.70395810 -0.9569618 -2.7697438 #>   GenderFemale 1.0520760 0.2200225 -0.1249216  0.08198719 -0.2001870  0.1888958 sapply(berktest2,function(x)coef(summary(x))) #>                 A            B             C             D             E #> [1,] 4.921214e-01 5.337493e-01 -5.355182e-01 -7.039581e-01 -9.569618e-01 #> [2,] 1.052076e+00 2.200225e-01 -1.249216e-01  8.198719e-02 -2.001870e-01 #> [3,] 7.174966e-02 8.754301e-02  1.149408e-01  1.040702e-01  1.615992e-01 #> [4,] 2.627081e-01 4.375926e-01  1.439424e-01  1.502084e-01  2.002426e-01 #> [5,] 6.858868e+00 6.096994e+00 -4.659080e+00 -6.764263e+00 -5.921822e+00 #> [6,] 4.004734e+00 5.028022e-01 -8.678583e-01  5.458231e-01 -9.997227e-01 #> [7,] 6.940825e-12 1.080813e-09  3.176259e-06  1.339898e-11  3.183932e-09 #> [8,] 6.208742e-05 6.151033e-01  3.854719e-01  5.851875e-01  3.174447e-01 #>                  F #> [1,] -2.769744e+00 #> [2,]  1.888958e-01 #> [3,]  2.197807e-01 #> [4,]  3.051635e-01 #> [5,] -1.260231e+01 #> [6,]  6.189987e-01 #> [7,]  2.050557e-36 #> [8,]  5.359172e-01 Sapply(berktest2,function(x)coef(summary(x))) #> , , Dept = A #>  #>                #>                 Estimate Std. Error  z value     Pr(>|z|) #>   (Intercept)  0.4921214 0.07174966 6.858868 6.940825e-12 #>   GenderFemale 1.0520760 0.26270810 4.004734 6.208742e-05 #>  #> , , Dept = B #>  #>                #>                 Estimate Std. Error   z value     Pr(>|z|) #>   (Intercept)  0.5337493 0.08754301 6.0969945 1.080813e-09 #>   GenderFemale 0.2200225 0.43759263 0.5028022 6.151033e-01 #>  #> , , Dept = C #>  #>                #>                  Estimate Std. Error    z value     Pr(>|z|) #>   (Intercept)  -0.5355182  0.1149408 -4.6590799 3.176259e-06 #>   GenderFemale -0.1249216  0.1439424 -0.8678583 3.854719e-01 #>  #> , , Dept = D #>  #>                #>                   Estimate Std. Error    z value     Pr(>|z|) #>   (Intercept)  -0.70395810  0.1040702 -6.7642627 1.339898e-11 #>   GenderFemale  0.08198719  0.1502084  0.5458231 5.851875e-01 #>  #> , , Dept = E #>  #>                #>                  Estimate Std. Error    z value     Pr(>|z|) #>   (Intercept)  -0.9569618  0.1615992 -5.9218225 3.183932e-09 #>   GenderFemale -0.2001870  0.2002426 -0.9997227 3.174447e-01 #>  #> , , Dept = F #>  #>                #>                  Estimate Std. Error     z value     Pr(>|z|) #>   (Intercept)  -2.7697438  0.2197807 -12.6023077 2.050557e-36 #>   GenderFemale  0.1888958  0.3051635   0.6189987 5.359172e-01 #>"},{"path":"https://melff.github.io/mclogit/reference/Substitute.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitutions in Language Objects — Substitute","title":"Substitutions in Language Objects — Substitute","text":"Substitute differs substitute   far first argument can variable   contains object mode \"language\". case,   substitutions take place inside object.","code":""},{"path":"https://melff.github.io/mclogit/reference/Substitute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitutions in Language Objects — Substitute","text":"","code":"Substitute(lang,with)"},{"path":"https://melff.github.io/mclogit/reference/Substitute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitutions in Language Objects — Substitute","text":"lang object, unevaluated expression,     unevaluated language construct, sequence     calls inside braces named list, environment, data frame data set.","code":""},{"path":"https://melff.github.io/mclogit/reference/Substitute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Substitutions in Language Objects — Substitute","text":"function body just   .call(\"substitute\",list(lang,)).","code":""},{"path":"https://melff.github.io/mclogit/reference/Substitute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitutions in Language Objects — Substitute","text":"object storage mode \"language\" \"symbol\".","code":""},{"path":"https://melff.github.io/mclogit/reference/Substitute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitutions in Language Objects — Substitute","text":"","code":"lang <- quote(sin(x)+z) substitute(lang,list(x=1,z=2)) #> lang Substitute(lang,list(x=1,z=2)) #> sin(1) + 2"},{"path":"https://melff.github.io/mclogit/reference/Table.html","id":null,"dir":"Reference","previous_headings":"","what":"One-Dimensional Table of Frequences and/or Percentages — Table","title":"One-Dimensional Table of Frequences and/or Percentages — Table","text":"Table generic function   produces table counts weighted counts   /corresponding percentages atomic vector,   factor \"item.vector\" object.   function intended use   Aggregate genTable.   \"item.vector\" method workhorse   codebook.","code":""},{"path":"https://melff.github.io/mclogit/reference/Table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-Dimensional Table of Frequences and/or Percentages — Table","text":"","code":"# S4 method for atomic Table(x,weights=NULL,counts=TRUE,percentage=FALSE,...) # S4 method for factor Table(x,weights=NULL,counts=TRUE,percentage=FALSE,...) # S4 method for item.vector Table(x,weights=NULL,counts=TRUE,percentage=(style==\"codebook\"),               style=c(\"table\",\"codebook\",\"nolabels\"),               include.missings=(style==\"codebook\"),               missing.marker=if(style==\"codebook\") \"M\" else \"*\",...)"},{"path":"https://melff.github.io/mclogit/reference/Table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-Dimensional Table of Frequences and/or Percentages — Table","text":"x atomic vector, factor \"item.vector\" object counts logical value, table contain counts? percentage logical value, table contain percentages?   Either counts percentage arguments   TRUE. style character string, style names rownames table. weights numeric vector weights length x. include.missings logical value; missing values included table? missing.marker character string, used mark missing values     table (row)names. ... , currently ignored arguments.","code":""},{"path":"https://melff.github.io/mclogit/reference/Table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-Dimensional Table of Frequences and/or Percentages — Table","text":"atomic vector factor methods return either vector   counts vector percentages matrix counts percentages.   applies \"item.vector\" vector method unless  include.missing=TRUE percentage=TRUE,   case total percentages percentages valid values   given.","code":""},{"path":"https://melff.github.io/mclogit/reference/Table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One-Dimensional Table of Frequences and/or Percentages — Table","text":"","code":"with(as.data.frame(UCBAdmissions),Table(Admit,Freq)) #> Admitted Rejected  #>     1755     2771    Aggregate(Table(Admit,Freq)~.,data=UCBAdmissions) #>    Gender Dept Admitted Rejected #> 1    Male    A      512      313 #> 2  Female    A       89       19 #> 3    Male    B      353      207 #> 4  Female    B       17        8 #> 5    Male    C      120      205 #> 6  Female    C      202      391 #> 7    Male    D      138      279 #> 8  Female    D      131      244 #> 9    Male    E       53      138 #> 10 Female    E       94      299 #> 11   Male    F       22      351 #> 12 Female    F       24      317    A <- sample(c(1:5,9),size=100,replace=TRUE)   labels(A) <- c(a=1,b=2,c=3,d=4,e=5,dk=9)   missing.values(A) <- 9   Table(A,percentage=TRUE) #>     Counts  Percent #> a 16.00000 19.51220 #> b 17.00000 20.73171 #> c 18.00000 21.95122 #> d 15.00000 18.29268 #> e 16.00000 19.51220"},{"path":"https://melff.github.io/mclogit/reference/Write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Codebooks and Variable Descriptions into a Text File — Write","title":"Write Codebooks and Variable Descriptions into a Text File — Write","text":"convenience function facilitate creation data set documents    text files.","code":""},{"path":"https://melff.github.io/mclogit/reference/Write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Codebooks and Variable Descriptions into a Text File — Write","text":"","code":"Write(x,...) # S3 method for codebook Write(x,file=stdout(),...) # S3 method for descriptions Write(x,file=stdout(),...)"},{"path":"https://melff.github.io/mclogit/reference/Write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Codebooks and Variable Descriptions into a Text File — Write","text":"x \"codebook\" \"descriptions\" object. file connection, see connections. ... arguments, ignored passed particular methods.","code":""},{"path":"https://melff.github.io/mclogit/reference/annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding Annotations to Objects — annotations","title":"Adding Annotations to Objects — annotations","text":"Annotations, , objects class \"annotation\",   character vectors elements named.   one method defined subclass character vectors,   method show, shows annotation   nicely formatted way. Annotations object can obtained   via function annotation(x) can set via   annotation(x)<-value. Elements annotation names \"description\"   \"wording\" special meaning.   first kind can obtained set via   description(x) description(x)<-value,   second kind can obtained via   wording(x) wording(x)<-value.   \"description\" elements used way \"variable labels\"   used SPSS Stata. \"wording\" elements annotation   objects meant contain question wording questionnaire   item represented \"item\" objects.   elements annotations treated special way   output coodbook function.","code":""},{"path":"https://melff.github.io/mclogit/reference/annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding Annotations to Objects — annotations","text":"","code":"annotation(x) # S4 method for ANY annotation(x) # S4 method for item annotation(x) # S4 method for data.set annotation(x) annotation(x)<-value # S4 method for ANY,character annotation(x)<-value # S4 method for ANY,annotation annotation(x)<-value # S4 method for item,annotation annotation(x)<-value # S4 method for vector,annotation annotation(x)<-value  description(x) description(x)<-value  wording(x) wording(x)<-value  # S4 method for data.set description(x) # S4 method for importer description(x) # S4 method for data.frame description(x) # S4 method for tbl_df description(x)"},{"path":"https://melff.github.io/mclogit/reference/annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding Annotations to Objects — annotations","text":"x object value character annotation object","code":""},{"path":"https://melff.github.io/mclogit/reference/annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adding Annotations to Objects — annotations","text":"annotation(x) returns object class \"annotation\", named character. description(x) wording(x) usually return character string. description(x) applied data.set importer object, however, character vector returned, named variables data set external file.","code":""},{"path":"https://melff.github.io/mclogit/reference/annotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adding Annotations to Objects — annotations","text":"","code":"vote <- sample(c(1,2,3,8,9,97,99),size=30,replace=TRUE) labels(vote) <- c(Conservatives         =  1,                     Labour                =  2,                     \"Liberal Democrats\"   =  3,                     \"Don't know\"          =  8,                     \"Answer refused\"      =  9,                     \"Not applicable\"      = 97,                     \"Not asked in survey\" = 99                     ) missing.values(vote) <- c(97,99) description(vote) <- \"Vote intention\" wording(vote) <- \"If a general election would take place next tuesday,                     the candidate of which party would you vote for?\" annotation(vote) #> description: #>      Vote intention #>  #> wording: #>      If a general election would take place next tuesday, the candidate of #>      which party would you vote for? #>  annotation(vote)[\"Remark\"] <- \"This is not a real questionnaire item, of course ...\" codebook(vote) #> ================================================================================ #>  #>    vote 'Vote intention' #>  #>    \"If a general election would take place next tuesday, the candidate of which #>    party would you vote for?\" #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 97, 99 #>  #>    Values and labels              N Valid Total #>                                                 #>     1   'Conservatives'           3  13.6  10.0 #>     2   'Labour'                  5  22.7  16.7 #>     3   'Liberal Democrats'       8  36.4  26.7 #>     8   'Don't know'              4  18.2  13.3 #>     9   'Answer refused'          2   9.1   6.7 #>    97 M 'Not applicable'          5        16.7 #>    99 M 'Not asked in survey'     3        10.0 #>  #>    Remark: #>        This is not a real questionnaire item, of course ... #>"},{"path":"https://melff.github.io/mclogit/reference/applyTemplate.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a Formatting Template to a Numeric or Character Vector — applyTemplate","title":"Apply a Formatting Template to a Numeric or Character Vector — applyTemplate","text":"applyTemplate called internally mtable   format coefficients summary statistics.","code":""},{"path":"https://melff.github.io/mclogit/reference/applyTemplate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a Formatting Template to a Numeric or Character Vector — applyTemplate","text":"","code":"applyTemplate(x,template,float.style=getOption(\"float.style\"),                       digits=min(3,getOption(\"digits\")),                       signif.symbols=getOption(\"signif.symbols\"))"},{"path":"https://melff.github.io/mclogit/reference/applyTemplate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a Formatting Template to a Numeric or Character Vector — applyTemplate","text":"x numeric character vector formatted template character vector defines template, see details. float.style character string passed formatC         applyTemplate; valid values         \"e\", \"f\", \"g\", \"fg\",         \"E\", \"G\". default, float.style          setting options used. `factory fresh' setting         options(float.style=\"f\") digits number significant digits use specified       template. signif.symbols named vector specifies significance levels       symbolically indicated, values vector specify       significance levels names specify symbols. default,        signif.symbols setting options used. \"factory-fresh\" setting         options(signif.symbols=c(\"***\"=.001,\"**\"=.01,\"*\"=.05)).","code":""},{"path":"https://melff.github.io/mclogit/reference/applyTemplate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a Formatting Template to a Numeric or Character Vector — applyTemplate","text":"Character vectors used templates may arbitrary. However,   certain character sequences may form template expressions.   template expression form ($<POS>:<Format spec>),   \"($\" indicates start template expression,   \"<POS>\" stands either index name selects   element x \"<Format spec>\" stands   format specifier. may contain letter indicating   style vector element selected <POS>   formatted formatC, may contain   number number significant digits, \"#\"   indicating number signifcant digits given   getOption(\"digits\"), * means   value formatted significance symbol.","code":""},{"path":"https://melff.github.io/mclogit/reference/applyTemplate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a Formatting Template to a Numeric or Character Vector — applyTemplate","text":"applyTemplate returns character vector template   expressions template substituted formatted values x.   template array return value also array   shape.","code":""},{"path":"https://melff.github.io/mclogit/reference/applyTemplate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a Formatting Template to a Numeric or Character Vector — applyTemplate","text":"","code":"applyTemplate(c(a=.0000000000000304,b=3),template=c(\"($1:g7#)($a:*)\",\" (($1:f2)) \")) #>      [,1]          #> [1,] \"3.04e-14***\" #> [2,] \" (0.00) \"    applyTemplate(c(a=.0000000000000304,b=3),template=c(\"($a:g7#)($a:*)\",\" (($b:f2)) \")) #>      [,1]          #> [1,] \"3.04e-14***\" #> [2,] \" (3.00) \""},{"path":"https://melff.github.io/mclogit/reference/as-array.html","id":null,"dir":"Reference","previous_headings":"","what":"Converting Data Frames into Arrays — as.array","title":"Converting Data Frames into Arrays — as.array","text":".array data frames   takes factors data frame uses   define dimensions resulting array,   fills array values   remaining numeric variables. Currently, data frame must contain   combinations factor levels.","code":""},{"path":"https://melff.github.io/mclogit/reference/as-array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converting Data Frames into Arrays — as.array","text":"","code":"# S4 method for data.frame as.array(x,data.name=NULL,...)"},{"path":"https://melff.github.io/mclogit/reference/as-array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converting Data Frames into Arrays — as.array","text":"x data frame data.name character string, giving name     attached dimension     corresponds     numerical variables data frame     (, name attached     corresponding element     dimnames list). ... arguments, ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/as-array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converting Data Frames into Arrays — as.array","text":"array","code":""},{"path":"https://melff.github.io/mclogit/reference/as-array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converting Data Frames into Arrays — as.array","text":"","code":"BerkeleyAdmissions <- to.data.frame(UCBAdmissions) BerkeleyAdmissions #>    Gender Dept Admitted Rejected #> 1    Male    A      512      313 #> 2  Female    A       89       19 #> 3    Male    B      353      207 #> 4  Female    B       17        8 #> 5    Male    C      120      205 #> 6  Female    C      202      391 #> 7    Male    D      138      279 #> 8  Female    D      131      244 #> 9    Male    E       53      138 #> 10 Female    E       94      299 #> 11   Male    F       22      351 #> 12 Female    F       24      317 as.array(BerkeleyAdmissions,data.name=\"Admit\") #> , , Dept = A #>  #>           Gender #> Admit      Male Female #>   Admitted  512     89 #>   Rejected  313     19 #>  #> , , Dept = B #>  #>           Gender #> Admit      Male Female #>   Admitted  353     17 #>   Rejected  207      8 #>  #> , , Dept = C #>  #>           Gender #> Admit      Male Female #>   Admitted  120    202 #>   Rejected  205    391 #>  #> , , Dept = D #>  #>           Gender #> Admit      Male Female #>   Admitted  138    131 #>   Rejected  279    244 #>  #> , , Dept = E #>  #>           Gender #> Admit      Male Female #>   Admitted   53     94 #>   Rejected  138    299 #>  #> , , Dept = F #>  #>           Gender #> Admit      Male Female #>   Admitted   22     24 #>   Rejected  351    317 #>  try(as.array(BerkeleyAdmissions[-1,],data.name=\"Admit\")) #> Error : cannot transform 'x' into an array"},{"path":"https://melff.github.io/mclogit/reference/as.symbols.html","id":null,"dir":"Reference","previous_headings":"","what":"Construction of Lists of Symbols — as.symbols","title":"Construction of Lists of Symbols — as.symbols","text":".symbols syms functions potentially useful   connection foreach xapply.   .symbols produces list symbols character vector,   syms returns list symbols symbols given arguments,   can used construct patterns symbols.","code":""},{"path":"https://melff.github.io/mclogit/reference/as.symbols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construction of Lists of Symbols — as.symbols","text":"","code":"as.symbols(x) syms(...,paste=FALSE,sep=\"\")"},{"path":"https://melff.github.io/mclogit/reference/as.symbols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construction of Lists of Symbols — as.symbols","text":"x character vector ... character strings (unquoted) variable names paste logical value; character strings     pasted one string? sep separator string, passed paste.","code":""},{"path":"https://melff.github.io/mclogit/reference/as.symbols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construction of Lists of Symbols — as.symbols","text":"list language symbols (results .symbol - graphical symbols!).","code":""},{"path":"https://melff.github.io/mclogit/reference/as.symbols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construction of Lists of Symbols — as.symbols","text":"","code":"as.symbols(letters[1:8]) #> [[1]] #> a #>  #> [[2]] #> b #>  #> [[3]] #> c #>  #> [[4]] #> d #>  #> [[5]] #> e #>  #> [[6]] #> f #>  #> [[7]] #> g #>  #> [[8]] #> h #>    syms(\"a\",1:3,paste=TRUE) #> [[1]] #> a1 #>  #> [[2]] #> a2 #>  #> [[3]] #> a3 #>     sapply(syms(\"a\",1:3,paste=TRUE),typeof) #> [1] \"symbol\" \"symbol\" \"symbol\""},{"path":"https://melff.github.io/mclogit/reference/assign-if.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a values to a variable for instances where a condition is\n  met — assign_if","title":"Assign a values to a variable for instances where a condition is\n  met — assign_if","text":"%% operator allows assign values variable     condition met .e. results TRUE. supposed     used similar replace ... construct Stata.","code":""},{"path":"https://melff.github.io/mclogit/reference/assign-if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a values to a variable for instances where a condition is\n  met — assign_if","text":"","code":"expr %if% condition # For example # (variable <- value) %if% (other_variable == 0)"},{"path":"https://melff.github.io/mclogit/reference/assign-if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign a values to a variable for instances where a condition is\n  met — assign_if","text":"expr expression assigns value variable condition logical vector expression evaluates   logical vector","code":""},{"path":"https://melff.github.io/mclogit/reference/assign-if.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign a values to a variable for instances where a condition is\n  met — assign_if","text":"'value' assigned variable expr   either scalar, vector many elements   condition vector , many elements number elements   condition vector equal (evaluate ) TRUE.","code":""},{"path":"https://melff.github.io/mclogit/reference/assign-if.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign a values to a variable for instances where a condition is\n  met — assign_if","text":"","code":"(test_var <- 1) %if% (1:7 > 3)  test_var #> [1] NA NA NA  1  1  1  1  (test_var <- 2) %if% (1:7 <= 3) test_var #> [1] 2 2 2 1 1 1 1  (test_var <- 100*test_var) %if% (1:7%%2==0) test_var #> [1]   2 200   2 100   1 100   1  # This creates a warning about non-matching lengths. (test_var <- 500:501) %if% (1:7 <= 3) #> Warning: Non-matching lengths in assignment test_var #> [1] 500 501 500 100   1 100   1  (test_var <- 501:503) %if% (1:7 <= 3) test_var #> [1] 501 502 503 100   1 100   1  (test_var <- 401:407) %if% (1:7 <= 3) test_var #> [1] 401 402 403 100   1 100   1"},{"path":"https://melff.github.io/mclogit/reference/attr-operators.html","id":null,"dir":"Reference","previous_headings":"","what":"Operators for Setting Annotations and Attributes — attr-operators","title":"Operators for Setting Annotations and Attributes — attr-operators","text":"operator %#% can used attach   description annotation object. %##% can   used attach character vector annotations object.   %@% returns attribute name given second   argument. %@% also possible assign attributes.","code":""},{"path":"https://melff.github.io/mclogit/reference/attr-operators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Operators for Setting Annotations and Attributes — attr-operators","text":"","code":"x %#% descr   x %##% annot   x %@% nm   x %@% nm <- value"},{"path":"https://melff.github.io/mclogit/reference/attr-operators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Operators for Setting Annotations and Attributes — attr-operators","text":"x object, usually item vector. descr character string annot named character vector; contents added     \"annotation\" attribute x. Existing elements kept. nm character string, name attribute set     requested. value kind object can attached attribute.","code":""},{"path":"https://melff.github.io/mclogit/reference/attr-operators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Operators for Setting Annotations and Attributes — attr-operators","text":"","code":"test1 <- 1 %#% \"One\" # This is equivalent to: # test <- 1 # description(test) <- \"One\" description(test1) #> [1] \"One\" # Results in \"One\"  # Not that it makes sense, but ... test2 <- 2 %##% c(                     Precedessor = 0,                     Successor   = 2                  ) # This is equivalent to: # test2 <- 2 # annotation(test2) <- c( #                    Precedessor = 0, #                    Successor   = 2 #                 ) annotation(test2) #> Precedessor: #>      0 #>  #> Successor: #>      2 #>   # The following examples are equivalent to # attr(test2,\"annotation\") test2 %@% annotation #> Precedessor: #>      0 #>  #> Successor: #>      2 #>   test2 %@% \"annotation\" #> Precedessor: #>      0 #>  #> Successor: #>      2 #>   test2 %@% another.attribute <- 42 # This is equivalent to attr(test2,\"another.attribute\") <- 42  attributes(test2) #> $annotation #> Precedessor: #>      0 #>  #> Successor: #>      2 #>  #>  #> $another.attribute #> [1] 42 #>"},{"path":"https://melff.github.io/mclogit/reference/cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Distinguish between Cases Specified by Logical Conditions — cases","title":"Distinguish between Cases Specified by Logical Conditions — cases","text":"cases allows distinguish several cases defined logical   conditions. can used code cases vector.   function can considered multi-condition generalization   ifelse.","code":""},{"path":"https://melff.github.io/mclogit/reference/cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distinguish between Cases Specified by Logical Conditions — cases","text":"","code":"cases(...,check.xor=c(\"warn\",\"stop\",\"ignore\"),       .default=NA,.complete=FALSE,       check.na=c(\"warn\",\"stop\",\"ignore\"),       na.rm=TRUE)"},{"path":"https://melff.github.io/mclogit/reference/cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distinguish between Cases Specified by Logical Conditions — cases","text":"... sequence logical expressions assignment expressions containing     logical expressions \"right hand side\". check.xor character (either \"warn\", \"stop\",  \"ignore\")     logical; TRUE equal \"stop\"      \"warn\",      cases checks whether case     conditions mutually exclusive.     satisfied check.xor equals \"warn\" (default), warning shown,     otherwise error exception raised. .default value used unsatisfied conditions. .complete logical, TRUE additional factor level     created unsatisfied conditions. check.na character (either \"warn\", \"stop\",  \"ignore\")     logical; TRUE equal \"stop\"      \"warn\", cases checks, whether case     conditions evaluates NA.     case, check.na TRUE equals     \"stop\" error exception raised, check.na     equals \"warn\" (default) warning shown. na.rm logical value; handle NAs (    already lead error exception). FALSE     conditions evaluates NA, corresponding value     result vector NA. TRUE (default),     resulting vector factor NA instances     conditions result NA.","code":""},{"path":"https://melff.github.io/mclogit/reference/cases.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distinguish between Cases Specified by Logical Conditions — cases","text":"two distinct ways use function. Either   function can used construct factor represents   several logical cases can used conditionally   evaluate expression manner similar ifelse. first use, ... arguments series   logical expressions. cases returns factor   many levels logical expressions given   ... arguments. resulting factor attain   first level first condition TRUE, otherwise attain   second level second condition TRUE, etc.   levels named conditions , name tags   attached logical expressions, tags expressions.   logical expressions need evaluate logical vectors   length, otherwise error condition raised.   .complete TRUE additional factor level   created conditions satisfied cases. second use, ... arguments series   assignment expression type <expression> <- <logical expression>   <logical expression> -> <expression>. cases   first logical expression TRUE, result first expression   appears side assignment operator become elements   vector returned cases, cases second logical expression TRUE,   result second expression appears side   assignment operator become elements   vector returned cases, etc.   cases satisfy given conditions value   .default argument used.    Note logical expressions also need evaluate logical   vectors length. expressions side   assignment operator also either vectors length   mode scalars mode, otherwise unpredictable   results may occur.","code":""},{"path":"https://melff.github.io/mclogit/reference/cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distinguish between Cases Specified by Logical Conditions — cases","text":"called logical expressions ... arguments,  cases returns factor, called   assignment expressions function returns vector   mode results \"assigned\" expressions   length logical conditions.","code":""},{"path":"https://melff.github.io/mclogit/reference/cases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distinguish between Cases Specified by Logical Conditions — cases","text":"","code":"# Examples of the first kind of usage of the function # df <- data.frame(x = rnorm(n=20), y = rnorm(n=20)) df <- df[do.call(order,df),] (df <- within(df,{   x1=cases(x>0,x<=0)   y1=cases(y>0,y<=0)   z1=cases(     \"Condition 1\"=x<0,     \"Condition 2\"=y<0,# only applies if x >= 0     \"Condition 3\"=TRUE     )   z2=cases(x<0,(x>=0 & y <0), (x>=0 & y >=0))   })) #> Warning: conditions are not mutually exclusive #>              x          y                z2          z1     y1     x1 #> 4  -1.17090050  0.8500889             x < 0 Condition 1  y > 0 x <= 0 #> 15 -1.13067801 -1.9837098             x < 0 Condition 1 y <= 0 x <= 0 #> 9  -0.95580345 -0.5830541             x < 0 Condition 1 y <= 0 x <= 0 #> 11 -0.92789943  0.1950064             x < 0 Condition 1  y > 0 x <= 0 #> 5  -0.76778517  0.7966021             x < 0 Condition 1  y > 0 x <= 0 #> 8  -0.48718839 -0.1611135             x < 0 Condition 1 y <= 0 x <= 0 #> 19 -0.22974347  2.1027012             x < 0 Condition 1  y > 0 x <= 0 #> 18 -0.16787303 -0.7428706             x < 0 Condition 1 y <= 0 x <= 0 #> 13 -0.16782513 -0.9621103             x < 0 Condition 1 y <= 0 x <= 0 #> 16  0.02810962 -1.2807004  (x >= 0 & y < 0) Condition 2 y <= 0  x > 0 #> 20  0.06490333  1.5947017 (x >= 0 & y >= 0) Condition 3  y > 0  x > 0 #> 2   0.14032762 -1.5549519  (x >= 0 & y < 0) Condition 2 y <= 0  x > 0 #> 17  0.14071471 -0.6541561  (x >= 0 & y < 0) Condition 2 y <= 0  x > 0 #> 1   0.20537283 -0.6819101  (x >= 0 & y < 0) Condition 2 y <= 0  x > 0 #> 3   0.65687884  0.8766333 (x >= 0 & y >= 0) Condition 3  y > 0  x > 0 #> 12  0.68900090 -0.5811795  (x >= 0 & y < 0) Condition 2 y <= 0  x > 0 #> 7   0.82221816 -1.6617362  (x >= 0 & y < 0) Condition 2 y <= 0  x > 0 #> 6   1.07636642  1.4230583 (x >= 0 & y >= 0) Condition 3  y > 0  x > 0 #> 14  1.25429155  0.7365762 (x >= 0 & y >= 0) Condition 3  y > 0  x > 0 #> 10  2.05514916  0.1932466 (x >= 0 & y >= 0) Condition 3  y > 0  x > 0 xtabs(~x1+y1,data=df) #>         y1 #> x1       y > 0 y <= 0 #>   x > 0      5      6 #>   x <= 0     4      5 dd <- with(df,   try(cases(x<0,             x>=0,             x>1,             check.xor=TRUE)# let's be fussy             )   ) #> Error in cases(x < 0, x >= 0, x > 1, check.xor = TRUE) :  #>   conditions are not mutually exclusive dd <- with(df,   try(cases(x<0,x>=0,x>1))   ) #> Warning: conditions are not mutually exclusive genTable(range(x)~dd,data=df) #> Error: value for ‘dd’ not found  # An example of the second kind of usage of the function: # A construction of a non-smooth function # fun <- function(x)   cases(     x==0      -> 1,     abs(x)> 1 -> abs(x),     abs(x)<=1 -> x^2   ) x <- seq(from=-2,to=2,length=101) plot(fun(x)~x) #> Warning: Conditions are not mutually exclusive   # Demo of the new .default and .complete arguments x <- seq(from=-2,to=2) cases(a = x < -1,       b = x > 1,       .complete = TRUE) #> [1] a      !(a|b) !(a|b) !(a|b) b      #> Levels: a b !(a|b) cases(x < -1,       x > 1,       .complete = TRUE) #> [1] x < -1            !(x < -1 | x > 1) !(x < -1 | x > 1) !(x < -1 | x > 1) #> [5] x > 1             #> Levels: x < -1 x > 1 !(x < -1 | x > 1) cases(1 <- x < -1,       3 <- x > 1,       .default = 2) #> [1] 1 2 2 2 3  threshhold <- 5 d <- c(1:10, NaN)  d1 <- cases(   d > threshhold -> 1,   d <= threshhold -> 2 ) #> Warning: At least one logical condition results in missing values #> Warning: 1 NAs created  d2 <- cases(   is.na(d) -> 0,   d > threshhold -> 1,   d <= threshhold -> 2 ) #> Warning: At least one logical condition results in missing values #> Warning: Conditions are not mutually exclusive  # Leads to missing values because some of the conditions result in missing # even though they could be 'captured' d3 <- cases(   is.na(d) -> 0,   d > threshhold -> 1,   d <= threshhold -> 2,   na.rm=FALSE ) #> Warning: At least one logical condition results in missing values #> Warning: Conditions are not mutually exclusive #> Warning: 1 NAs created  d4 <- cases(   is.na(d) -> 0,   d > threshhold +2 -> 1,   d <= threshhold -> 2,   na.rm=FALSE ) #> Warning: At least one logical condition results in missing values #> Warning: Conditions are not mutually exclusive #> Warning: 3 NAs created  cbind(d,d1,d2,d3,d4) #>         d d1 d2 d3 d4 #>  [1,]   1  2  2  2  2 #>  [2,]   2  2  2  2  2 #>  [3,]   3  2  2  2  2 #>  [4,]   4  2  2  2  2 #>  [5,]   5  2  2  2  2 #>  [6,]   6  1  1  1 NA #>  [7,]   7  1  1  1 NA #>  [8,]   8  1  1  1  1 #>  [9,]   9  1  1  1  1 #> [10,]  10  1  1  1  1 #> [11,] NaN NA  0 NA NA  cases(   d > threshhold,   d <= threshhold ) #> Warning: At least one logical condition results in missing values #> Warning: 1 NAs created #>  [1] d <= threshhold d <= threshhold d <= threshhold d <= threshhold #>  [5] d <= threshhold d > threshhold  d > threshhold  d > threshhold  #>  [9] d > threshhold  d > threshhold  <NA>            #> Levels: d > threshhold d <= threshhold  cases(   is.na(d),   d > threshhold,   d <= threshhold ) #> Warning: At least one logical condition results in missing values #> Warning: conditions are not mutually exclusive #>  [1] d <= threshhold d <= threshhold d <= threshhold d <= threshhold #>  [5] d <= threshhold d > threshhold  d > threshhold  d > threshhold  #>  [9] d > threshhold  d > threshhold  is.na(d)        #> Levels: is.na(d) d > threshhold d <= threshhold  cases(   d > threshhold,   d <= threshhold,   .complete=TRUE ) #> Warning: At least one logical condition results in missing values #> Warning: 1 NAs created #>  [1] d <= threshhold d <= threshhold d <= threshhold d <= threshhold #>  [5] d <= threshhold d > threshhold  d > threshhold  d > threshhold  #>  [9] d > threshhold  d > threshhold  <NA>            #> Levels: d > threshhold d <= threshhold  cases(   d > threshhold + 2,   d <= threshhold,   .complete=TRUE ) #> Warning: At least one logical condition results in missing values #> Warning: 1 NAs created #>  [1] d <= threshhold                         #>  [2] d <= threshhold                         #>  [3] d <= threshhold                         #>  [4] d <= threshhold                         #>  [5] d <= threshhold                         #>  [6] !(d > threshhold + 2 | d <= threshhold) #>  [7] !(d > threshhold + 2 | d <= threshhold) #>  [8] d > threshhold + 2                      #>  [9] d > threshhold + 2                      #> [10] d > threshhold + 2                      #> [11] <NA>                                    #> 3 Levels: d > threshhold + 2 ... !(d > threshhold + 2 | d <= threshhold)"},{"path":"https://melff.github.io/mclogit/reference/coarsen.html","id":null,"dir":"Reference","previous_headings":"","what":"Coarsen a vector into a factor with a lower number of levels — coarsen","title":"Coarsen a vector into a factor with a lower number of levels — coarsen","text":"coarsen can used obtain factor vector, similar   cut, less technical \"aesthetic\"   labels factor levels.","code":""},{"path":"https://melff.github.io/mclogit/reference/coarsen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coarsen a vector into a factor with a lower number of levels — coarsen","text":"","code":"coarsen(x,...) # S3 method for numeric coarsen(x,         n=5,         pretty=TRUE,         quantiles=!pretty,         breaks=NULL,         brackets=FALSE,         sep=if(brackets)\";\"else if(quantiles) \"-\" else \" - \",         left=\"[\",         right=\"]\",         range=FALSE,         labels=NULL,         ...)"},{"path":"https://melff.github.io/mclogit/reference/coarsen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coarsen a vector into a factor with a lower number of levels — coarsen","text":"x vector, usually numeric vector n number categories resulting factor pretty logical value, whether pretty     used compute breaks. quantiles logical value, whether quantile     used compute breaks. breaks vector break points NULL. brackets logical value, whether labels include brackets. sep character string, used separator upper     lower boundaries labels. left character string, used left bracket right character string, used right bracket range logical value, whether minimum maximum     x included breaks. labels optional character vector labels. ... arguments, passed pretty     quantile applicable.","code":""},{"path":"https://melff.github.io/mclogit/reference/coarsen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coarsen a vector into a factor with a lower number of levels — coarsen","text":"","code":"x <- rnorm(200)  table(coarsen(x)) #>  #> -3 - -2 -2 - -1  -1 - 0   0 - 1   1 - 2   2 - 3  #>       4      31      56      83      21       5   table(coarsen(x,quantiles=TRUE)) #>  #>   0%-20%  20%-40%  40%-60%  60%-80% 80%-100%  #>       40       40       40       40       40   table(coarsen(x,brackets=TRUE)) #>  #> [-3;-2] [-2;-1]  [-1;0]   [0;1]   [1;2]   [2;3]  #>       4      31      56      83      21       5   table(coarsen(x,breaks=c(-1,0,1))) #>  #> -1 - 0  0 - 1  #>     56     83   table(coarsen(x,breaks=c(-1,0,1),               range=TRUE,labels=letters[1:4])) #>  #>  a  b  c  d  #> 35 56 83 26"},{"path":"https://melff.github.io/mclogit/reference/codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Codebook of a Data Set — codebook","title":"Generate a Codebook of a Data Set — codebook","text":"Function codebook collects documentation item,   items data set external data file. returns   object , shown, print documentation   nicely formatted way.","code":""},{"path":"https://melff.github.io/mclogit/reference/codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Codebook of a Data Set — codebook","text":"","code":"codebook(x, weights = NULL, unweighted = TRUE, ...) # S4 method for item codebook(x, weights = NULL, unweighted = TRUE, ...) # S4 method for atomic codebook(x, weights = NULL, unweighted = TRUE, ...) # S4 method for factor codebook(x, weights = NULL, unweighted = TRUE, ...) # S4 method for data.set codebook(x, weights = NULL, unweighted = TRUE, ...) # S4 method for importer codebook(x, weights = NULL, unweighted = TRUE, ...) # S4 method for data.frame codebook(x, weights = NULL, unweighted = TRUE, ...) # S4 method for tbl_df codebook(x, weights = NULL, unweighted = TRUE, ...)"},{"path":"https://melff.github.io/mclogit/reference/codebook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Codebook of a Data Set — codebook","text":"x item, numeric character vector, factor,     data.set, data.frame importer object codebook() weights optional vector weights. unweighted optional logical vector; weights given,     determines summaries weighted data show also summaries     unweighted data. ... arguments, currently ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/codebook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Codebook of a Data Set — codebook","text":"object class \"codebook\", show method exists   produces nicely formatted output.","code":""},{"path":"https://melff.github.io/mclogit/reference/codebook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Codebook of a Data Set — codebook","text":"","code":"Data <- data.set(           vote = sample(c(1,2,3,8,9,97,99),size=300,replace=TRUE),           region = sample(c(rep(1,3),rep(2,2),3,99),size=300,replace=TRUE),           income = exp(rnorm(300,sd=.7))*2000           )  Data <- within(Data,{   description(vote) <- \"Vote intention\"   description(region) <- \"Region of residence\"   description(income) <- \"Household income\"   wording(vote) <- \"If a general election would take place next tuesday,                     the candidate of which party would you vote for?\"   wording(income) <- \"All things taken into account, how much do all                     household members earn in sum?\"   foreach(x=c(vote,region),{     measurement(x) <- \"nominal\"     })   measurement(income) <- \"ratio\"   labels(vote) <- c(                     Conservatives         =  1,                     Labour                =  2,                     \"Liberal Democrats\"   =  3,                     \"Don't know\"          =  8,                     \"Answer refused\"      =  9,                     \"Not applicable\"      = 97,                     \"Not asked in survey\" = 99)   labels(region) <- c(                     England               =  1,                     Scotland              =  2,                     Wales                 =  3,                     \"Not applicable\"      = 97,                     \"Not asked in survey\" = 99)   foreach(x=c(vote,region,income),{     annotation(x)[\"Remark\"] <- \"This is not a real survey item, of course ...\"     })   missing.values(vote) <- c(8,9,97,99)   missing.values(region) <- c(97,99) })  description(Data) #>  #>  vote   'Vote intention'      #>  region 'Region of residence' #>  income 'Household income'    #>   codebook(Data) #> ================================================================================ #>  #>    vote 'Vote intention' #>  #>    \"If a general election would take place next tuesday, the candidate of which #>    party would you vote for?\" #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 8, 9, 97, 99 #>  #>    Values and labels              N Valid Total #>                                                 #>     1   'Conservatives'          49  38.6  16.3 #>     2   'Labour'                 39  30.7  13.0 #>     3   'Liberal Democrats'      39  30.7  13.0 #>     8 M 'Don't know'             33        11.0 #>     9 M 'Answer refused'         47        15.7 #>    97 M 'Not applicable'         46        15.3 #>    99 M 'Not asked in survey'    47        15.7 #>  #>    Remark: #>        This is not a real survey item, of course ... #>  #> ================================================================================ #>  #>    region 'Region of residence' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 97, 99 #>  #>    Values and labels              N Valid Total #>                                                 #>     1   'England'               138  54.5  46.0 #>     2   'Scotland'               85  33.6  28.3 #>     3   'Wales'                  30  11.9  10.0 #>    99 M 'Not asked in survey'    47        15.7 #>  #>    Remark: #>        This is not a real survey item, of course ... #>  #> ================================================================================ #>  #>    income 'Household income' #>  #>    \"All things taken into account, how much do all household members earn in #>    sum?\" #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: ratio #>  #>         Min:   380.824 #>         Max: 22896.634 #>        Mean:  2719.932 #>    Std.Dev.:  2475.967 #>  #>    Remark: #>        This is not a real survey item, of course ... #>   codebook(Data)$vote #> ================================================================================ #>  #>    vote 'Vote intention' #>  #>    \"If a general election would take place next tuesday, the candidate of which #>    party would you vote for?\" #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 8, 9, 97, 99 #>  #>    Values and labels              N Valid Total #>                                                 #>     1   'Conservatives'          49  38.6  16.3 #>     2   'Labour'                 39  30.7  13.0 #>     3   'Liberal Democrats'      39  30.7  13.0 #>     8 M 'Don't know'             33        11.0 #>     9 M 'Answer refused'         47        15.7 #>    97 M 'Not applicable'         46        15.3 #>    99 M 'Not asked in survey'    47        15.7 #>  #>    Remark: #>        This is not a real survey item, of course ... #>  codebook(Data)[2] #> ================================================================================ #>  #>    region 'Region of residence' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 97, 99 #>  #>    Values and labels              N Valid Total #>                                                 #>     1   'England'               138  54.5  46.0 #>     2   'Scotland'               85  33.6  28.3 #>     3   'Wales'                  30  11.9  10.0 #>    99 M 'Not asked in survey'    47        15.7 #>  #>    Remark: #>        This is not a real survey item, of course ... #>   codebook(Data[2]) #> ================================================================================ #>  #>    region 'Region of residence' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 97, 99 #>  #>    Values and labels              N Valid Total #>                                                 #>     1   'England'               138  54.5  46.0 #>     2   'Scotland'               85  33.6  28.3 #>     3   'Wales'                  30  11.9  10.0 #>    99 M 'Not asked in survey'    47        15.7 #>  #>    Remark: #>        This is not a real survey item, of course ... #>    DataFr <- as.data.frame(Data) DataHv <- as_haven(Data,user_na=TRUE)  codebook(DataFr) #> ================================================================================ #>  #>    vote 'Vote intention' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Factor with 3 levels #>  #>    Levels and labels          N Valid Total #>                                             #>     1 'Conservatives'        49  38.6  16.3 #>     2 'Labour'               39  30.7  13.0 #>     3 'Liberal Democrats'    39  30.7  13.0 #>    NA                       173        57.7 #>  #> ================================================================================ #>  #>    region 'Region of residence' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Factor with 3 levels #>  #>    Levels and labels     N Valid Total #>                                        #>     1 'England'        138  54.5  46.0 #>     2 'Scotland'        85  33.6  28.3 #>     3 'Wales'           30  11.9  10.0 #>    NA                   47        15.7 #>  #> ================================================================================ #>  #>    income 'Household income' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>  #>         Min:   380.8244 #>         Max: 22896.6344 #>        Mean:  2719.9321 #>    Std.Dev.:  2475.9673 #>  codebook(DataHv) #> ================================================================================ #>  #>    vote 'Vote intention' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: undefined #>    Missing values: 8, 9, 97, 99 #>  #>    Values and labels              N Valid Total #>                                                 #>     1   'Conservatives'          49  38.6  16.3 #>     2   'Labour'                 39  30.7  13.0 #>     3   'Liberal Democrats'      39  30.7  13.0 #>     8 M 'Don't know'             33        11.0 #>     9 M 'Answer refused'         47        15.7 #>    97 M 'Not applicable'         46        15.3 #>    99 M 'Not asked in survey'    47        15.7 #>  #> ================================================================================ #>  #>    region 'Region of residence' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: undefined #>    Missing values: 97, 99 #>  #>    Values and labels              N Valid Total #>                                                 #>     1   'England'               138  54.5  46.0 #>     2   'Scotland'               85  33.6  28.3 #>     3   'Wales'                  30  11.9  10.0 #>    99 M 'Not asked in survey'    47        15.7 #>  #> ================================================================================ #>  #>    income 'Household income' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>  #>         Min:   380.8244 #>         Max: 22896.6344 #>        Mean:  2719.9321 #>    Std.Dev.:  2475.9673 #>       if (FALSE) { Write(description(Data),            file=\"Data-desc.txt\") Write(codebook(Data),            file=\"Data-cdbk.txt\")   }"},{"path":"https://melff.github.io/mclogit/reference/codeplan.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe structure of Data Sets and Importers — codeplan","title":"Describe structure of Data Sets and Importers — codeplan","text":"function codeplan() creates data frame   describes structure item list (data.set object   importer object), structure can stored   recovered. resulting data frame particular print method   delimits output one line per variable. setCodeplan item list structure (returned codeplan())   can applied data frame data set. also possible use   assignment like codeplan(x) <- value similar effect.","code":""},{"path":"https://melff.github.io/mclogit/reference/codeplan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe structure of Data Sets and Importers — codeplan","text":"","code":"codeplan(x) # S4 method for item.list codeplan(x) # S4 method for item codeplan(x) setCodeplan(x,value) # S4 method for data.frame,codeplan setCodeplan(x,value) # S4 method for data.frame,NULL setCodeplan(x,value) # S4 method for data.set,codeplan setCodeplan(x,value) # S4 method for data.set,NULL setCodeplan(x,value) # S4 method for item,codeplan setCodeplan(x,value) # S4 method for item,NULL setCodeplan(x,value) # S4 method for atomic,codeplan setCodeplan(x,value) # S4 method for atomic,NULL setCodeplan(x,value) codeplan(x) <- value read_codeplan(filename,type) write_codeplan(x,filename,type,pretty)"},{"path":"https://melff.github.io/mclogit/reference/codeplan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe structure of Data Sets and Importers — codeplan","text":"x codeplan(x) object inherits class \"item.list\",     .e. can \"data.set\" object \"importer\"   object, can also object inherits class   \"item\".    write_codeplan object class \"codeplan\". value object returned codeplan(x)     NULL. filename character string, name file                   read written. type character string (either \"yaml\" \"json\") oder NULL (default), gives type               file codeplan written               read.               type NULL file type inferred               file name ending (\".yaml\" \",yml\" \"yaml\",               \".json\" \"json\"). pretty logical value, whether JSON output created write_codeplan(...) prettified.","code":""},{"path":"https://melff.github.io/mclogit/reference/codeplan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe structure of Data Sets and Importers — codeplan","text":"applicable, codeplan returns list   additional S3 class attribute \"codeplan\". arguments   relevant information exist, function returns NULL. list least one element several elements, named   variable \"item.list\" \"data.set\" x. list element   list following elements: annotation named character vector, labels named list labels labelled values value.filter list least two elements named       \"class\" \"filter\", optionally another element named       \"range\". \"class\" element determines class       value filter equals either \"missing.values\", \"valid.values\",       \"valid.range\". element named \"range\" may needed       \"class\" \"missing.values\", possible (like SPSS)       individual missing values range       missing values. mode character string describes storage mode, \"character\",         \"integer\", \"numeric\". measurement character string measurement level,         \"nominal\", \"ordinal\", \"interval\",         \"ratio\". codeplan(x)<-value setCodeplan(x,value) used   value NULL, special information   annotation, labels, value filters, etc. removed resulting   object, usually mere atomic vector data frame.","code":""},{"path":"https://melff.github.io/mclogit/reference/codeplan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describe structure of Data Sets and Importers — codeplan","text":"","code":"Data1 <- data.set(           vote = sample(c(1,2,3,8,9,97,99),size=300,replace=TRUE),           region = sample(c(rep(1,3),rep(2,2),3,99),size=300,replace=TRUE),           income = exp(rnorm(300,sd=.7))*2000           )  Data1 <- within(Data1,{   description(vote) <- \"Vote intention\"   description(region) <- \"Region of residence\"   description(income) <- \"Household income\"   foreach(x=c(vote,region),{     measurement(x) <- \"nominal\"     })   measurement(income) <- \"ratio\"   labels(vote) <- c(                     Conservatives         =  1,                     Labour                =  2,                     \"Liberal Democrats\"   =  3,                     \"Don't know\"          =  8,                     \"Answer refused\"      =  9,                     \"Not applicable\"      = 97,                     \"Not asked in survey\" = 99)   labels(region) <- c(                     England               =  1,                     Scotland              =  2,                     Wales                 =  3,                     \"Not applicable\"      = 97,                     \"Not asked in survey\" = 99)   foreach(x=c(vote,region,income),{     annotation(x)[\"Remark\"] <- \"This is not a real survey item, of course ...\"     })   missing.values(vote) <- c(8,9,97,99)   missing.values(region) <- c(97,99) }) cpData1 <- codeplan(Data1)  Data2 <- data.frame(           vote = sample(c(1,2,3,8,9,97,99),size=300,replace=TRUE),           region = sample(c(rep(1,3),rep(2,2),3,99),size=300,replace=TRUE),           income = exp(rnorm(300,sd=.7))*2000           ) codeplan(Data2) <- cpData1 codeplan(Data2) #>  #> vote: #>   annotation: #>     description: Vote intention #>     Remark: This is not a real survey item, of course ... #>   labels: #>     Conservatives: 1.0 #>     Labour: 2.0 #>     Liberal Democrats: 3.0 #>     Don't know: 8.0 #>     Answer refused: 9.0 #>     Not applicable: 97.0 #>     Not asked in survey: 99.0 #>   value.filter: #>     class: missing.values #>     values: #>     - 8.0 #>     - 9.0 #>     - 97.0 #>     - 99.0 #>   mode: numeric #>   measurement: nominal #> region: #>   annotation: #>     description: Region of residence #>     Remark: This is not a real survey item, of course ... #>   labels: #>     England: 1.0 #>     Scotland: 2.0 #>     Wales: 3.0 #>     Not applicable: 97.0 #>     Not asked in survey: 99.0 #>   value.filter: #>     class: missing.values #>     values: #>     - 97.0 #>     - 99.0 #>   mode: numeric #>   measurement: nominal #> income: #>   annotation: #>     description: Household income #>     Remark: This is not a real survey item, of course ... #>   mode: numeric #>   measurement: ratio #>  codebook(Data2) #> ================================================================================ #>  #>    vote 'Vote intention' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 8, 9, 97, 99 #>  #>    Values and labels              N Valid Total #>                                                 #>     1   'Conservatives'          34  26.0  11.3 #>     2   'Labour'                 54  41.2  18.0 #>     3   'Liberal Democrats'      43  32.8  14.3 #>     8 M 'Don't know'             49        16.3 #>     9 M 'Answer refused'         47        15.7 #>    97 M 'Not applicable'         36        12.0 #>    99 M 'Not asked in survey'    37        12.3 #>  #>    Remark: #>        This is not a real survey item, of course ... #>  #> ================================================================================ #>  #>    region 'Region of residence' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 97, 99 #>  #>    Values and labels              N Valid Total #>                                                 #>     1   'England'               116  45.1  38.7 #>     2   'Scotland'              106  41.2  35.3 #>     3   'Wales'                  35  13.6  11.7 #>    99 M 'Not asked in survey'    43        14.3 #>  #>    Remark: #>        This is not a real survey item, of course ... #>  #> ================================================================================ #>  #>    income 'Household income' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: ratio #>  #>         Min:   288.542 #>         Max: 18228.691 #>        Mean:  2502.020 #>    Std.Dev.:  2026.084 #>  #>    Remark: #>        This is not a real survey item, of course ... #>   # Note the difference between 'as.data.frame' and setting # the codeplan to NULL: Data2df <- as.data.frame(Data2) codeplan(Data2) <- NULL str(Data2) #> 'data.frame':\t300 obs. of  3 variables: #>  $ vote  : num  8 8 3 3 2 99 2 8 97 99 ... #>  $ region: num  2 2 2 3 2 99 1 2 99 2 ... #>  $ income: num  8465 6845 2879 1669 4205 ... str(Data2df) #> 'data.frame':\t300 obs. of  3 variables: #>  $ vote  : Factor w/ 3 levels \"Conservatives\",..: NA NA 3 3 2 NA 2 NA NA NA ... #>   ..- attr(*, \"label\")= chr \"Vote intention\" #>  $ region: Factor w/ 3 levels \"England\",\"Scotland\",..: 2 2 2 3 2 NA 1 2 NA 2 ... #>   ..- attr(*, \"label\")= chr \"Region of residence\" #>  $ income: num  8465 6845 2879 1669 4205 ... #>   ..- attr(*, \"label\")= chr \"Household income\" codeplan(Data2) <- NULL # Does not change anything  # Codeplans of survey items can also be inquired and manipulated: vote <- Data1$vote str(vote) #>  Nmnl. item w/ 7 labels for 1,2,3,... + ms.v.  num [1:300] 97 8 1 1 3 9 97 2 97 1 ... cp.vote <- codeplan(vote) codeplan(vote) <- NULL str(vote) #>  num [1:300] 97 8 1 1 3 9 97 2 97 1 ... codeplan(vote) <- cp.vote vote #>  #> Item 'Vote intention' (measurement: nominal, type: double, length = 300)  #>  #>  [1:300] *Not applicable *Don't know Conservatives Conservatives ...  fn.json <- paste0(tempfile(),\".json\") write_codeplan(codeplan(Data1),filename=fn.json) codeplan(Data2) <- read_codeplan(fn.json) codeplan(Data2) #>  #> vote: #>   annotation: #>     description: Vote intention #>     Remark: This is not a real survey item, of course ... #>   labels: #>     Conservatives: 1 #>     Labour: 2 #>     Liberal Democrats: 3 #>     Don't know: 8 #>     Answer refused: 9 #>     Not applicable: 97 #>     Not asked in survey: 99 #>   value.filter: #>     class: missing.values #>     values: #>     - 8 #>     - 9 #>     - 97 #>     - 99 #>   mode: numeric #>   measurement: nominal #> region: #>   annotation: #>     description: Region of residence #>     Remark: This is not a real survey item, of course ... #>   labels: #>     England: 1 #>     Scotland: 2 #>     Wales: 3 #>     Not applicable: 97 #>     Not asked in survey: 99 #>   value.filter: #>     class: missing.values #>     values: #>     - 97 #>     - 99 #>   mode: numeric #>   measurement: nominal #> income: #>   annotation: #>     description: Household income #>     Remark: This is not a real survey item, of course ... #>   mode: numeric #>   measurement: ratio #>"},{"path":"https://melff.github.io/mclogit/reference/collect.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect Objects — collect","title":"Collect Objects — collect","text":"collect gathers several objects one, matching   elements subsets objects names dimnames.","code":""},{"path":"https://melff.github.io/mclogit/reference/collect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect Objects — collect","text":"","code":"collect(...,names=NULL,inclusive=TRUE) # S3 method for default collect(...,names=NULL,inclusive=TRUE) # S3 method for array collect(...,names=NULL,inclusive=TRUE) # S3 method for matrix collect(...,names=NULL,inclusive=TRUE) # S3 method for table collect(...,names=NULL,sourcename=\".origin\",fill=0) # S3 method for data.frame collect(...,names=NULL,inclusive=TRUE,                                   fussy=FALSE,warn=TRUE,                                   detailed.warnings=FALSE,use.last=FALSE,                                   sourcename=\".origin\") # S3 method for data.set collect(...,names=NULL,inclusive=TRUE,                                   fussy=FALSE,warn=TRUE,                                   detailed.warnings=FALSE,use.last=FALSE,                                   sourcename=\".origin\")"},{"path":"https://melff.github.io/mclogit/reference/collect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect Objects — collect","text":"... atomic vectors, arrays, matrices, tables, data.frames data.sets names optional character vector; case default array methods,     giving dimnames new dimension identifies     collected objects; case data.frame data.set methods,     levels factor indentifying collected objects. inclusive logical, defaults TRUE; unmatched elements included? See details . fussy logical, defaults FALSE; count error, variables     names collected data.frames/data.sets different attributes? warn logical, defaults TRUE; warning given, variables     names collected data.frames/data.sets different attributes? detailed.warnings logical, whether attributes     variable printed differ, warn     fuzzy TRUE. use.last logical, defaults FALSE. function     applied data frames similar objects, attributes variables     may differ data frames (objects, respectively).     argument TRUE, attributes harmonised based     variables last data frame/object, otherwise     attributes variables first data frame/object used harmonisation. sourcename name factor identifies collected data.frames data.sets fill numeric; fill empty table cells, defaults zero, assuming     table contains counts","code":""},{"path":"https://melff.github.io/mclogit/reference/collect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect Objects — collect","text":"x following ... arguments vectors mode (numeric,character, logical)   result matrix many columns vectors. argument inclusive TRUE,   number rows equals number names appear least   vector names matrix filled NA necessary,   otherwise number rows equals number names present vector names. x ... arguments matrices arrays mode (numeric,character, logical)   \\(n\\) dimension result \\(n+1\\) dimensional array table. extend  \\(n+1\\)th dimension equals number matrix, array table arguments,   extends lower dimension depends inclusive argument:   either equal number dimnames appear least given   dimension array filled NA necessary,   equal number dimnames appear arguments   given dimension. x ... arguments data frames data sets,   result data frame data set.   number variables resulting data frame data set depends   inclusive argument. true, number variables   equals number variables appear arguments least   variables filled NA necessary, otherwise   number variables equals number variables present   arguments.","code":""},{"path":"https://melff.github.io/mclogit/reference/collect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect Objects — collect","text":"","code":"x <- c(a=1,b=2) y <- c(a=10,c=30)  x #> a b  #> 1 2  y #>  a  c  #> 10 30   collect(x,y) #>    x  y #> a  1 10 #> b  2 NA #> c NA 30 collect(x,y,inclusive=FALSE) #>   x  y #> a 1 10  X <- matrix(1,nrow=2,ncol=2,dimnames=list(letters[1:2],LETTERS[1:2])) Y <- matrix(2,nrow=3,ncol=2,dimnames=list(letters[1:3],LETTERS[1:2])) Z <- matrix(3,nrow=2,ncol=3,dimnames=list(letters[1:2],LETTERS[1:3]))  X #>   A B #> a 1 1 #> b 1 1 Y #>   A B #> a 2 2 #> b 2 2 #> c 2 2 Z #>   A B C #> a 3 3 3 #> b 3 3 3  collect(X,Y,Z) #> , , X #>  #>    A  B  C #> a  1  1 NA #> b  1  1 NA #> c NA NA NA #>  #> , , Y #>  #>   A B  C #> a 2 2 NA #> b 2 2 NA #> c 2 2 NA #>  #> , , Z #>  #>    A  B  C #> a  3  3  3 #> b  3  3  3 #> c NA NA NA #>  collect(X,Y,Z,inclusive=FALSE) #> , , X #>  #>   A B #> a 1 1 #> b 1 1 #>  #> , , Y #>  #>   A B #> a 2 2 #> b 2 2 #>  #> , , Z #>  #>   A B #> a 3 3 #> b 3 3 #>   X <- matrix(1,nrow=2,ncol=2,dimnames=list(a=letters[1:2],b=LETTERS[1:2])) Y <- matrix(2,nrow=3,ncol=2,dimnames=list(a=letters[1:3],c=LETTERS[1:2])) Z <- matrix(3,nrow=2,ncol=3,dimnames=list(a=letters[1:2],c=LETTERS[1:3]))  collect(X,Y,Z) #> , , X #>  #>    A  B  C #> a  1  1 NA #> b  1  1 NA #> c NA NA NA #>  #> , , Y #>  #>   A B  C #> a 2 2 NA #> b 2 2 NA #> c 2 2 NA #>  #> , , Z #>  #>    A  B  C #> a  3  3  3 #> b  3  3  3 #> c NA NA NA #>  collect(X,Y,Z,inclusive=FALSE) #> , , X #>  #>   A B #> a 1 1 #> b 1 1 #>  #> , , Y #>  #>   A B #> a 2 2 #> b 2 2 #>  #> , , Z #>  #>   A B #> a 3 3 #> b 3 3 #>   df1 <- data.frame(a=rep(1,5),b=rep(1,5)) df2 <- data.frame(a=rep(2,5),b=rep(2,5),c=rep(2,5)) collect(df1,df2) #>    a b  c .origin #> 1  1 1 NA     df1 #> 2  1 1 NA     df1 #> 3  1 1 NA     df1 #> 4  1 1 NA     df1 #> 5  1 1 NA     df1 #> 6  2 2  2     df2 #> 7  2 2  2     df2 #> 8  2 2  2     df2 #> 9  2 2  2     df2 #> 10 2 2  2     df2 collect(df1,df2,inclusive=FALSE) #>    a b .origin #> 1  1 1     df1 #> 2  1 1     df1 #> 3  1 1     df1 #> 4  1 1     df1 #> 5  1 1     df1 #> 6  2 2     df2 #> 7  2 2     df2 #> 8  2 2     df2 #> 9  2 2     df2 #> 10 2 2     df2  data(UCBAdmissions) Male <- as.table(UCBAdmissions[,1,]) Female <- as.table(UCBAdmissions[,2,]) collect(Male,Female,sourcename=\"Gender\") #> , , Gender = Male #>  #>           Dept #> Admit        A   B   C   D   E   F #>   Admitted 512 353 120 138  53  22 #>   Rejected 313 207 205 279 138 351 #>  #> , , Gender = Female #>  #>           Dept #> Admit        A   B   C   D   E   F #>   Admitted  89  17 202 131  94  24 #>   Rejected  19   8 391 244 299 317 #>  collect(unclass(Male),unclass(Female)) #> , , unclass(Male) #>  #>            A   B   C   D   E   F #> Admitted 512 353 120 138  53  22 #> Rejected 313 207 205 279 138 351 #>  #> , , unclass(Female) #>  #>           A  B   C   D   E   F #> Admitted 89 17 202 131  94  24 #> Rejected 19  8 391 244 299 317 #>   Male1 <- as.table(UCBAdmissions[,1,-1]) Female2 <- as.table(UCBAdmissions[,2,-2]) Female3 <- as.table(UCBAdmissions[,2,-3]) collect(Male=Male1,Female=Female2,sourcename=\"Gender\") #> , , Gender = Male #>  #>           Dept #> Admit        B   C   D   E   F   A #>   Admitted 353 120 138  53  22   0 #>   Rejected 207 205 279 138 351   0 #>  #> , , Gender = Female #>  #>           Dept #> Admit        B   C   D   E   F   A #>   Admitted   0 202 131  94  24  89 #>   Rejected   0 391 244 299 317  19 #>  collect(Male=Male1,Female=Female3,sourcename=\"Gender\") #> , , Gender = Male #>  #>           Dept #> Admit        B   C   D   E   F   A #>   Admitted 353 120 138  53  22   0 #>   Rejected 207 205 279 138 351   0 #>  #> , , Gender = Female #>  #>           Dept #> Admit        B   C   D   E   F   A #>   Admitted  17   0 131  94  24  89 #>   Rejected   8   0 244 299 317  19 #>  collect(Male=Male1,Female=Female3,sourcename=\"Gender\",fill=NA) #> , , Gender = Male #>  #>           Dept #> Admit        B   C   D   E   F A #>   Admitted 353 120 138  53  22   #>   Rejected 207 205 279 138 351   #>  #> , , Gender = Female #>  #>           Dept #> Admit        B C   D   E   F   A #>   Admitted  17   131  94  24  89 #>   Rejected   8   244 299 317  19 #>   f1 <- gl(3,5,labels=letters[1:3]) f2 <- gl(3,6,labels=letters[1:3]) collect(f1=table(f1),f2=table(f2)) #>     .origin #> Freq f1 f2 #>    a  5  6 #>    b  5  6 #>    c  5  6  ds1 <- data.set(x = 1:3) ds2 <- data.set(x = 4:9,                 y = 1:6) collect(ds1,ds2) #>  #> Data set with 9 observations and 3 variables #>  #>   x  y .origin #> 1 1 NA     ds1 #> 2 2 NA     ds1 #> 3 3 NA     ds1 #> 4 4  1     ds2 #> 5 5  2     ds2 #> 6 6  3     ds2 #> 7 7  4     ds2 #> 8 8  5     ds2 #> 9 9  6     ds2"},{"path":"https://melff.github.io/mclogit/reference/contract.html","id":null,"dir":"Reference","previous_headings":"","what":"Contract data into pattern-frequency format — contract","title":"Contract data into pattern-frequency format — contract","text":"contract() contracts data pattern-frequency format, similar   contatenation table() (xtabs)   .data.frame(). Yet uses much less memory patterns   sparse, create rows patterns occur.","code":""},{"path":"https://melff.github.io/mclogit/reference/contract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contract data into pattern-frequency format — contract","text":"","code":"contract(x,...) # S3 method for data.frame contract(x,by=NULL, weights=NULL,name=\"Freq\",     force.name=FALSE,sort=FALSE,drop.na=TRUE,...) # S3 method for data.set contract(x,by=NULL, weights=NULL,name=\"Freq\",     force.name=FALSE,sort=FALSE,drop.na=TRUE,...)"},{"path":"https://melff.github.io/mclogit/reference/contract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contract data into pattern-frequency format — contract","text":"x object class \"data.frame\" \"data.set\". formula vector variable names (quoted quoted).     Specifies patterns (optionally weights).     formula, right-hand side specifies     variables value patterns counted.     left-hand side formula (name ) numeric     vector, values used weights (case     weights argument ignored.) left-hand side     formula (name ) factor, counts computed      separate columns levels. weights numeric vector weights NULL. name character string, name variable     containts frequency counts value patterns. force.name logical value, defaults FALSE.     TRUE left-hand side formula factor,     names columns counts combinations     labels factor levels argument name;     FALSE, column names created labels     factor levels . sort logical value, defaults FALSE. TRUE,     resulting data set sorted variables define     patterns. FALSE, row resulting data frame     data set ordered according occurrence patterns. drop.na logical value, defaults TRUE.     FALSE, patterns involve NA included     resulting data frame data set. ... arguments, passed methods ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/contract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contract data into pattern-frequency format — contract","text":"x data fame, value contract() also   data frame. \"data.set\" object, result also  \"data.set\" object.","code":""},{"path":"https://melff.github.io/mclogit/reference/contract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contract data into pattern-frequency format — contract","text":"","code":"iris_ <- sample(iris,size=nrow(iris),replace=TRUE) w <- rep(1,nrow(iris_)) contract(iris[4:5]) #>    Petal.Width    Species Freq #> 1          0.2     setosa   29 #> 2          0.4     setosa    7 #> 3          0.3     setosa    7 #> 4          0.1     setosa    5 #> 5          0.5     setosa    1 #> 6          0.6     setosa    1 #> 7          1.4 versicolor    7 #> 8          1.5 versicolor   10 #> 9          1.3 versicolor   13 #> 10         1.6 versicolor    3 #> 11         1.0 versicolor    7 #> 12         1.1 versicolor    3 #> 13         1.8 versicolor    1 #> 14         1.2 versicolor    5 #> 15         1.7 versicolor    1 #> 16         2.5  virginica    3 #> 17         1.9  virginica    5 #> 18         2.1  virginica    6 #> 19         1.8  virginica   11 #> 20         2.2  virginica    3 #> 21         1.7  virginica    1 #> 22         2.0  virginica    6 #> 23         2.4  virginica    3 #> 24         2.3  virginica    8 #> 25         1.5  virginica    2 #> 26         1.6  virginica    1 #> 27         1.4  virginica    1 contract(iris[4:5],sort=TRUE) #>    Petal.Width    Species Freq #> 1          0.1     setosa    5 #> 2          0.2     setosa   29 #> 3          0.3     setosa    7 #> 4          0.4     setosa    7 #> 5          0.5     setosa    1 #> 6          0.6     setosa    1 #> 7          1.0 versicolor    7 #> 8          1.1 versicolor    3 #> 9          1.2 versicolor    5 #> 10         1.3 versicolor   13 #> 11         1.4 versicolor    7 #> 12         1.5 versicolor   10 #> 13         1.6 versicolor    3 #> 14         1.7 versicolor    1 #> 15         1.8 versicolor    1 #> 16         1.4  virginica    1 #> 17         1.5  virginica    2 #> 18         1.6  virginica    1 #> 19         1.7  virginica    1 #> 20         1.8  virginica   11 #> 21         1.9  virginica    5 #> 22         2.0  virginica    6 #> 23         2.1  virginica    6 #> 24         2.2  virginica    3 #> 25         2.3  virginica    8 #> 26         2.4  virginica    3 #> 27         2.5  virginica    3 contract(iris[4:5],weights=w,sort=TRUE) #>    Petal.Width    Species Freq #> 1          0.1     setosa    5 #> 2          0.2     setosa   29 #> 3          0.3     setosa    7 #> 4          0.4     setosa    7 #> 5          0.5     setosa    1 #> 6          0.6     setosa    1 #> 7          1.0 versicolor    7 #> 8          1.1 versicolor    3 #> 9          1.2 versicolor    5 #> 10         1.3 versicolor   13 #> 11         1.4 versicolor    7 #> 12         1.5 versicolor   10 #> 13         1.6 versicolor    3 #> 14         1.7 versicolor    1 #> 15         1.8 versicolor    1 #> 16         1.4  virginica    1 #> 17         1.5  virginica    2 #> 18         1.6  virginica    1 #> 19         1.7  virginica    1 #> 20         1.8  virginica   11 #> 21         1.9  virginica    5 #> 22         2.0  virginica    6 #> 23         2.1  virginica    6 #> 24         2.2  virginica    3 #> 25         2.3  virginica    8 #> 26         2.4  virginica    3 #> 27         2.5  virginica    3 contract(iris,by=c(Petal.Width,Species),sort=TRUE) #>    Petal.Width    Species Freq #> 1          0.1     setosa    5 #> 2          0.2     setosa   29 #> 3          0.3     setosa    7 #> 4          0.4     setosa    7 #> 5          0.5     setosa    1 #> 6          0.6     setosa    1 #> 7          1.0 versicolor    7 #> 8          1.1 versicolor    3 #> 9          1.2 versicolor    5 #> 10         1.3 versicolor   13 #> 11         1.4 versicolor    7 #> 12         1.5 versicolor   10 #> 13         1.6 versicolor    3 #> 14         1.7 versicolor    1 #> 15         1.8 versicolor    1 #> 16         1.4  virginica    1 #> 17         1.5  virginica    2 #> 18         1.6  virginica    1 #> 19         1.7  virginica    1 #> 20         1.8  virginica   11 #> 21         1.9  virginica    5 #> 22         2.0  virginica    6 #> 23         2.1  virginica    6 #> 24         2.2  virginica    3 #> 25         2.3  virginica    8 #> 26         2.4  virginica    3 #> 27         2.5  virginica    3 contract(iris,by=~Petal.Width+Species) #>    Petal.Width    Species Freq #> 1          0.2     setosa   29 #> 2          0.4     setosa    7 #> 3          0.3     setosa    7 #> 4          0.1     setosa    5 #> 5          0.5     setosa    1 #> 6          0.6     setosa    1 #> 7          1.4 versicolor    7 #> 8          1.5 versicolor   10 #> 9          1.3 versicolor   13 #> 10         1.6 versicolor    3 #> 11         1.0 versicolor    7 #> 12         1.1 versicolor    3 #> 13         1.8 versicolor    1 #> 14         1.2 versicolor    5 #> 15         1.7 versicolor    1 #> 16         2.5  virginica    3 #> 17         1.9  virginica    5 #> 18         2.1  virginica    6 #> 19         1.8  virginica   11 #> 20         2.2  virginica    3 #> 21         1.7  virginica    1 #> 22         2.0  virginica    6 #> 23         2.4  virginica    3 #> 24         2.3  virginica    8 #> 25         1.5  virginica    2 #> 26         1.6  virginica    1 #> 27         1.4  virginica    1 contract(iris,by=w~Species) #>      Species Freq #> 1     setosa   50 #> 2 versicolor   50 #> 3  virginica   50  library(MASS) contract(housing,          by=Sat~Infl+Type+Cont,          weights=Freq) #>      Infl      Type Cont Low Medium High #> 1     Low     Tower  Low  21     21   28 #> 2  Medium     Tower  Low  34     22   36 #> 3    High     Tower  Low  10     11   36 #> 4     Low Apartment  Low  61     23   17 #> 5  Medium Apartment  Low  43     35   40 #> 6    High Apartment  Low  26     18   54 #> 7     Low    Atrium  Low  13      9   10 #> 8  Medium    Atrium  Low   8      8   12 #> 9    High    Atrium  Low   6      7    9 #> 10    Low   Terrace  Low  18      6    7 #> 11 Medium   Terrace  Low  15     13   13 #> 12   High   Terrace  Low   7      5   11 #> 13    Low     Tower High  14     19   37 #> 14 Medium     Tower High  17     23   40 #> 15   High     Tower High   3      5   23 #> 16    Low Apartment High  78     46   43 #> 17 Medium Apartment High  48     45   86 #> 18   High Apartment High  15     25   62 #> 19    Low    Atrium High  20     23   20 #> 20 Medium    Atrium High  10     22   24 #> 21   High    Atrium High   7     10   21 #> 22    Low   Terrace High  57     23   13 #> 23 Medium   Terrace High  31     21   13 #> 24   High   Terrace High   5      6   13  contract(housing,          by=Sat~Infl+Type+Cont,          weights=Freq,          name=\"housing\",force.name=TRUE          ) #>      Infl      Type Cont housing.Low housing.Medium housing.High #> 1     Low     Tower  Low          21             21           28 #> 2  Medium     Tower  Low          34             22           36 #> 3    High     Tower  Low          10             11           36 #> 4     Low Apartment  Low          61             23           17 #> 5  Medium Apartment  Low          43             35           40 #> 6    High Apartment  Low          26             18           54 #> 7     Low    Atrium  Low          13              9           10 #> 8  Medium    Atrium  Low           8              8           12 #> 9    High    Atrium  Low           6              7            9 #> 10    Low   Terrace  Low          18              6            7 #> 11 Medium   Terrace  Low          15             13           13 #> 12   High   Terrace  Low           7              5           11 #> 13    Low     Tower High          14             19           37 #> 14 Medium     Tower High          17             23           40 #> 15   High     Tower High           3              5           23 #> 16    Low Apartment High          78             46           43 #> 17 Medium Apartment High          48             45           86 #> 18   High Apartment High          15             25           62 #> 19    Low    Atrium High          20             23           20 #> 20 Medium    Atrium High          10             22           24 #> 21   High    Atrium High           7             10           21 #> 22    Low   Terrace High          57             23           13 #> 23 Medium   Terrace High          31             21           13 #> 24   High   Terrace High           5              6           13"},{"path":"https://melff.github.io/mclogit/reference/contrasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience Methods for Setting Contrasts — contr","title":"Convenience Methods for Setting Contrasts — contr","text":"package provides modified versions   contr.treatment   contr.sum. contr.sum   gains optional base argument, analog   one contr.treatment, furthermore,   base argument may name   factor level. contr returns function calls either   contr.treatment, contr.sum, etc.,   according value given first argument. contrasts method \"item\" objects   returns contrast matrix function produce   contrast matrix factor   item coerced via .factor .ordered.   matrix function can specified   using contrasts(x)<-value","code":""},{"path":"https://melff.github.io/mclogit/reference/contrasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience Methods for Setting Contrasts — contr","text":"","code":"contr(type,...) contr.treatment(n, base=1,contrasts=TRUE) contr.sum(n,base=NULL,contrasts=TRUE) # S4 method for item contrasts(x,contrasts=TRUE,...) # S4 method for item contrasts(x,how.many) <- value # These methods are defined implicitely by making 'contrasts' generic. # S4 method for ANY contrasts(x,contrasts=TRUE,...) # S4 method for ANY contrasts(x,how.many) <- value"},{"path":"https://melff.github.io/mclogit/reference/contrasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience Methods for Setting Contrasts — contr","text":"type character vector, specifying type contrasts.     argument value , e.g. type=\"something\",     function contr.something produces     contrast matrix. ... arguments, passed contr.treatment, etc. n number factor levels vector factor levels names, see e.g. contr.treatment. base number factor level names factor level,     specifies baseline category,     see e.g. contr.treatment NULL. contrasts logical value, see  contrasts .many number contrasts generate, see contrasts x factor object class \"item\" value matrix, function name function","code":""},{"path":"https://melff.github.io/mclogit/reference/contrasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience Methods for Setting Contrasts — contr","text":"contr returns funtion calls one contr.treatment, contr.sum,.... contr.treatment contr.sum return contrast matrices. contrasts(x) returns \"contrasts\" attribute object, may function name, function, contrast matrix NULL.","code":""},{"path":"https://melff.github.io/mclogit/reference/contrasts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience Methods for Setting Contrasts — contr","text":"","code":"ctr.t <- contr(\"treatment\",base=\"c\") ctr.t #> function (n, contrasts = TRUE)  #> contr.treatment(n = n, base = \"c\", contrasts = contrasts) #> <environment: 0x56536fcb1c98> ctr.s <- contr(\"sum\",base=\"c\") ctr.h <- contr(\"helmert\") ctr.t(letters[1:7]) #>   a b d e f g #> a 1 0 0 0 0 0 #> b 0 1 0 0 0 0 #> c 0 0 0 0 0 0 #> d 0 0 1 0 0 0 #> e 0 0 0 1 0 0 #> f 0 0 0 0 1 0 #> g 0 0 0 0 0 1 ctr.s(letters[1:7]) #>    a  b  d  e  f  g #> a  1  0  0  0  0  0 #> b  0  1  0  0  0  0 #> c -1 -1 -1 -1 -1 -1 #> d  0  0  1  0  0  0 #> e  0  0  0  1  0  0 #> f  0  0  0  0  1  0 #> g  0  0  0  0  0  1 ctr.h(letters[1:7]) #>   [,1] [,2] [,3] [,4] [,5] [,6] #> a   -1   -1   -1   -1   -1   -1 #> b    1   -1   -1   -1   -1   -1 #> c    0    2   -1   -1   -1   -1 #> d    0    0    3   -1   -1   -1 #> e    0    0    0    4   -1   -1 #> f    0    0    0    0    5   -1 #> g    0    0    0    0    0    6  x <- factor(rep(letters[1:5],3)) contrasts(x) #>   b c d e #> a 0 0 0 0 #> b 1 0 0 0 #> c 0 1 0 0 #> d 0 0 1 0 #> e 0 0 0 1 x <- as.item(x) contrasts(x) #>   b c d e #> a 0 0 0 0 #> b 1 0 0 0 #> c 0 1 0 0 #> d 0 0 1 0 #> e 0 0 0 1 contrasts(x) <- contr.sum(letters[1:5],base=\"c\") contrasts(x) #>    a  b  d  e #> a  1  0  0  0 #> b  0  1  0  0 #> c -1 -1 -1 -1 #> d  0  0  1  0 #> e  0  0  0  1 missing.values(x) <- 5 contrasts(x) #> Warning: contrast matrix has wrong rows, deleting it #> NULL contrasts(as.factor(x)) #> Warning: contrast matrix has wrong rows, deleting it #>   b c d #> a 0 0 0 #> b 1 0 0 #> c 0 1 0 #> d 0 0 1  # Obviously setting missing values after specifying # contrast matrix breaks the contrasts. # Using the 'contr' function, however, prevents this:  missing.values(x) <- NULL contrasts(x) <- contr(\"sum\",base=\"c\") contrasts(x) #>    a  b  d  e #> a  1  0  0  0 #> b  0  1  0  0 #> c -1 -1 -1 -1 #> d  0  0  1  0 #> e  0  0  0  1 missing.values(x) <- 5 contrasts(x) #>    a  b  d #> a  1  0  0 #> b  0  1  0 #> c -1 -1 -1 #> d  0  0  1 contrasts(as.factor(x)) #>    a  b  d #> a  1  0  0 #> b  0  1  0 #> c -1 -1 -1 #> d  0  0  1"},{"path":"https://melff.github.io/mclogit/reference/dataSets.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Set Objects — data.set","title":"Data Set Objects — data.set","text":"\"data.set\" objects collections \"item\" objects,   similar semantics data frames. distinguished   data frames coercion .data.fame   leads data frame contains vectors factors.   Nevertheless methods data frames inherited   data sets, except method within generic   function. within method data sets, see details section. Thus data preparation using data sets retains informations   item annotations, labels, missing values etc.   (mostly automatic) conversion data sets data   frames makes data amenable use R's statistical   functions. dsView function displays data sets similar   manner View displays data frames. (View works   data sets well, changes first data frames.)","code":""},{"path":"https://melff.github.io/mclogit/reference/dataSets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Set Objects — data.set","text":"","code":"data.set(...,row.names = NULL, check.rows = FALSE, check.names = TRUE,     stringsAsFactors = FALSE, document = NULL) as.data.set(x, row.names=NULL, ...) # S4 method for list as.data.set(x,row.names=NULL,...) is.data.set(x) # S3 method for data.set as.data.frame(x, row.names = NULL, optional = FALSE, ...) # S4 method for data.set within(data, expr, ...)  dsView(x)  # S4 method for data.set head(x,n=20,...) # S4 method for data.set tail(x,n=20,...)"},{"path":"https://melff.github.io/mclogit/reference/dataSets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Set Objects — data.set","text":"... data.set function several vectors items,     within , ignored arguments. row.names, check.rows, check.names, stringsAsFactors, optional arguments     data.frame .data.frame,     respectively. document NULL optional character vector contains     documenation data. x .data.set(x), object;     .data.frame(x,...) dsView(x) \"data.set\" object. data data set, , object class \"data.set\". expr expression, several expressions enclosed curly braces. n integer; number rows shown head tail","code":""},{"path":"https://melff.github.io/mclogit/reference/dataSets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data Set Objects — data.set","text":".data.frame method data sets just copy   method list. Consequently, items data set   coerced accordance measurement setting,   see .vector,item-method measurement. within method data sets effect   within method data frames, apart two differences:   results computations coerced items   appropriate length, otherwise, automatically   dropped. Currently one method generic function .data.set   defined: method \"importer\" objects.","code":""},{"path":"https://melff.github.io/mclogit/reference/dataSets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Set Objects — data.set","text":"data.set within method data sets returns \"data.set\" object, .data.set returns logical value, .data.frame returns data frame.","code":""},{"path":"https://melff.github.io/mclogit/reference/dataSets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Set Objects — data.set","text":"","code":"Data <- data.set(           vote = sample(c(1,2,3,8,9,97,99),size=300,replace=TRUE),           region = sample(c(rep(1,3),rep(2,2),3,99),size=300,replace=TRUE),           income = exp(rnorm(300,sd=.7))*2000           )  Data <- within(Data,{   description(vote) <- \"Vote intention\"   description(region) <- \"Region of residence\"   description(income) <- \"Household income\"   wording(vote) <- \"If a general election would take place next tuesday,                     the candidate of which party would you vote for?\"   wording(income) <- \"All things taken into account, how much do all                     household members earn in sum?\"   foreach(x=c(vote,region),{     measurement(x) <- \"nominal\"     })   measurement(income) <- \"ratio\"   labels(vote) <- c(                     Conservatives         =  1,                     Labour                =  2,                     \"Liberal Democrats\"   =  3,                     \"Don't know\"          =  8,                     \"Answer refused\"      =  9,                     \"Not applicable\"      = 97,                     \"Not asked in survey\" = 99)   labels(region) <- c(                     England               =  1,                     Scotland              =  2,                     Wales                 =  3,                     \"Not applicable\"      = 97,                     \"Not asked in survey\" = 99)   foreach(x=c(vote,region,income),{     annotation(x)[\"Remark\"] <- \"This is not a real survey item, of course ...\"     })   missing.values(vote) <- c(8,9,97,99)   missing.values(region) <- c(97,99)    # These to variables do not appear in the   # the resulting data set, since they have the wrong length.   junk1 <- 1:5   junk2 <- matrix(5,4,4)    }) #> Warning: Variables 'junk1','junk2' have wrong length, removing them. # Since data sets may be huge, only a # part of them are 'show'n Data #>  #> Data set with 300 observations and 3 variables #>  #>                 vote               region    income #>  1 Liberal Democrats              England 1563.4367 #>  2   *Not applicable             Scotland 1595.1216 #>  3 Liberal Democrats                Wales  899.9151 #>  4       *Don't know             Scotland 1507.1274 #>  5     Conservatives                Wales 1420.1285 #>  6 Liberal Democrats                Wales 1163.8769 #>  7 Liberal Democrats              England 5393.6526 #>  8       *Don't know              England  808.6993 #>  9       *Don't know              England 5001.5307 #> 10 Liberal Democrats                Wales 4092.3984 #> 11 Liberal Democrats              England 2457.3926 #> 12 Liberal Democrats             Scotland 2655.7748 #> 13 Liberal Democrats             Scotland  792.3896 #> 14   *Not applicable              England 5411.3952 #> 15 Liberal Democrats                Wales 2675.9923 #> 16            Labour              England 4931.3168 #> 17   *Answer refused *Not asked in survey  998.0484 #> 18   *Not applicable             Scotland 2875.9748 #> 19            Labour *Not asked in survey 1369.3689 #> 20     Conservatives             Scotland 2456.1671 #> 21     Conservatives              England  556.7594 #> 22   *Answer refused *Not asked in survey  732.4009 #> 23     Conservatives             Scotland 1618.4601 #> 24   *Not applicable              England 3581.1223 #> 25            Labour              England 2600.4067 #> .. ................. .................... ......... #> (25 of 300 observations shown)  if (FALSE) {  # If we insist on seeing all, we can use 'print' instead print(Data) }  str(Data) #> Data set with 300 obs. of 3 variables: #>  $ vote  : Nmnl. item w/ 7 labels for 1,2,3,... + ms.v.  num  3 97 3 8 1 3 3 8 8 3 ... #>  $ region: Nmnl. item w/ 5 labels for 1,2,3,... + ms.v.  num  1 2 3 2 3 3 1 1 1 3 ... #>  $ income: Rto. item  num  1563 1595 900 1507 1420 ... summary(Data) #>                    vote                     region        income        #>  Conservatives       :45   England             :109   Min.   :  282.2   #>  Labour              :37   Scotland            : 98   1st Qu.: 1198.1   #>  Liberal Democrats   :48   Wales               : 47   Median : 1971.4   #>  *Don't know         :38   *Not asked in survey: 46   Mean   : 2350.9   #>  *Answer refused     :40                              3rd Qu.: 2848.2   #>  *Not applicable     :42                              Max.   :11500.9   #>  *Not asked in survey:50                                                 if (FALSE) { # If we want to 'View' a data set we can use 'dsView' dsView(Data) # Works also, but changes the data set into a data frame first: View(Data) }  Data[[1]] #>  #> Item 'Vote intention' (measurement: nominal, type: double, length = 300)  #>  #>  [1:300] Liberal Democrats *Not applicable Liberal Democrats *Don't know ... Data[1,] #>  #> Data set with 1 observations and 3 variables #>  #>                vote  region   income #> 1 Liberal Democrats England 1563.437 head(as.data.frame(Data)) #>                vote   region    income #> 1 Liberal Democrats  England 1563.4367 #> 2              <NA> Scotland 1595.1216 #> 3 Liberal Democrats    Wales  899.9151 #> 4              <NA> Scotland 1507.1274 #> 5     Conservatives    Wales 1420.1285 #> 6 Liberal Democrats    Wales 1163.8769  EnglandData <- subset(Data,region == \"England\") EnglandData #>  #> Data set with 109 observations and 3 variables #>  #>                    vote  region    income #>  1    Liberal Democrats England 1563.4367 #>  2    Liberal Democrats England 5393.6526 #>  3          *Don't know England  808.6993 #>  4          *Don't know England 5001.5307 #>  5    Liberal Democrats England 2457.3926 #>  6      *Not applicable England 5411.3952 #>  7               Labour England 4931.3168 #>  8        Conservatives England  556.7594 #>  9      *Not applicable England 3581.1223 #> 10               Labour England 2600.4067 #> 11      *Not applicable England  676.0292 #> 12    Liberal Democrats England 1521.8069 #> 13    Liberal Democrats England 3274.2236 #> 14 *Not asked in survey England  998.1575 #> 15               Labour England  687.1868 #> 16          *Don't know England 1169.9715 #> 17 *Not asked in survey England  829.0785 #> 18      *Not applicable England 1240.8673 #> 19    Liberal Democrats England  761.7435 #> 20          *Don't know England 2530.7805 #> 21      *Not applicable England  552.3988 #> 22    Liberal Democrats England 1991.3867 #> 23               Labour England 1476.5627 #> 24        Conservatives England 1158.4834 #> 25    Liberal Democrats England 5427.1393 #> .. .................... ....... ......... #> (25 of 109 observations shown)  xtabs(~vote+region,data=Data) #>                    region #> vote                England Scotland Wales #>   Conservatives          15       15     6 #>   Labour                 11       12     6 #>   Liberal Democrats      19       15    11 xtabs(~vote+region,data=within(Data, vote <- include.missings(vote))) #>                       region #> vote                   England Scotland Wales #>   Conservatives             15       15     6 #>   Labour                    11       12     6 #>   Liberal Democrats         19       15    11 #>   *Don't know               12       15     6 #>   *Answer refused           12       14     5 #>   *Not applicable           18       14     5 #>   *Not asked in survey      22       13     8"},{"path":"https://melff.github.io/mclogit/reference/dataset-manip.html","id":null,"dir":"Reference","previous_headings":"","what":"Manipulation of Data Sets — data.set manipulation","title":"Manipulation of Data Sets — data.set manipulation","text":"Like data frames, data.set objects   subset, unique,   cbind, rbind,   merge methods defined . semantics basically methods defined   data frames base package, difference   return values data.set objects.   fact, methods described front-ends   corresponding methods data frames, constructed   \"extra\" information attached variables within   data.set objects, , item objects.","code":""},{"path":"https://melff.github.io/mclogit/reference/dataset-manip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manipulation of Data Sets — data.set manipulation","text":"","code":"# S3 method for data.set subset(x, subset, select, drop = FALSE, ...)  # S4 method for data.set unique(x, incomparables = FALSE, ...)  # S3 method for data.set cbind(..., deparse.level = 1)  # S3 method for data.set rbind(..., deparse.level = 1)  # S4 method for data.set,data.set merge(x,y, ...)  # S4 method for data.set,data.frame merge(x,y, ...)  # S4 method for data.frame,data.set merge(x,y, ...)"},{"path":"https://melff.github.io/mclogit/reference/dataset-manip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manipulation of Data Sets — data.set manipulation","text":"x,y data.set objects. arguments     merge may also object coercable data frame     result still data.set object. subset logical expression, used select observations     data set. select vector variablen names, retained     data subset. drop logical; TRUE result one     column, result item data set. ... subset: logical vector     length number rows data.set     , optionally, vector variable names (tagged select);     unique: arguments, ignored;     cbind, rbind: objects coercable     data frames, least one data.set     object;     merge: arguments     arguments tagged , .x, .y,     etc. specify variables merge     data sets data frames x y. incomparables vector values compared. See     unique. deparse.level argument retained     reasons compatibility default methods     cbind rbind.","code":""},{"path":"https://melff.github.io/mclogit/reference/dataset-manip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manipulation of Data Sets — data.set manipulation","text":"","code":"ds1 <- data.set(       a = rep(1:3,5),       b = rep(1:5,each=3)   ) ds2 <- data.set(       a = c(3:1,3,3),       b = 1:5   )  ds1 <- within(ds1,{       description(a) <- \"Example variable 'a'\"       description(b) <- \"Example variable 'b'\"   })  ds2 <- within(ds2,{       description(a) <- \"Example variable 'a'\"       description(b) <- \"Example variable 'b'\"   })  str(ds3 <- rbind(ds1,ds2)) #> Data set with 20 obs. of 2 variables: #>  $ a: Itvl. item  num  1 2 3 1 2 3 1 2 3 1 ... #>  $ b: Itvl. item  int  1 1 1 2 2 2 3 3 3 4 ... description(ds3) #>  #>  a 'Example variable 'a'' #>  b 'Example variable 'b'' #>   ds3 <- within(ds1,{         c <- a         d <- b         description(c) <- \"Copy of variable 'a'\"         description(d) <- \"Copy of variable 'b'\"         rm(a,b)     }) str(ds4 <- cbind(ds1,ds3)) #> Data set with 15 obs. of 4 variables: #>  $ ds1.a: Itvl. item  int  1 2 3 1 2 3 1 2 3 1 ... #>  $ ds1.b: Itvl. item  int  1 1 1 2 2 2 3 3 3 4 ... #>  $ ds3.c: Itvl. item  int  1 2 3 1 2 3 1 2 3 1 ... #>  $ ds3.d: Itvl. item  int  1 1 1 2 2 2 3 3 3 4 ... description(ds4) #>  #>  ds1.a 'Example variable 'a'' #>  ds1.b 'Example variable 'b'' #>  ds3.c 'Copy of variable 'a'' #>  ds3.d 'Copy of variable 'b'' #>   ds5 <- data.set(         c = 1:3,         d = c(1,1,2)         ) ds5 <- within(ds5,{       description(c) <- \"Example variable 'c'\"       description(d) <- \"Example variable 'd'\"   }) str(ds6 <- merge(ds1,ds5,by.x=\"a\",by.y=\"c\")) #> Data set with 15 obs. of 3 variables: #>  $ a: Itvl. item  int  1 1 1 1 1 2 2 2 2 2 ... #>  $ b: Itvl. item  int  1 4 3 2 5 1 4 3 2 5 ... #>  $ d: Itvl. item  num  1 1 1 1 1 1 1 1 1 1 ...  # Note that the attributes of the left-hand variables # have priority. description(ds6) #>  #>  a 'Example variable 'a'' #>  b 'Example variable 'b'' #>  d 'Example variable 'd'' #>"},{"path":"https://melff.github.io/mclogit/reference/dedup-labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle duplicated labels — deduplicate_labels","title":"Handle duplicated labels — deduplicate_labels","text":"function deduplicate_labels can used \"item\" objects,   \"importer\" objects \"data.set\" objects deal    duplicate labels,   .e. labels attached   one code. several ways de-duplicate labels: combining   values share label making labels duplicate labels distinct.","code":""},{"path":"https://melff.github.io/mclogit/reference/dedup-labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle duplicated labels — deduplicate_labels","text":"","code":"deduplicate_labels(x,...) # S3 method for item deduplicate_labels(x,     method=c(\"combine codes\",              \"prefix values\",              \"postfix values\"),...) # Applicable to 'importer' objects and 'data.set' objects # S3 method for item.list deduplicate_labels(x,...)"},{"path":"https://melff.github.io/mclogit/reference/dedup-labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle duplicated labels — deduplicate_labels","text":"x item value labels contains items     value labels method character string determines method     make value labels unique. ... arguments, passed specific methods   generic function.","code":""},{"path":"https://melff.github.io/mclogit/reference/dedup-labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle duplicated labels — deduplicate_labels","text":"function deduplicate_labels copy x unqiue value labels.","code":""},{"path":"https://melff.github.io/mclogit/reference/dedup-labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle duplicated labels — deduplicate_labels","text":"","code":"x1 <- as.item(rep(1:5,4),               labels=c(                   A = 1,                   A = 2,                   B = 3,                   B = 4,                   C = 5               ),               annotation = c(                   description=\"Yet another test\" )) #> Warning: Duplicate labels 'A' 'B'                x2 <- as.item(rep(1:4,5),               labels=c(                   i   = 1,                   ii  = 2,                   iii = 3,                   iii = 4                   ),               annotation = c(                   description=\"Still another test\" )) #> Warning: Duplicate labels 'iii'  x3 <- as.item(rep(1:2,10),               labels=c(                   a = 1,                   b = 2                   ),               annotation = c(                   description=\"Still another test\" ))                              codebook(deduplicate_labels(x1)) #> ================================================================================ #>  #>    deduplicate_labels(x1) 'Yet another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'A'                   8    40.0 #>    3 'B'                   8    40.0 #>    5 'C'                   4    20.0 #>  codebook(deduplicate_labels(x1,method=\"prefix\")) #> ================================================================================ #>  #>    deduplicate_labels(x1, method = \"prefix\") 'Yet another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 '1. A'                4    20.0 #>    2 '2. A'                4    20.0 #>    3 '3. B'                4    20.0 #>    4 '4. B'                4    20.0 #>    5 '5. C'                4    20.0 #>  codebook(deduplicate_labels(x1,method=\"postfix\")) #> ================================================================================ #>  #>    deduplicate_labels(x1, method = \"postfix\") 'Yet another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'A (1)'               4    20.0 #>    2 'A (2)'               4    20.0 #>    3 'B (3)'               4    20.0 #>    4 'B (4)'               4    20.0 #>    5 'C'                   4    20.0 #>   ds <- data.set(x1,x2,x3) codebook(deduplicate_labels(ds)) #> ================================================================================ #>  #>    x1 'Yet another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'A'                   8    40.0 #>    3 'B'                   8    40.0 #>    5 'C'                   4    20.0 #>  #> ================================================================================ #>  #>    x2 'Still another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'i'                   5    25.0 #>    2 'ii'                  5    25.0 #>    3 'iii'                10    50.0 #>  #> ================================================================================ #>  #>    x3 'Still another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                  10    50.0 #>    2 'b'                  10    50.0 #>  codebook(deduplicate_labels(ds,method=\"prefix\")) #> ================================================================================ #>  #>    x1 'Yet another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 '1. A'                4    20.0 #>    2 '2. A'                4    20.0 #>    3 '3. B'                4    20.0 #>    4 '4. B'                4    20.0 #>    5 '5. C'                4    20.0 #>  #> ================================================================================ #>  #>    x2 'Still another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 '1. i'                5    25.0 #>    2 '2. ii'               5    25.0 #>    3 '3. iii'              5    25.0 #>    4 '4. iii'              5    25.0 #>  #> ================================================================================ #>  #>    x3 'Still another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                  10    50.0 #>    2 'b'                  10    50.0 #>  codebook(deduplicate_labels(ds,method=\"postfix\")) #> ================================================================================ #>  #>    x1 'Yet another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'A (1)'               4    20.0 #>    2 'A (2)'               4    20.0 #>    3 'B (3)'               4    20.0 #>    4 'B (4)'               4    20.0 #>    5 'C'                   4    20.0 #>  #> ================================================================================ #>  #>    x2 'Still another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'i'                   5    25.0 #>    2 'ii'                  5    25.0 #>    3 'iii (3)'             5    25.0 #>    4 'iii (4)'             5    25.0 #>  #> ================================================================================ #>  #>    x3 'Still another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                  10    50.0 #>    2 'b'                  10    50.0 #>"},{"path":"https://melff.github.io/mclogit/reference/dimrename.html","id":null,"dir":"Reference","previous_headings":"","what":"Change dimnames, rownames, or colnames — dimrename","title":"Change dimnames, rownames, or colnames — dimrename","text":"functions provide easy way change dimnames, rownames colnames   array.","code":""},{"path":"https://melff.github.io/mclogit/reference/dimrename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change dimnames, rownames, or colnames — dimrename","text":"","code":"dimrename(x, dim = 1, ..., gsub = FALSE, fixed = TRUE, warn = TRUE) rowrename(x, ..., gsub = FALSE, fixed = TRUE, warn = TRUE) colrename(x, ..., gsub = FALSE, fixed = TRUE, warn = TRUE)"},{"path":"https://melff.github.io/mclogit/reference/dimrename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change dimnames, rownames, or colnames — dimrename","text":"x array dimnames dim vector indicates dimensions ... sequence named arguments gsub logical value; TRUE, gsub used change       dimnames object.       , instead substituting whole names, substrings       dimnames object can changed. fixed logical value, passed gsub. TRUE,     substitutions fixed strings regular expressions. warn logical; warning issued pattern found?","code":""},{"path":"https://melff.github.io/mclogit/reference/dimrename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change dimnames, rownames, or colnames — dimrename","text":"dimrename changes dimnames x along dimension(s) dim according   remaining arguments. argument names old   names, values new names.   rowrename shorthand changing rownames,   colrename shorthand changing colnames matrix   matrix-like object. gsub FALSE, argument tags old   dimnames, values new dimnames.   gsub TRUE, arguments substrings dimnames   substituted argument values.","code":""},{"path":"https://melff.github.io/mclogit/reference/dimrename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change dimnames, rownames, or colnames — dimrename","text":"Object x changed dimnames.","code":""},{"path":"https://melff.github.io/mclogit/reference/dimrename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change dimnames, rownames, or colnames — dimrename","text":"","code":"m <- matrix(1,2,2) rownames(m) <- letters[1:2] colnames(m) <- LETTERS[1:2] m #>   A B #> a 1 1 #> b 1 1 dimrename(m,1,a=\"first\",b=\"second\") #>        A B #> first  1 1 #> second 1 1 dimrename(m,1,A=\"first\",B=\"second\") #> Warning: unused dimname(s) selected #> Warning: unused dimname(s) selected #>   A B #> a 1 1 #> b 1 1 dimrename(m,2,\"A\"=\"first\",B=\"second\") #>   first second #> a     1      1 #> b     1      1  rowrename(m,a=\"first\",b=\"second\") #>        A B #> first  1 1 #> second 1 1 colrename(m,\"A\"=\"first\",B=\"second\") #>   first second #> a     1      1 #> b     1      1  # Since version 0.99.22 - the following also works:  dimrename(m,1,a=first,b=second) #>        A B #> first  1 1 #> second 1 1 dimrename(m,1,A=first,B=second) #> Warning: unused dimname(s) selected #> Warning: unused dimname(s) selected #>   A B #> a 1 1 #> b 1 1 dimrename(m,2,A=first,B=second) #>   first second #> a     1      1 #> b     1      1"},{"path":"https://melff.github.io/mclogit/reference/duplicated-labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for and report duplicated labels — duplicated_labels","title":"Check for and report duplicated labels — duplicated_labels","text":"function duplicated_labels can used \"item\" objects,   \"importer\" objects \"data.set\" objects check whether items   contain duplicate labels, .e. labels attached   one code.","code":""},{"path":"https://melff.github.io/mclogit/reference/duplicated-labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for and report duplicated labels — duplicated_labels","text":"","code":"duplicated_labels(x) # S3 method for item duplicated_labels(x) # Applicable to 'importer' objects and 'data.set' objects # S3 method for item.list duplicated_labels(x)"},{"path":"https://melff.github.io/mclogit/reference/duplicated-labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for and report duplicated labels — duplicated_labels","text":"x item value labels contains items     value labels","code":""},{"path":"https://melff.github.io/mclogit/reference/duplicated-labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for and report duplicated labels — duplicated_labels","text":"function duplicate.labels returns list class   attribute, allows pretty printing duplicated value labels","code":""},{"path":"https://melff.github.io/mclogit/reference/duplicated-labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for and report duplicated labels — duplicated_labels","text":"","code":"x1 <- as.item(rep(1:5,4),               labels=c(                   A = 1,                   A = 2,                   B = 3,                   B = 4,                   C = 5               ),               annotation = c(                   description=\"Yet another test\" )) #> Warning: Duplicate labels 'A' 'B'                x2 <- as.item(rep(1:4,5),               labels=c(                   i   = 1,                   ii  = 2,                   iii = 3,                   iii = 4                   ),               annotation = c(                   description=\"Still another test\" )) #> Warning: Duplicate labels 'iii'  x3 <- as.item(rep(1:2,10),               labels=c(                   a = 1,                   b = 2                   ),               annotation = c(                   description=\"Still another test\" ))                              duplicated_labels(x1) #> A: 1, 2 #> B: 3, 4 ds <- data.set(x1,x2,x3) duplicated_labels(ds) #>  #> ================================================================================ #>  x1: 'Yet another test' #> -------------------------------------------------------------------------------- #>   A: 1, 2 #>   B: 3, 4 #>  #> ================================================================================ #>  x2: 'Still another test' #> -------------------------------------------------------------------------------- #>   iii: 3, 4 codebook(ds) #> ================================================================================ #>  #>    x1 'Yet another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'A'                   4    20.0 #>    2 'A'                   4    20.0 #>    3 'B'                   4    20.0 #>    4 'B'                   4    20.0 #>    5 'C'                   4    20.0 #>  #> ================================================================================ #>  #>    x2 'Still another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'i'                   5    25.0 #>    2 'ii'                  5    25.0 #>    3 'iii'                 5    25.0 #>    4 'iii'                 5    25.0 #>  #> ================================================================================ #>  #>    x3 'Still another test' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                  10    50.0 #>    2 'b'                  10    50.0 #>   nes1948.por <- unzip(system.file(\"anes/NES1948.ZIP\",package=\"memisc\"),                      \"NES1948.POR\",exdir=tempfile()) nes1948 <- spss.portable.file(nes1948.por) #> Warning: 9 variables have duplicated labels: #>   V480004, V480012, V480020, V480021A, V480021B, V480033A, V480033B, #>   V480034A, V480034B duplicated_labels(nes1948)              #>  #> ================================================================================ #>  V480004: 'CODER' #> -------------------------------------------------------------------------------- #>   NAME NOT KNOWN: 1, 2, 3, 4, 5 #>  #> ================================================================================ #>  V480012: 'WHAT TO DO W TFT-HT ACT' #> -------------------------------------------------------------------------------- #>   HAVE HEARD OF TAFT-HARTLEY ACT: 5, 6 #>  #> ================================================================================ #>  V480020: 'CNSD VT FOR SOMEONE ELSE' #> -------------------------------------------------------------------------------- #>   DID NOT CONSIDER ANYONE ELSE: 11, 22, 33, 44 #>   CONSIDERED WALLACE:           13, 23         #>   CONSIDERED OTHER:             14, 24         #>   NA:                           19, 29, 49     #>   CONSIDERED TRUMAN:            21, 41         #>  #> ================================================================================ #>  V480021A: 'XWHY DID NOT VT FOR HIM 1' #> -------------------------------------------------------------------------------- #>   DISAGREED WITH PLATFORM OR POLICY - TO: 3, 4 #>  #> ================================================================================ #>  V480021B: 'XWHY DID NOT VT FOR HIM 2' #> -------------------------------------------------------------------------------- #>   DISAGREED WITH PLATFORM OR POLICY - TO: 3, 4 #>  #> ================================================================================ #>  V480033A: 'ISSUES CONNECTED W TRMN 1' #> -------------------------------------------------------------------------------- #>   RENT CONTROL:              1, 16, 31, 51, 66, 81  #>   PRICE CONTROL:             2, 17, 32, 52, 67, 82  #>   TAFT-HARTLEY:              3, 18, 33, 53, 68, 83  #>   FARM PRICES AND SUPPORT:   4, 19, 34, 54, 69, 84  #>   LOWER INCOME TAX:          5, 20, 35, 55, 70, 85  #>   CIVIL RIGHTS:              6, 21, 36, 56, 71, 86  #>   BALANCE BUDGET:            7, 22, 37, 57, 72, 87  #>   (GOVERNMENT) HOUSING:      8, 23, 38, 58, 73, 88  #>   DEFENSE ACTIVITY:          9, 24, 39, 59, 74, 89  #>   GOVERNMENT ATOMIC CONTROL: 10, 25, 40, 60, 75, 90 #>   NEW DEAL:                  11, 26, 41, 61, 76, 91 #>   MARSHALL PLAN:             12, 27, 42, 62, 77, 92 #>   FIRM RUSSIAN POLICY:       13, 28, 43, 63, 78, 93 #>   HELP ISRAEL (PALESTINE):   14, 29, 44, 64, 79, 94 #>   PROMOTE PEACE:             15, 30, 45, 65, 80, 95 #>  #> ================================================================================ #>  V480033B: 'ISSUES CONNECTED W TRMN 2' #> -------------------------------------------------------------------------------- #>   RENT CONTROL:              1, 16, 31, 51, 66, 81  #>   PRICE CONTROL:             2, 17, 32, 52, 67, 82  #>   TAFT-HARTLEY:              3, 18, 33, 53, 68, 83  #>   FARM PRICES AND SUPPORT:   4, 19, 34, 54, 69, 84  #>   LOWER INCOME TAX:          5, 20, 35, 55, 70, 85  #>   CIVIL RIGHTS:              6, 21, 36, 56, 71, 86  #>   BALANCE BUDGET:            7, 22, 37, 57, 72, 87  #>   (GOVERNMENT) HOUSING:      8, 23, 38, 58, 73, 88  #>   DEFENSE ACTIVITY:          9, 24, 39, 59, 74, 89  #>   GOVERNMENT ATOMIC CONTROL: 10, 25, 40, 60, 75, 90 #>   NEW DEAL:                  11, 26, 41, 61, 76, 91 #>   MARSHALL PLAN:             12, 27, 42, 62, 77, 92 #>   FIRM RUSSIAN POLICY:       13, 28, 43, 63, 78, 93 #>   HELP ISRAEL (PALESTINE):   14, 29, 44, 64, 79, 94 #>   PROMOTE PEACE:             15, 30, 45, 65, 80, 95 #>  #> ================================================================================ #>  V480034A: 'ISSUES CONNECTED W DEWEY 1' #> -------------------------------------------------------------------------------- #>   RENT CONTROL:              1, 16, 31, 51, 66, 81  #>   PRICE CONTROL:             2, 17, 32, 52, 67, 82  #>   TAFT-HARTLEY:              3, 18, 33, 53, 68, 83  #>   FARM PRICES AND SUPPORT:   4, 19, 34, 54, 69, 84  #>   LOWER INCOME TAX:          5, 20, 35, 55, 70, 85  #>   CIVIL RIGHTS:              6, 21, 36, 56, 71, 86  #>   BALANCE BUDGET:            7, 22, 37, 57, 72, 87  #>   (GOVERNMENT) HOUSING:      8, 23, 38, 58, 73, 88  #>   DEFENSE ACTIVITY:          9, 24, 39, 59, 74, 89  #>   GOVERNMENT ATOMIC CONTROL: 10, 25, 40, 60, 75, 90 #>   NEW DEAL:                  11, 26, 41, 61, 76, 91 #>   MARSHALL PLAN:             12, 27, 42, 62, 77, 92 #>   FIRM RUSSIAN POLICY:       13, 28, 43, 63, 78, 93 #>   HELP ISRAEL (PALESTINE):   14, 29, 44, 64, 79, 94 #>   PROMOTE PEACE:             15, 30, 45, 65, 80, 95 #>  #> ================================================================================ #>  V480034B: 'ISSUES CONNECTED W DEWEY 2' #> -------------------------------------------------------------------------------- #>   RENT CONTROL:              1, 16, 31, 51, 66, 81  #>   PRICE CONTROL:             2, 17, 32, 52, 67, 82  #>   TAFT-HARTLEY:              3, 18, 33, 53, 68, 83  #>   FARM PRICES AND SUPPORT:   4, 19, 34, 54, 69, 84  #>   LOWER INCOME TAX:          5, 20, 35, 55, 70, 85  #>   CIVIL RIGHTS:              6, 21, 36, 56, 71, 86  #>   BALANCE BUDGET:            7, 22, 37, 57, 72, 87  #>   (GOVERNMENT) HOUSING:      8, 23, 38, 58, 73, 88  #>   DEFENSE ACTIVITY:          9, 24, 39, 59, 74, 89  #>   GOVERNMENT ATOMIC CONTROL: 10, 25, 40, 60, 75, 90 #>   NEW DEAL:                  11, 26, 41, 61, 76, 91 #>   MARSHALL PLAN:             12, 27, 42, 62, 77, 92 #>   FIRM RUSSIAN POLICY:       13, 28, 43, 63, 78, 93 #>   HELP ISRAEL (PALESTINE):   14, 29, 44, 64, 79, 94 #>   PROMOTE PEACE:             15, 30, 45, 65, 80, 95"},{"path":"https://melff.github.io/mclogit/reference/format_html.codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Codebooks as HTML — format_html.codebook","title":"Format Codebooks as HTML — format_html.codebook","text":"method format_html \"codebook\" objects created   eponymous function (see codebook)","code":""},{"path":"https://melff.github.io/mclogit/reference/format_html.codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Codebooks as HTML — format_html.codebook","text":"","code":"# S3 method for codebook format_html(x,      toprule = 2,     midrule = 1,     indent = \"3ex\",     style = codebook_format_stdstyle,     var_tag = \"code\",      varid_prefix = \"\", title_tag = \"p\",...)"},{"path":"https://melff.github.io/mclogit/reference/format_html.codebook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Codebooks as HTML — format_html.codebook","text":"x \"codebook\" object toprule non-negative integer; thickness line (pixels) top   codebook entry midrule non-negative integer; thickness line (pixels) separates   header codebook entry body indent character string; indentation (padding)      codebook entry contents style string containing standard CSS styling codebook table cells. var_tag character string; HTML tag contains    name variable varid_prefix character string; prefix added    anchor IDs code entry titles (facilitate    creation tables contents etc.) title_tag character string; HTML tag contains    title codebook entry (variable name description) ... arguments, ignored.","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/format_html.ftable.html","id":null,"dir":"Reference","previous_headings":"","what":"Format ","title":"Format ","text":"method format_html \"ftable\" objects (.e. flattened   contingency tables)","code":""},{"path":"https://melff.github.io/mclogit/reference/format_html.ftable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format ","text":"","code":"# S3 method for ftable format_html(x,                     show.titles = TRUE,                     digits = 0,                     format = \"f\",                     toprule = 2, midrule = 1, bottomrule = 2,                     split.dec = TRUE,                     style = ftable_format_stdstyle,                    margin=\"2ex auto\",                     ...) # S3 method for ftable_matrix format_html(x,                    show.titles=TRUE,                    digits=0,                    format=\"f\",                    toprule=2,midrule=1,bottomrule=2,                    split.dec=TRUE,                    style = ftable_format_stdstyle,                    margin=\"2ex auto\",                     varontop,                    varinfront,                    grouprules=1,                    ...)"},{"path":"https://melff.github.io/mclogit/reference/format_html.ftable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format ","text":"x object class ftable. show.titles logical; names cross-classified variables shown? digits number digits shown decimal dot. useful,   \"ftable\" object created table created genTable like. format format string formatC toprule integer;      thickness pixels rule top table. midrule integer;      thickness pixels rules within table. bottomrule integer;      thickness pixels rule bottom table. split.dec logical; whether numbers centered     decimal point splitting table cells. style string containing standard CSS styling table cells. margin character string, determines margin thus       position HTML table. varontop logical; whether names column variables appear top factor levels varinfront logical; whether names row variables       appear front factor levels grouprules integer, either 1 2; whether one       two rules drawn distinguish groups rows. ... arguments, ignored.","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/format_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Objects in HTML, show the HTML Format or Write it to a File — format_html","title":"Format Objects in HTML, show the HTML Format or Write it to a File — format_html","text":"show_html showing objects convenient way HTML format.   write_html writes HTML format file.  functions call generic format_html format conversion.","code":""},{"path":"https://melff.github.io/mclogit/reference/format_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Objects in HTML, show the HTML Format or Write it to a File — format_html","text":"","code":"show_html(x, output = NULL, ...) write_html(x, file, ..., standalone = TRUE)  format_html(x, ...)  # S3 method for data.frame format_html(x,     toprule=2,midrule=1,bottomrule=2,     split.dec=TRUE,     row.names=TRUE,     digits=getOption(\"digits\"),     format=\"f\",     style=df_format_stdstyle,     margin=\"2ex auto\",      ...)      # S3 method for matrix format_html(x,     toprule=2,midrule=1,bottomrule=2,     split.dec=TRUE,     formatC=FALSE,     digits=getOption(\"digits\"),     format=\"f\",     style=mat_format_stdstyle,     margin=\"2ex auto\",      ...)"},{"path":"https://melff.github.io/mclogit/reference/format_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Objects in HTML, show the HTML Format or Write it to a File — format_html","text":"x object. output character string function     determines HTML formatted object shown. output function, called path   (temporary) file HTML code, e.g. RStudio's viewer   function (available package rstudioapi. output equals \"stdout\", HTML code written    standard output stream (use e.g. output produced knitr),   \"file-show\", contents file HTML code shown   via file.show,   \"browser\", contents file HTML code shown   standard browser (via browseURL). arguments different defaults, depending type   session. non-interactive sessions, default   \"console\", interactive sessions RStudio,   \"browser\", interactive sessions RStudio   \"file-show\". default settings can overriden option \"html_viewer\"   (see options). file character string; name path file   write HTML code . toprule integer;   thickness pixels rule top table. midrule integer;   thickness pixels rules within table. bottomrule integer;   thickness pixels rule bottom table. split.dec logical; whether numbers centered   decimal point splitting table cells. row.names logical; whether row names shown/exported. digits number digits shown decimal dot. useful,   \"ftable\" object created table created genTable like. formatC logical; whether use formatC instead   format format cell contents. format format string formatC style string containing stanard CSS styling table cells. margin character string, determines margin thus     position HTML table. ... arguments, passed formatter functions. standalone logical; HTML file contain \"!DOCTYPE\" header?","code":""},{"path":"https://melff.github.io/mclogit/reference/format_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Objects in HTML, show the HTML Format or Write it to a File — format_html","text":"format_html character string code suitable inclusion HTML-file.","code":""},{"path":"https://melff.github.io/mclogit/reference/format_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Codebooks as Markdown — format_md","title":"Format Codebooks as Markdown — format_md","text":"format_md showing objects convenient way Markdown format. Can included Rmarkdown file cat() function results='asis' code block option. following example runned Rmd file different output formats.","code":""},{"path":"https://melff.github.io/mclogit/reference/format_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Codebooks as Markdown — format_md","text":"","code":"# S3 method for codebook format_md(x, ...) # S3 method for codebookEntry format_md(x, name = \"\", add_rules = TRUE, ...)"},{"path":"https://melff.github.io/mclogit/reference/format_md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Codebooks as Markdown — format_md","text":"x \"codebook\" \"codebookEntry\" object name string; variable name add_rules boolean value; TRUE adds horizontal rules title ... arguments, passed functions","code":""},{"path":"https://melff.github.io/mclogit/reference/format_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Codebooks as Markdown — format_md","text":"format_md character string code suitable inclusion Markdown-file.","code":""},{"path":"https://melff.github.io/mclogit/reference/format_md.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Codebooks as Markdown — format_md","text":"","code":"library(memisc)  Data1 <- data.set(   vote = sample(c(1,2,3,8,9,97,99),size=300,replace=TRUE),   region = sample(c(rep(1,3),rep(2,2),3,99),size=300,replace=TRUE),   income = exp(rnorm(300,sd=.7))*2000 )  Data1 <- within(Data1,{   description(vote) <- \"Vote intention\"   description(region) <- \"Region of residence\"   description(income) <- \"Household income\"   foreach(x=c(vote,region),{     measurement(x) <- \"nominal\"   })   measurement(income) <- \"ratio\"   labels(vote) <- c(     Conservatives         =  1,     Labour                =  2,     \"Liberal Democrats\"   =  3,     \"Don't know\"          =  8,     \"Answer refused\"      =  9,     \"Not applicable\"      = 97,     \"Not asked in survey\" = 99)   labels(region) <- c(     England               =  1,     Scotland              =  2,     Wales                 =  3,     \"Not applicable\"      = 97,     \"Not asked in survey\" = 99)   foreach(x=c(vote,region,income),{     annotation(x)[\"Remark\"] <- \"This is not a real survey item, of course ...\"   })   missing.values(vote) <- c(8,9,97,99)   missing.values(region) <- c(97,99) })  codebook_data <- codebook(Data1)  codebook_md <- format_md(codebook_data, digits = 2)  writeLines(codebook_md) #> -------------------------------------------------------------------------------- #>  #>    vote --- 'Vote intention' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double     #>    Measurement: nominal     #>    Missing values: 8, 9, 97, 99     #>  #>    | Values |   | Labels                |     N | Valid | Total | #>    |-------:|--:|:----------------------|------:|------:|------:| #>    |  1     |   | 'Conservatives'       |    49 |  34.0 |  16.3 | #>    |  2     |   | 'Labour'              |    56 |  38.9 |  18.7 | #>    |  3     |   | 'Liberal Democrats'   |    39 |  27.1 |  13.0 | #>    |  8     | M | 'Don't know'          |    40 |       |  13.3 | #>    |  9     | M | 'Answer refused'      |    41 |       |  13.7 | #>    | 97     | M | 'Not applicable'      |    45 |       |  15.0 | #>    | 99     | M | 'Not asked in survey' |    30 |       |  10.0 | #>  #>    Remark: #>        This is not a real survey item, of course ... #>  #> -------------------------------------------------------------------------------- #>  #>    region --- 'Region of residence' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double     #>    Measurement: nominal     #>    Missing values: 97, 99     #>  #>    | Values |   | Labels                |     N | Valid | Total | #>    |-------:|--:|:----------------------|------:|------:|------:| #>    |  1     |   | 'England'             |   134 |  53.8 |  44.7 | #>    |  2     |   | 'Scotland'            |    81 |  32.5 |  27.0 | #>    |  3     |   | 'Wales'               |    34 |  13.7 |  11.3 | #>    | 99     | M | 'Not asked in survey' |    51 |       |  17.0 | #>  #>    Remark: #>        This is not a real survey item, of course ... #>  #> -------------------------------------------------------------------------------- #>  #>    income --- 'Household income' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double     #>    Measurement: ratio     #>  #>    Min:        217.066    #>    Max:      13889.668    #>    Mean:      2434.954    #>    Std.Dev.:  1896.681    #>  #>    Remark: #>        This is not a real survey item, of course ... #>   if (FALSE) { writeLines(codebook_md,con=\"codebook-example.md\") }"},{"path":"https://melff.github.io/mclogit/reference/ftable-matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Combining flattened tables. — ftable-matrix","title":"Combining flattened tables. — ftable-matrix","text":"method functions described , flattened (contingency) tables can combined  complex objects, class \"ftable_matrix\". objects class   format print methods provided","code":""},{"path":"https://melff.github.io/mclogit/reference/ftable-matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combining flattened tables. — ftable-matrix","text":"","code":"# S3 method for ftable cbind(..., deparse.level=1)  # S3 method for ftable rbind(..., deparse.level=1)  # S3 method for ftable_matrix cbind(..., deparse.level=1)  # S3 method for ftable_matrix rbind(..., deparse.level=1)  # S3 method for ftable_matrix format(x,quote=TRUE,digits=0,format=\"f\",...)  # S3 method for ftable_matrix Write(x,                             file = \"\",                             quote = TRUE,                             append = FALSE,                             digits = 0,                             ...)                              # S3 method for ftable_matrix print(x,quote=FALSE,...)"},{"path":"https://melff.github.io/mclogit/reference/ftable-matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combining flattened tables. — ftable-matrix","text":"... cbind rbind methods, two objects   class \"ftable\" \"ftable_matrix\"; methods:    arguments, ignored. deparse.level ignored, retained compatibility reasons . x object used select method. quote logical, indicating whether strings printed          surrounding quotes. digits numeric integer, number significant digits shown. format format string formatC file character string, containing file path. append logical, output appended file?","code":""},{"path":"https://melff.github.io/mclogit/reference/ftable-matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combining flattened tables. — ftable-matrix","text":"cbind rbind, used \"ftable\" \"ftable_matrix\" objects, return objects class \"ftable_matrix\".","code":""},{"path":"https://melff.github.io/mclogit/reference/ftable-matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combining flattened tables. — ftable-matrix","text":"","code":"ft1 <- ftable(Sex~Survived,Titanic) ft2 <- ftable(Age+Class~Survived,Titanic) ft3 <- ftable(Survived~Class,Titanic) ft4 <- ftable(Survived~Age,Titanic) ft5 <- ftable(Survived~Sex,Titanic)  tab10 <- xtabs(Freq~Survived,Titanic)  (c12.10 <- cbind(ft1,ft2,Total=tab10)) #>                           Age   Child              Adult                       #>          Sex Male Female  Class   1st 2nd 3rd Crew   1st 2nd 3rd Crew   Total  #> Survived                                                                       #> No           1364    126            0   0  52    0   122 167 476  673    1490  #> Yes           367    344            6  24  27    0   197  94 151  212     711  #>                                                                                (r345.10 <- rbind(ft3,ft4,ft5,Total=tab10)) #>        Survived   No Yes  #> Class                     #> 1st              122 203  #> 2nd              167 118  #> 3rd              528 178  #> Crew             673 212  #>                           #> Age                       #> Child             52  57  #> Adult           1438 654  #>                           #> Sex                       #> Male            1364 367  #> Female           126 344  #>                           #>                           #> Total           1490 711  #>                            if (FALSE) { tf <- tempfile() Write(c12.10,file=tf) file.show(tf) }"},{"path":"https://melff.github.io/mclogit/reference/genTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Tables and Data Frames of Descriptive Statistics — genTable","title":"Generic Tables and Data Frames of Descriptive Statistics — genTable","text":"genTable creates table arbitrary summaries conditional   given values independent variables given formula. Aggregate , returns data.frame instead. fapply generic function dispatches data   argument. called internally Aggregate genTable.   Methods function can used adapt Aggregate   genTable data sources data frames.","code":""},{"path":"https://melff.github.io/mclogit/reference/genTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Tables and Data Frames of Descriptive Statistics — genTable","text":"","code":"Aggregate(formula, data=parent.frame(), subset=NULL,           names=NULL, addFreq=TRUE, drop = TRUE, as.vars=1,           ...)  genTable(formula, data=parent.frame(), subset=NULL,          names=NULL, addFreq=TRUE,...)"},{"path":"https://melff.github.io/mclogit/reference/genTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Tables and Data Frames of Descriptive Statistics — genTable","text":"formula formula. right hand side includes one   grouping variables separated '+'. may factors, numeric,   character vectors. left hand side may empty,   numerical variable, factor, expression.   See details . data environment data frame object coercable data frame. subset optional vector specifying subset observations     used. names optional character vector giving names     result(s) yielded expression left hand side formula.     argument may redundant left hand side results named vector.     (See example .) addFreq logical value. TRUE       data table data frame variable       named \"Freq\", call       table, Table, percent, nvalid       supplied additional argument Freq       call table translated       call Table. drop logical value. TRUE, empty groups (.e.     observations aggregated data frame contain     defining combination values factor levels     conditioning variables ) dropped result     Aggregate. Otherwise, result filled NA, appropriate. .vars integer; relevant left hand side formula returns     array matrix - dimension (rows, columns, layers etc.) transformed     variables? Defaults columns case matrices highest dimensional extend     case arrays. ... arguments, passed methods ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/genTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic Tables and Data Frames of Descriptive Statistics — genTable","text":"expression given left hand side formula,     value computed combination values values     right hand side. right hand side dot,     variables data added right hand side     formula. expression given left hand side,     frequency counts respective     value combinations right hand variables computed. single factor left hand side, left hand side     translated appropriate     call table(). Note also case addFreq takes effect. single numeric variable left hand side, frequency     counts weighted variable computed. cases,     genTable equivalent xtabs     Aggregate equivalent .data.frame(xtabs(...)).","code":""},{"path":"https://melff.github.io/mclogit/reference/genTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Tables and Data Frames of Descriptive Statistics — genTable","text":"Aggregate results data frame conditional summaries unique value combinations     conditioning variables.  genTable returns table, , array class \"table\".","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/genTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Tables and Data Frames of Descriptive Statistics — genTable","text":"","code":"ex.data <- expand.grid(mu=c(0,100),sigma=c(1,10))[rep(1:4,rep(100,4)),] ex.data <- within(ex.data,                   x<-rnorm(                     n=nrow(ex.data),                     mean=mu,                     sd=sigma                     )                   )  Aggregate(~mu+sigma,data=ex.data) #> Error in eval(substitute(m), enclos = parent.frame()): object 'ex.data' not found Aggregate(mean(x)~mu+sigma,data=ex.data) #> Error in eval(m, enclos = parent.frame()): object 'ex.data' not found Aggregate(mean(x)~mu+sigma,data=ex.data,name=\"Average\") #> Error in eval(m, enclos = parent.frame()): object 'ex.data' not found Aggregate(c(mean(x),sd(x))~mu+sigma,data=ex.data) #> Error in eval(m, enclos = parent.frame()): object 'ex.data' not found Aggregate(c(Mean=mean(x),StDev=sd(x),N=length(x))~mu+sigma,data=ex.data) #> Error in eval(m, enclos = parent.frame()): object 'ex.data' not found genTable(c(Mean=mean(x),StDev=sd(x),N=length(x))~mu+sigma,data=ex.data) #> , , sigma = 1 #>  #>        mu #>                    0         100 #>   Mean    0.03717667  99.9712958 #>   StDev   1.10589262   0.9421427 #>   N     100.00000000 100.0000000 #>  #> , , sigma = 10 #>  #>        mu #>                   0       100 #>   Mean    0.1944865 101.56692 #>   StDev   9.6884699  10.29783 #>   N     100.0000000 100.00000 #>   Aggregate(table(Admit)~.,data=UCBAdmissions) #>    Gender Dept Admitted Rejected #> 1    Male    A      512      313 #> 2  Female    A       89       19 #> 3    Male    B      353      207 #> 4  Female    B       17        8 #> 5    Male    C      120      205 #> 6  Female    C      202      391 #> 7    Male    D      138      279 #> 8  Female    D      131      244 #> 9    Male    E       53      138 #> 10 Female    E       94      299 #> 11   Male    F       22      351 #> 12 Female    F       24      317 Aggregate(Table(Admit,Freq)~.,data=UCBAdmissions) #>    Gender Dept Admitted Rejected #> 1    Male    A      512      313 #> 2  Female    A       89       19 #> 3    Male    B      353      207 #> 4  Female    B       17        8 #> 5    Male    C      120      205 #> 6  Female    C      202      391 #> 7    Male    D      138      279 #> 8  Female    D      131      244 #> 9    Male    E       53      138 #> 10 Female    E       94      299 #> 11   Male    F       22      351 #> 12 Female    F       24      317 Aggregate(Admit~.,data=UCBAdmissions) #>    Gender Dept Admitted Rejected #> 1    Male    A      512      313 #> 2  Female    A       89       19 #> 3    Male    B      353      207 #> 4  Female    B       17        8 #> 5    Male    C      120      205 #> 6  Female    C      202      391 #> 7    Male    D      138      279 #> 8  Female    D      131      244 #> 9    Male    E       53      138 #> 10 Female    E       94      299 #> 11   Male    F       22      351 #> 12 Female    F       24      317 Aggregate(percent(Admit)~.,data=UCBAdmissions) #>    Gender Dept  Admitted Rejected   N #> 1    Male    A 62.060606 37.93939 825 #> 2  Female    A 82.407407 17.59259 108 #> 3    Male    B 63.035714 36.96429 560 #> 4  Female    B 68.000000 32.00000  25 #> 5    Male    C 36.923077 63.07692 325 #> 6  Female    C 34.064081 65.93592 593 #> 7    Male    D 33.093525 66.90647 417 #> 8  Female    D 34.933333 65.06667 375 #> 9    Male    E 27.748691 72.25131 191 #> 10 Female    E 23.918575 76.08142 393 #> 11   Male    F  5.898123 94.10188 373 #> 12 Female    F  7.038123 92.96188 341 Aggregate(percent(Admit)~Gender,data=UCBAdmissions) #>   Gender Admitted Rejected    N #> 1   Male 44.51877 55.48123 2691 #> 2 Female 30.35422 69.64578 1835 Aggregate(percent(Admit)~Dept,data=UCBAdmissions) #>   Dept  Admitted Rejected   N #> 1    A 64.415863 35.58414 933 #> 2    B 63.247863 36.75214 585 #> 3    C 35.076253 64.92375 918 #> 4    D 33.964646 66.03535 792 #> 5    E 25.171233 74.82877 584 #> 6    F  6.442577 93.55742 714 Aggregate(percent(Gender)~Dept,data=UCBAdmissions) #>   Dept     Male    Female   N #> 1    A 88.42444 11.575563 933 #> 2    B 95.72650  4.273504 585 #> 3    C 35.40305 64.596950 918 #> 4    D 52.65152 47.348485 792 #> 5    E 32.70548 67.294521 584 #> 6    F 52.24090 47.759104 714 Aggregate(percent(Admit)~Dept,data=UCBAdmissions,Gender==\"Female\") #>   Dept  Admitted Rejected   N #> 1    A 82.407407 17.59259 108 #> 2    B 68.000000 32.00000  25 #> 3    C 34.064081 65.93592 593 #> 4    D 34.933333 65.06667 375 #> 5    E 23.918575 76.08142 393 #> 6    F  7.038123 92.96188 341 genTable(percent(Admit)~Dept,data=UCBAdmissions,Gender==\"Female\") #>           Dept #>                    A  B         C         D         E          F #>   Admitted  82.40741 68  34.06408  34.93333  23.91858   7.038123 #>   Rejected  17.59259 32  65.93592  65.06667  76.08142  92.961877 #>   N        108.00000 25 593.00000 375.00000 393.00000 341.000000"},{"path":"https://melff.github.io/mclogit/reference/getSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Model Summaries for Use with ","title":"Get Model Summaries for Use with ","text":"generic function methods collect coefficients   summary statistics model object. used mtable","code":""},{"path":"https://melff.github.io/mclogit/reference/getSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Model Summaries for Use with ","text":"","code":"# S3 method for lm getSummary(obj, alpha=.05,...)   # S3 method for glm getSummary(obj, alpha=.05,...)   # S3 method for merMod getSummary(obj, alpha=.05, ...)  # These are contributed by Christopher N. Lawrence   # S3 method for clm getSummary(obj, alpha=.05,...)   # S3 method for polr getSummary(obj, alpha=.05,...)   # S3 method for simex getSummary(obj, alpha=.05,...)  # These are contributed by Jason W. Morgan   # S3 method for aftreg getSummary(obj, alpha=.05,...)   # S3 method for coxph getSummary(obj, alpha=.05,...)   # S3 method for phreg getSummary(obj, alpha=.05,...)   # S3 method for survreg getSummary(obj, alpha=.05,...)   # S3 method for weibreg getSummary(obj, alpha=.05,...)  # These are contributed by Achim Zeileis   # S3 method for ivreg getSummary(obj, alpha=.05,...)   # S3 method for tobit getSummary(obj, alpha=.05,...)   # S3 method for hurdle getSummary(obj, alpha=.05,...)   # S3 method for zeroinfl getSummary(obj, alpha=.05,...)   # S3 method for betareg getSummary(obj, alpha=.05,...)   # S3 method for multinom getSummary(obj, alpha=.05,...)    # A variant that reports exponentiated coefficients. # The default method calls 'getSummary()' internally and should # be applicable to all classes for which 'getSummary()' methods exist. getSummary_expcoef(obj, alpha=.05,...)   # S3 method for default getSummary_expcoef(obj, alpha=.05,...)"},{"path":"https://melff.github.io/mclogit/reference/getSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Model Summaries for Use with ","text":"obj model object, e.g. class lm glm alpha level confidence intervals; coverage     1-alpha/2 ... arguments; ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/getSummary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Model Summaries for Use with ","text":"generic function getSummary called mtable   order obtain coefficients summaries model objects.   order adapt mtable models classes   lm glm one needs   define getSummary methods classes   set summary template via setSummaryTemplate","code":""},{"path":"https://melff.github.io/mclogit/reference/getSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Model Summaries for Use with ","text":"method getSummary must return list following   components: coef array coefficient estimates;     lowest dimension must following     names meanings: higher dimensions array correspond     individual coefficients , multi-equation models,     model equations.  sumstat vector containing model summary statistics;     components may arbitrary names.","code":""},{"path":"https://melff.github.io/mclogit/reference/html.html","id":null,"dir":"Reference","previous_headings":"","what":"Building Blocks for HTML Code — html","title":"Building Blocks for HTML Code — html","text":"functions described form building blocks format_html methods functions codebook, ftable, ftable_matrix, mtable objects, etc. basic functions html, constructs object represents minimal piece HTML code member class \"html_elem\". Unlike character string containing HTML code, resulting code element can relatively easily modified using functions presented . actual code created function .character applied objects. Longer sequences HTML code can prepared  concatenating c, html_group, applying .html_group list  \"html_elem\" objects. result objects class \"html_group\". Attributes (class, id etc.) HTML elements can added call html, can also later recalled modified attribs setAttribs. important attribute style attribute, can contain CSS styling. can recalled modified style setStyle. Styling strings can also created hmtl_style .css","code":""},{"path":"https://melff.github.io/mclogit/reference/html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Building Blocks for HTML Code — html","text":"","code":"html(tag, ..., .content = NULL, linebreak = FALSE) html_group(...) as.html_group(x)  content(x) content(x)<-value setContent(x,value)  attribs(x) attribs(x)<-value setAttribs(x,...) # S3 method for character setAttribs(x,...) # S3 method for html_elem setAttribs(x,...) # S3 method for html_group setAttribs(x,...)  css(...) as.css(x) style(x) style(x) <- value setStyle(x,...) # S3 method for character setStyle(x,...) # S3 method for html_elem setStyle(x,...) # S3 method for html_group setStyle(x,...)"},{"path":"https://melff.github.io/mclogit/reference/html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Building Blocks for HTML Code — html","text":"tag character string determines opening closing       tags HTML element. (closing tag relevant       element content.) ... optional arguments, named . html: named arguments create attributes HTML element,       unnamed arguments define content HTML element, .e. whatever        appears opening closing tags (e.g. <p> <\/p>).       Character strings, \"html_elem\", \"html_group\" objects can appear       content HTML element. setAttribs: named arguments create attributes HTML element,       unnamed arguments ignored. setStyle: named arguments create styling HTML element,       unnamed arguments ignored. html_group: several objects class \"html_elem\"       \"html_group\". css: named arguments (character strings!)        become components styling CSS format. .content optional character string, \"html_elem\",        \"html_group\" object linebreak logical value vector length 2, determines     whether linebreaks inserted HTML tags. x object. .html_group, list       objects class \"html_elem\" \"html_group\".        content, setContent, attribs,        setAttribs, style, setStyle,       object class \"html_elem\" \"html_group\". value object appropriate class. content<-: character string, \"html_elem\",        \"html_group\" object, concatenation thereof. attribs<- style<-: named character vector.","code":""},{"path":"https://melff.github.io/mclogit/reference/html.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Building Blocks for HTML Code — html","text":"Objects created html lists class attribute   \"html_elem\" components tag character string attributes named character vector content character vector, \"html_elem\" \"html_group\"       object, list . linebreak logical value vector length 2. Objects created html_group concatenation   \"html_elem\" \"html_group\"       object   lists objects, class attribute \"html_group\".","code":""},{"path":"https://melff.github.io/mclogit/reference/html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Building Blocks for HTML Code — html","text":"","code":"html(\"img\") #> <img>  html(\"img\",src=\"test.png\") #> <img src=\"test.png\">  html(\"div\",class=\"element\",id=\"first\",\"Sisyphus\") #> <div class=\"element\" id=\"first\">Sisyphus<\/div>  html(\"div\",class=\"element\",id=\"first\",.content=\"Sisyphus\") #> <div class=\"element\" id=\"first\">Sisyphus<\/div>   div <- html(\"div\",class=\"element\",id=\"first\",linebreak=c(TRUE,TRUE)) content(div) <- \"Sisyphus\" div #> <div class=\"element\" id=\"first\"> #> Sisyphus<\/div> #>    tag <- html(\"tag\",linebreak=TRUE) attribs(tag)[\"class\"] <- \"something\" attribs(tag)[\"class\"] #> $class #> [1] \"something\" #>  tag #> <tag class=\"something\"> #>    style(tag) <- c(color=\"#342334\") style(tag) #> color: #342334;  tag #> <tag class=\"something\" style=\"color: #342334;\"> #>    style(tag)[\"bg\"] <- \"white\" tag #> <tag class=\"something\" style=\"color: #342334; bg: white;\"> #>    setStyle(tag,bg=\"black\") #> <tag class=\"something\" style=\"color: #342334; bg: black;\"> #>   setStyle(tag,c(bg=\"black\")) #> <tag class=\"something\" style=\"color: #342334; bg: black;\"> #>    c(div,tag,tag) #> <div class=\"element\" id=\"first\"> #> Sisyphus<\/div> #> <tag class=\"something\" style=\"color: #342334; bg: white;\"> #> <tag class=\"something\" style=\"color: #342334; bg: white;\">  c(   c(div,tag),   c(div,tag,tag) ) #> <div class=\"element\" id=\"first\"> #> Sisyphus<\/div> #> <tag class=\"something\" style=\"color: #342334; bg: white;\"> #> <div class=\"element\" id=\"first\"> #> Sisyphus<\/div> #> <tag class=\"something\" style=\"color: #342334; bg: white;\"> #> <tag class=\"something\" style=\"color: #342334; bg: white;\">  c(   c(div,tag),   div,tag,tag ) #> <div class=\"element\" id=\"first\"> #> Sisyphus<\/div> #> <tag class=\"something\" style=\"color: #342334; bg: white;\"> #> <div class=\"element\" id=\"first\"> #> Sisyphus<\/div> #> <tag class=\"something\" style=\"color: #342334; bg: white;\"> #> <tag class=\"something\" style=\"color: #342334; bg: white;\">  c(   div,tag,   c(div,tag,tag) ) #> <div class=\"element\" id=\"first\"> #> Sisyphus<\/div> #> <tag class=\"something\" style=\"color: #342334; bg: white;\"> #> <div class=\"element\" id=\"first\"> #> Sisyphus<\/div> #> <tag class=\"something\" style=\"color: #342334; bg: white;\"> #> <tag class=\"something\" style=\"color: #342334; bg: white;\">  content(div) <- c(tag,tag,tag) div #> <div class=\"element\" id=\"first\"> #> <tag class=\"something\" style=\"color: #342334; bg: white;\"> #> <tag class=\"something\" style=\"color: #342334; bg: white;\"> #> <tag class=\"something\" style=\"color: #342334; bg: white;\"> #> <\/div> #>     css(\"background-color\"=\"black\",                   color=\"white\") #> background-color: black; color: white;   as.css(c(\"background-color\"=\"black\",                   color=\"white\")) #> background-color: black; color: white;     Hello <- \"Hello World!\" Hello <- html(\"p\",Hello,linebreak=c(TRUE,TRUE)) style(Hello) <- c(color=\"white\",                   \"font-size\"=\"40px\",                   \"text-align\"=\"center\")       Link <- html(\"a\",\"More examples here ...\",              href=\"http://elff.eu/software/memisc\",              title=\"More examples here ...\",              style=css(color=\"white\"),              linebreak=c(TRUE,FALSE)) Link <- html(\"p\",\" (\",Link,\")\",linebreak=c(TRUE,TRUE)) style(Link) <- c(color=\"white\",                  \"font-size\"=\"15px\",                  \"text-align\"=\"center\")  Hello <- html(\"div\",c(Hello,Link),linebreak=c(TRUE,TRUE)) style(Hello) <- c(\"background-color\"=\"#160666\",                   padding=\"20px\") Hello #> <div style=\"background-color: #160666; padding: 20px;\"> #> <p style=\"color: white; font-size: 40px; text-align: center;\"> #> Hello World!<\/p> #> <p style=\"color: white; font-size: 15px; text-align: center;\"> #>  (<a href=\"http://elff.eu/software/memisc\" title=\"More examples here ...\" style=\"color: white;\"> #> More examples here ...<\/a>)<\/p> #> <\/div> #>    show_html(Hello) #> <div style=\"background-color: #160666; padding: 20px;\"> #> <p style=\"color: white; font-size: 40px; text-align: center;\"> #> Hello World!<\/p> #> <p style=\"color: white; font-size: 15px; text-align: center;\"> #>  (<a href=\"http://elff.eu/software/memisc\" title=\"More examples here ...\" style=\"color: white;\"> #> More examples here ...<\/a>)<\/p> #> <\/div>"},{"path":"https://melff.github.io/mclogit/reference/importers.html","id":null,"dir":"Reference","previous_headings":"","what":"Object Oriented Interface to Foreign Files — importers","title":"Object Oriented Interface to Foreign Files — importers","text":"Importer objects objects refer external data file. Currently Stata files, SPSS system, portable, fixed-column files supported. Data actually imported `translating' importer file data.set using .data.set subset. importer mechanism flexible extensible read.spss  read.dta package \"foreign\", parsing file headers done R. also adapted efficiently load large data sets. importantly, importer objects support labels, missing.values, descriptions, provided package.","code":""},{"path":"https://melff.github.io/mclogit/reference/importers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object Oriented Interface to Foreign Files — importers","text":"","code":"spss.file(file,...)  spss.fixed.file(file,   columns.file,   varlab.file=NULL,   codes.file=NULL,   missval.file=NULL,   count.cases=TRUE,   to.lower=getOption(\"spss.fixed.to.lower\",FALSE),   iconv=TRUE,   encoded=getOption(\"spss.fixed.encoding\",\"cp1252\"),   negative2missing = FALSE)  spss.portable.file(file,   varlab.file=NULL,   codes.file=NULL,   missval.file=NULL,   count.cases=TRUE,   to.lower=getOption(\"spss.por.to.lower\",FALSE),   iconv=TRUE,   encoded=getOption(\"spss.por.encoding\",\"cp1252\"),   negative2missing = FALSE)  spss.system.file(file,   varlab.file=NULL,   codes.file=NULL,   missval.file=NULL,   count.cases=TRUE,   to.lower=getOption(\"spss.sav.to.lower\",FALSE),   iconv=TRUE,   encoded=getOption(\"spss.sav.encoding\",\"cp1252\"),   ignore.scale.info = FALSE,   negative2missing = FALSE)  Stata.file(file,            iconv=TRUE,            encoded=if(new_format)                         getOption(\"Stata.new.encoding\",\"utf-8\")                    else getOption(\"Stata.old.encoding\",\"cp1252\"),            negative2missing = FALSE)  ## The most important methods for \"importer\" objects are: # S3 method for spss.system.importer subset(x, subset, select, drop = FALSE, ...) # S3 method for spss.portable.importer subset(x, subset, select, drop = FALSE, ...) # S3 method for spss.fixed.importer subset(x, subset, select, drop = FALSE, ...) # S3 method for Stata.importer subset(x, subset, select, drop = FALSE, ...) # S3 method for Stata_new.importer subset(x, subset, select, drop = FALSE, ...)  # S4 method for importer as.data.set(x,row.names=NULL,optional=NULL,                     compress.storage.modes=FALSE,...)  # S4 method for importer head(x,n=20,...) # S4 method for importer tail(x,n=20,...)"},{"path":"https://melff.github.io/mclogit/reference/importers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object Oriented Interface to Foreign Files — importers","text":"file character string; path file containing       data ... arguments. spss.file() passes         spss.portable.file()  spss.system.file().         function ignore arguments. columns.file character string; path         SPSS/PSPP syntax file DATA LIST FIXED statement varlab.file character string; path         SPSS/PSPP syntax file VARIABLE LABELS statement codes.file character string; path         SPSS/PSPP syntax file VALUE LABELS statement missval.file character string; path         SPSS/PSPP syntax file MISSING VALUES statement count.cases logical; cases file counted?       takes effect data file already contain information       number cases. .lower logical; variable names changed lower       case? iconv logical; strings (labels       variables) changed encoding platform? encoded cacharacter string; way characters encoded       improrted file. available encoding options       see ?iconvlist. Using argument       spss.system.file fallback, function       uses encoding information present file       present. negative2missing logical; negative values marked       missing values? convention newer data sets       available e.g. GESIS data archive. ignore.scale.info logical; information measuremnt       scale levels provided file ignored? x object inherits class \"importer\". subset logical vector expression containing variables         external data file evaluates logical. select vector variable names external data file.           may also named vector, names give           names variables external data           file renamed. drop logical value, determines happens       one column selected. TRUE one column       selected, subset returns single item       object data.set. row.names ignored, present compatibility. optional ignored, present compatibility. compress.storage.modes logical value; TRUE floating point values       converted integers possible without loss information. n integer; number rows shown head tail","code":""},{"path":"https://melff.github.io/mclogit/reference/importers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Object Oriented Interface to Foreign Files — importers","text":"spss.fixed.file, spss.portable.file, spss.system.file, Stata.file return, respectively, objects class \"spss.fixed.importer\", \"spss.portable.importer\", \"spss.system.importer\", \"Stata.importer\", \"Stata_new.importer\", , inheritance, also objects class \"importer\". \"Stata.importer\" files format Stata versions     12, \"Stata_new.importer\" files newer     format Stata versions 13. Objects class \"importer\" least following two slots: ptr external pointer variables list objects class \"item.vector\"     provides `prototype' \"data.set\" set objects returned     .data.set subset methods objects     class \"importer\" .data.frame importer objects actual data import returns data frame. Note contrast read.spss, variable names resulting data frame lower case, unless importer function called .lower=FALSE. long variable names defined (case PSPP/SPSS system file), take precedence coerced lower case.","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/importers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Object Oriented Interface to Foreign Files — importers","text":"call `constructor' importer object, ,     spss.fixed.file, spss.portable.file, spss.sysntax.file,     Stata.file,     causes R read header data file /    syntax files contain information     variables, columns occupy     (case spss.fixed.file), variable labels,     value labels missing values. information file header /accompagnying     files processed prepare file importing.     Thus inner structure importer object may     well vary according type file imported     additional information given. .data.set subset methods     \"importer\" objects internally use     generic functions seekData, readData, readSlice,     readChunk, methods     subclasses \"importer\".     functions callable     outside package, however. subset method \"importer\" objects reads     data `chunk-wise' create subset observations     option \"subset.chunk.size\" set non-NULL     value, e.g. options(subset.chunk.size=1000). may     useful case large data sets tiny subset     observations needed analysis. Since functions described less complete rewrite     based description file structure provided     documenation PSPP, perhaps thorougly tested      functions foreign package, apart frequent use     author package.","code":""},{"path":"https://melff.github.io/mclogit/reference/importers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object Oriented Interface to Foreign Files — importers","text":"","code":"# Extract American National Election Study of 1948 nes1948.por <- unzip(system.file(\"anes/NES1948.ZIP\",package=\"memisc\"),                      \"NES1948.POR\",exdir=tempfile())  # Get information about the variables contained. nes1948 <- spss.portable.file(nes1948.por) #> Warning: 9 variables have duplicated labels: #>   V480004, V480012, V480020, V480021A, V480021B, V480033A, V480033B, #>   V480034A, V480034B  # The data are not yet loaded: show(nes1948) #>  #> SPSS portable file '/tmp/Rtmpuoij2G/file189c60d8ac29/NES1948.POR'  #> \twith 67 variables and 662 observations  # ... but one can see what variables are present: description(nes1948) #>  #>  VVERSION 'NES VERSION NUMBER'         #>  VDSETNO  'NES DATASET NUMBER'         #>  V480001  'ICPSR ARCHIVE NUMBER'       #>  V480002  'INTERVIEW NUMBER'           #>  V480003  'POP CLASSIFICATION'         #>  V480004  'CODER'                      #>  V480005  'NUMBER OF CALLS TO R'       #>  V480006  'R REMEMBER PREVIOUS INT'    #>  V480007  'INTR INTERVIEW THIS R'      #>  V480008  'PRVS PRE-ELCTN R REINT'     #>  V480009  'R INT IN PRE/POSTELCTN'     #>  V480010  'RENT CNTRL KEPT/DROPPED'    #>  V480011  'GOVT CONTROL PRICES'        #>  V480012  'WHAT TO DO W TFT-HT ACT'    #>  V480013  'PRESLELCTN OTCM SURPRISE'   #>  V480014A 'WHY PPL VTD FOR TRUMAN 1'   #>  V480014B 'WHY PPL VTD FOR TRUMAN 2'   #>  V480015A 'WHY PPL VTD AGNST TRUMAN 1' #>  V480015B 'WHY PPL VTD AGNST TRUMAN 2' #>  V480016A 'WHY PPL VTD FOR DEWEY 1'    #>  V480016B 'WHY PPL VTD FOR DEWEY 2'    #>  V480017A 'WHY PPL VTD AGNST DEWEY 1'  #>  V480017B 'WHY PPL VTD AGNST DEWEY 2'  #>  V480018  'DID R VOTE/FOR WHOM'        #>  V480019  'WN DECIDE FOR WHOM TO VT'   #>  V480020  'CNSD VT FOR SOMEONE ELSE'   #>  V480021A 'XWHY DID NOT VT FOR HIM 1'  #>  V480021B 'XWHY DID NOT VT FOR HIM 2'  #>  V480022A 'WHY VT THE WAY YOU DID 1'   #>  V480022B 'WHY VT THE WAY YOU DID 2'   #>  V480023  'VOTED STRAIGHT TICKET'      #>  V480024  'R NOT VT-IF VT,FOR WHOM'    #>  V480025A 'R NOT VT-WHY DID NOT VT 1'  #>  V480025B 'R NOT VT-WHY DID NOT VT 2'  #>  V480026  'R NOT VT-WAS R REG TO VT'   #>  V480027  'VTD IN PRVS PRESL ELCTN'    #>  V480028  'VTD FOR WHOM IN 1944'       #>  V480029  'OCCUPATION OF HEAD'         #>  V480030  'HEAD BELONG TO LBR UN'      #>  V480031A 'GRPS IDENTIFIED W TRUMAN 1' #>  V480031B 'GRPS IDENTIFIED W TRUMAN 2' #>  V480031C 'GRPS IDENTIFIED W TRUMAN 3' #>  V480032A 'GRPS IDENTIFIED W DEWEY 1'  #>  V480032B 'GRPS IDENTIFIED W DEWEY 2'  #>  V480032C 'GRPS IDENTIFIED W DEWEY 3'  #>  V480033A 'ISSUES CONNECTED W TRMN 1'  #>  V480033B 'ISSUES CONNECTED W TRMN 2'  #>  V480034A 'ISSUES CONNECTED W DEWEY 1' #>  V480034B 'ISSUES CONNECTED W DEWEY 2' #>  V480035A 'PERSONAL ATTRIBUTE TRMN 1'  #>  V480035B 'PERSONAL ATTRIBUTE TRMN 2'  #>  V480036A 'PERSONAL ATTRIBUTE DEWEY 1' #>  V480036B 'PERSONAL ATTRIBUTE DEWEY 2' #>  V480037  'CMPN INCIDENTS MENTIONED'   #>  V480038  '41-PRESLELCTN PLAN TO VT'   #>  V480039  '41-PLAN TO VT REP/DEM'      #>  V480040  '41-USA'S CNCRN W OTHERS'    #>  V480041  '41-SATISD USA TWRD RUSS'    #>  V480042  '41-INFORMATION LEVEL'       #>  V480043  '41-USA GV IN,AGRT RUSS'     #>  V480044  '41-USA-RUSS AGRT VIA U.N'   #>  V480045  'SEX OF RESPONDENT'          #>  V480046  'RACE OF RESPONDENT'         #>  V480047  'AGE OF RESPONDENT'          #>  V480048  'EDUCATION OF RESPONDENT'    #>  V480049  'TOTAL 1948 INCOME'          #>  V480050  'RELIGIOUS PREFERENCE'       #>   # Now a subset of the data is loaded: vote.socdem.48 <- subset(nes1948,               select=c(                   V480018,                   V480029,                   V480030,                   V480045,                   V480046,                   V480047,                   V480048,                   V480049,                   V480050                   ))  # Let's make the names more descriptive: vote.socdem.48 <- rename(vote.socdem.48,                   V480018 = \"vote\",                   V480029 = \"occupation.hh\",                   V480030 = \"unionized.hh\",                   V480045 = \"gender\",                   V480046 = \"race\",                   V480047 = \"age\",                   V480048 = \"education\",                   V480049 = \"total.income\",                   V480050 = \"religious.pref\"         )  # It is also possible to do both # in one step: # vote.socdem.48 <- subset(nes1948, #              select=c( #                  vote           = V480018, #                  occupation.hh  = V480029, #                  unionized.hh   = V480030, #                  gender         = V480045, #                  race           = V480046, #                  age            = V480047, #                  education      = V480048, #                  total.income   = V480049, #                  religious.pref = V480050 #                  ))    # We examine the data more closely: codebook(vote.socdem.48) #> ================================================================================ #>  #>    vote 'DID R VOTE/FOR WHOM' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 9 #>  #>    Values and labels             N Valid Total #>                                                #>    1   'VOTED - FOR TRUMAN'    212  32.1  32.0 #>    2   'VOTED - FOR DEWEY'     178  27.0  26.9 #>    3   'VOTED - FOR WALLACE'     1   0.2   0.2 #>    4   'VOTED - FOR OTHER'      11   1.7   1.7 #>    5   'VOTED - NA FOR WHOM'    20   3.0   3.0 #>    6   'DID NOT VOTE'          238  36.1  36.0 #>    9 M 'NA WHETHER VOTED'        2         0.3 #>  #> ================================================================================ #>  #>    occupation.hh 'OCCUPATION OF HEAD' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 99 #>  #>    Values and labels                                  N Valid Total #>                                                                     #>    10   'PROFESSIONAL, SEMI-PROFESSIONAL'            44   6.9   6.6 #>    20   'SELF-EMPLOYED, MANAGERIAL, SUPERVISORY'     73  11.5  11.0 #>    30   'OTHER WHITE-COLLAR (CLERICAL, SALES, ET'    79  12.5  11.9 #>    40   'SKILLED AND SEMI-SKILLED'                  164  25.9  24.8 #>    60   'PROTECTIVE SERVICE'                          6   0.9   0.9 #>    70   'UNSKILLED, INCLUDING FARM AND SERVICE W'    85  13.4  12.8 #>    80   'FARM OPERATORS AND MANAGERS'               105  16.6  15.9 #>    92   'STUDENT'                                     7   1.1   1.1 #>    94   'UNEMPLOYED'                                  5   0.8   0.8 #>    95   'RETIRED, TOO OLD OR UNABLE TO WORK'         38   6.0   5.7 #>    96   'HOUSEWIFE'                                  28   4.4   4.2 #>    99 M 'NA'                                         28         4.2 #>  #> ================================================================================ #>  #>    unionized.hh 'HEAD BELONG TO LBR UN' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 8 - Inf #>  #>    Values and labels     N Valid Total #>                                        #>    1   'YES'           150  23.3  22.7 #>    2   'NO'            493  76.7  74.5 #>    8 M 'DK'              5         0.8 #>    9 M 'NA'             14         2.1 #>  #> ================================================================================ #>  #>    gender 'SEX OF RESPONDENT' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 9 #>  #>    Values and labels     N Valid Total #>                                        #>    1   'MALE'          302  45.8  45.6 #>    2   'FEMALE'        357  54.2  53.9 #>    9 M 'NA'              3         0.5 #>  #> ================================================================================ #>  #>    race 'RACE OF RESPONDENT' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 9 #>  #>    Values and labels     N Valid Total #>                                        #>    1   'WHITE'         585  90.7  88.4 #>    2   'NEGRO'          60   9.3   9.1 #>    3   'OTHER'           0   0.0   0.0 #>    9 M 'NA'             17         2.6 #>  #> ================================================================================ #>  #>    age 'AGE OF RESPONDENT' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 9 #>  #>    Values and labels     N Valid Total #>                                        #>    1   '18-24'          57   8.7   8.6 #>    2   '25-34'         142  21.7  21.5 #>    3   '35-44'         174  26.6  26.3 #>    4   '45-54'         125  19.1  18.9 #>    5   '55-64'          86  13.1  13.0 #>    6   '65 AND OVER'    70  10.7  10.6 #>    9 M 'NA'              8         1.2 #>  #> ================================================================================ #>  #>    education 'EDUCATION OF RESPONDENT' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 9 #>  #>    Values and labels      N Valid Total #>                                         #>    1   'GRADE SCHOOL'   292  44.4  44.1 #>    2   'HIGH SCHOOL'    266  40.4  40.2 #>    3   'COLLEGE'        100  15.2  15.1 #>    9 M 'NA'               4         0.6 #>  #> ================================================================================ #>  #>    total.income 'TOTAL 1948 INCOME' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 9 #>  #>    Values and labels        N Valid Total #>                                           #>    1   'UNDER $500'        25   3.8   3.8 #>    2   '$500-$999'         43   6.6   6.5 #>    3   '$1000-1999'       110  16.8  16.6 #>    4   '$2000-2999'       185  28.2  27.9 #>    5   '$3000-3999'       142  21.7  21.5 #>    6   '$4000-4999'        66  10.1  10.0 #>    7   '$5000 AND OVER'    84  12.8  12.7 #>    9 M 'NA'                 7         1.1 #>  #> ================================================================================ #>  #>    religious.pref 'RELIGIOUS PREFERENCE' #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>    Missing values: 9 #>  #>    Values and labels     N Valid Total #>                                        #>    1   'PROTESTANT'    460  70.0  69.5 #>    2   'CATHOLIC'      140  21.3  21.1 #>    3   'JEWISH'         25   3.8   3.8 #>    4   'OTHER'          14   2.1   2.1 #>    5   'NONE'           18   2.7   2.7 #>    9 M 'NA'              5         0.8 #>   # ... and conduct some analyses. # t(genTable(percent(vote)~occupation.hh,data=vote.socdem.48)) #>                                           #> occupation.hh                             VOTED - FOR TRUMAN VOTED - FOR DEWEY #>   PROFESSIONAL, SEMI-PROFESSIONAL                  22.727273          50.00000 #>   SELF-EMPLOYED, MANAGERIAL, SUPERVISORY            9.589041          61.64384 #>   OTHER WHITE-COLLAR (CLERICAL, SALES, ET          37.974684          39.24051 #>   SKILLED AND SEMI-SKILLED                         51.829268          14.63415 #>   PROTECTIVE SERVICE                               16.666667          33.33333 #>   UNSKILLED, INCLUDING FARM AND SERVICE W          32.941176          11.76471 #>   FARM OPERATORS AND MANAGERS                      24.761905          13.33333 #>   STUDENT                                          14.285714          28.57143 #>   UNEMPLOYED                                        0.000000           0.00000 #>   RETIRED, TOO OLD OR UNABLE TO WORK               27.027027          43.24324 #>   HOUSEWIFE                                        17.857143          28.57143 #>   <NA>                                             33.333333          14.81481 #>                                           #> occupation.hh                             VOTED - FOR WALLACE VOTED - FOR OTHER #>   PROFESSIONAL, SEMI-PROFESSIONAL                   0.0000000          2.272727 #>   SELF-EMPLOYED, MANAGERIAL, SUPERVISORY            0.0000000          1.369863 #>   OTHER WHITE-COLLAR (CLERICAL, SALES, ET           0.0000000          0.000000 #>   SKILLED AND SEMI-SKILLED                          0.6097561          1.219512 #>   PROTECTIVE SERVICE                                0.0000000         16.666667 #>   UNSKILLED, INCLUDING FARM AND SERVICE W           0.0000000          0.000000 #>   FARM OPERATORS AND MANAGERS                       0.0000000          2.857143 #>   STUDENT                                           0.0000000          0.000000 #>   UNEMPLOYED                                        0.0000000          0.000000 #>   RETIRED, TOO OLD OR UNABLE TO WORK                0.0000000          2.702703 #>   HOUSEWIFE                                         0.0000000          0.000000 #>   <NA>                                              0.0000000          7.407407 #>                                           #> occupation.hh                             VOTED - NA FOR WHOM DID NOT VOTE   N #>   PROFESSIONAL, SEMI-PROFESSIONAL                    2.272727     22.72727  44 #>   SELF-EMPLOYED, MANAGERIAL, SUPERVISORY             1.369863     26.02740  73 #>   OTHER WHITE-COLLAR (CLERICAL, SALES, ET            5.063291     17.72152  79 #>   SKILLED AND SEMI-SKILLED                           2.439024     29.26829 164 #>   PROTECTIVE SERVICE                                 0.000000     33.33333   6 #>   UNSKILLED, INCLUDING FARM AND SERVICE W            4.705882     50.58824  85 #>   FARM OPERATORS AND MANAGERS                        1.904762     57.14286 105 #>   STUDENT                                            0.000000     57.14286   7 #>   UNEMPLOYED                                        20.000000     80.00000   5 #>   RETIRED, TOO OLD OR UNABLE TO WORK                 2.702703     24.32432  37 #>   HOUSEWIFE                                          0.000000     53.57143  28 #>   <NA>                                               7.407407     37.03704  27  # We consider only the two main candidates. vote.socdem.48 <- within(vote.socdem.48,{   truman.dewey <- vote   valid.values(truman.dewey) <- 1:2   truman.dewey <- relabel(truman.dewey,               \"VOTED - FOR TRUMAN\" = \"Truman\",               \"VOTED - FOR DEWEY\"  = \"Dewey\")   })  summary(truman.relig.glm <- glm((truman.dewey==\"Truman\")~religious.pref,     data=vote.socdem.48,     family=\"binomial\", )) #>  #> Call: #> glm(formula = (truman.dewey == \"Truman\") ~ religious.pref, family = \"binomial\",  #>     data = vote.socdem.48) #>  #> Coefficients: #>                         Estimate Std. Error z value Pr(>|z|)    #> (Intercept)             -0.13134    0.12831  -1.024  0.30604    #> religious.prefCATHOLIC   0.79550    0.24442   3.255  0.00114 ** #> religious.prefJEWISH    16.69740  536.55453   0.031  0.97517    #> religious.prefOTHER     -0.05099    0.61898  -0.082  0.93435    #> religious.prefNONE      -0.20514    0.59943  -0.342  0.73219    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 537.69  on 389  degrees of freedom #> Residual deviance: 500.69  on 385  degrees of freedom #>   (272 observations deleted due to missingness) #> AIC: 510.69 #>  #> Number of Fisher Scoring iterations: 15 #>"},{"path":"https://melff.github.io/mclogit/reference/items-to-vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"How Survey Items Are Converted into ","title":"How Survey Items Are Converted into ","text":"Survey item objects numeric character vectors extra information     may helpful managing documenting survey data, suitable     statistical data analysis. run regressions etc. one convert      item objects \"ordinary\" numeric vectors factors.     means codes values declared \"missing\" (present) translated     generial missing value NA, value labels (defined) translated     factor levels.","code":""},{"path":"https://melff.github.io/mclogit/reference/items-to-vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"How Survey Items Are Converted into ","text":"","code":"# The following methods can be used to covert items into # vectors with a given mode or into factors.  # S4 method for item as.vector(x, mode = \"any\") # S4 method for item as.numeric(x, ...) # S4 method for item as.integer(x, ...) # S4 method for item.vector as.factor(x) # S4 method for item.vector as.ordered(x) # S4 method for item.vector as.character(x, use.labels = TRUE, include.missings = FALSE, ...) # S4 method for datetime.item.vector as.character() # S4 method for Date.item.vector as.character() # The following methods are unlikely to be useful in practice, other than # that they are called internally by the 'as.data.frame()' method for \"data.set\" # objects. # S3 method for character.item as.data.frame(x, row.names = NULL, optional = FALSE, ...) # S3 method for double.item as.data.frame(x, row.names = NULL, optional = FALSE, ...) # S3 method for integer.item as.data.frame(x, row.names = NULL, optional = FALSE, ...) # S3 method for Date.item as.data.frame(x, row.names = NULL, optional = FALSE, ...) # S3 method for datetime.item as.data.frame(x, row.names = NULL, optional = FALSE, ...)"},{"path":"https://melff.github.io/mclogit/reference/items-to-vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"How Survey Items Are Converted into ","text":"x object class \"item\",\"item.vector\", etc., relevant     respective conversion method. mode mode vector returned, usually \"numeric\",     \"integer\", \"charcater\" use.labels logical,value labels used creating     character vector? include.missings logical; TRUE, declared missing values     converted NA, character strings \"*\" \"missingness marker\"     added beginning. row.names optional row names, see .data.frame optional logical value, see .data.frame ... arguments, ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/items-to-vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"How Survey Items Are Converted into ","text":"function .vector() returns logical, numeric, character depending mode= argument. mode=\"\", vector mode corresponds (internal) mode item vector, , item class \"integer.item\" become integer vector, item class \"double.item\" become double-precision numeric vector, item class \"character.item\" become character vector; since internal mode \"dateitem.item\" \"Date.item\" vector numeric, numeric vector returned. functions .integer(), .numeric(), .character(),  .factor(), .ordered() return integer, numeric, character vector, ordered unordered factor, respectively. .data.frame() applied survey item object, result single-column data frame, single column numeric vector character vector factor depending measurement attribute item. particular, measurement attribute equals \"ratio\" \"interval\" column result .vector(), measurement attribute equals \"ordinal\" column ordered factor (see ordered), measurement attribute equals \"nominal\" column unordered factor (see factor). functions common values declared \"missing\" virtue value.filter attribute turned NA.","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/items-to-vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"How Survey Items Are Converted into ","text":"","code":"x <- as.item(rep(1:5,4),       labels=c(           \"First\"      = 1,           \"Second\"     = 2,           \"Third\"      = 3,           \"Fourth\"     = 4,           \"Don't know\" = 5         ),       missing.values=5,       annotation = c(         description=\"test\"       ))   str(x) #>  Nmnl. item w/ 5 labels for 1,2,3,... + ms.v.  int [1:20] 1 2 3 4 5 1 2 3 4 5 ...   summary(x) #>       First      Second       Third      Fourth *Don't know  #>           4           4           4           4           4    as.numeric(x) #>  [1]  1  2  3  4 NA  1  2  3  4 NA  1  2  3  4 NA  1  2  3  4 NA #> attr(,\"label\") #> [1] \"test\"    test <- as.item(rep(1:6,2),labels=structure(1:6,                                       names=letters[1:6]))    as.factor(test) #>  [1] a b c d e f a b c d e f #> Levels: a b c d e f   as.numeric(test) #>  [1] 1 2 3 4 5 6 1 2 3 4 5 6   as.character(test) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"   as.character(test,include.missings=TRUE) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"    as.data.frame(test)[[1]] #>  [1] a b c d e f a b c d e f #> Levels: a b c d e f"},{"path":"https://melff.github.io/mclogit/reference/items.html","id":null,"dir":"Reference","previous_headings":"","what":"Survey Items — items","title":"Survey Items — items","text":"Objects class item data vectors additional information   attached like ``value labels'' ``user-defined missing values''   known software packages like SPSS Stata. class item intended facilitate data management   survey data. Objects class directly used   data analysis. Instead changed \"ordinary\" vectors   factors . see documentation .vector,item-method.","code":""},{"path":"https://melff.github.io/mclogit/reference/items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey Items — items","text":"","code":"## The constructor for objects of class \"item\" ## more convenient than new(\"item\",...) # S4 method for numeric as.item(x,   labels=NULL,  missing.values=NULL,   valid.values=NULL,  valid.range=NULL,   value.filter=NULL,  measurement=NULL,   annotation=attr(x,\"annotation\"), ...   ) # S4 method for character as.item(x,   labels=NULL,  missing.values=NULL,   valid.values=NULL,  valid.range=NULL,   value.filter=NULL,  measurement=NULL,   annotation=attr(x,\"annotation\"), ...   )  # S4 method for logical as.item(x,...) # x is first coerced to integer, # arguments in ... are then passed to the \"numeric\" # method.  # S4 method for factor as.item(x,...) # S4 method for ordered as.item(x,...) # S4 method for POSIXct as.item(x,...)  # S4 method for double.item as.item(x,   labels=NULL,  missing.values=NULL,   valid.values=NULL,  valid.range=NULL,   value.filter=NULL,  measurement=NULL,   annotation=attr(x,\"annotation\"), ...   )  # S4 method for integer.item as.item(x,   labels=NULL,  missing.values=NULL,   valid.values=NULL,  valid.range=NULL,   value.filter=NULL,  measurement=NULL,   annotation=attr(x,\"annotation\"), ...   )  # S4 method for character.item as.item(x,   labels=NULL,  missing.values=NULL,   valid.values=NULL,  valid.range=NULL,   value.filter=NULL,  measurement=NULL,   annotation=attr(x,\"annotation\"), ...   )  # S4 method for datetime.item as.item(x,   labels=NULL,  missing.values=NULL,   valid.values=NULL,  valid.range=NULL,   value.filter=NULL,  measurement=NULL,   annotation=attr(x,\"annotation\"), ...   )"},{"path":"https://melff.github.io/mclogit/reference/items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survey Items — items","text":"x .item methods,   atomic vector;    unique,    summary, str, print, [, <-   methods, vector class labelled. labels named vector mode x. missing.values either vector mode x,     list components \"values\",     vector mode x (defines individual missing values)     \"range\" matrix two rows     mode x (defines range missing values),     object class \"missing.values\". valid.values either vector mode x,     defining values x considered valid,     object class \"valid.values\". valid.range either vector mode x length 2,     defining range valid values x,     object class \"valid.range\". value.filter object class \"value.filter\", ,      classes \"missing.values\", \"valid.values\", \"valid.range\". measurement level measurement; one \"nominal\", \"ordinal\", \"interval\", \"ratio\". annotation named character vector,   object class \"annotation\" ... arguments, ignored.","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survey Items — items","text":"","code":"x <- as.item(rep(1:5,4),       labels=c(           \"First\"      = 1,           \"Second\"     = 2,           \"Third\"      = 3,           \"Fourth\"     = 4,           \"Don't know\" = 5         ),       missing.values=5,       annotation = c(         description=\"test\"       ))   str(x) #>  Nmnl. item w/ 5 labels for 1,2,3,... + ms.v.  int [1:20] 1 2 3 4 5 1 2 3 4 5 ...   summary(x) #>       First      Second       Third      Fourth *Don't know  #>           4           4           4           4           4    as.numeric(x) #>  [1]  1  2  3  4 NA  1  2  3  4 NA  1  2  3  4 NA  1  2  3  4 NA #> attr(,\"label\") #> [1] \"test\"    test <- as.item(rep(1:6,2),labels=structure(1:6,                                       names=letters[1:6]))   test #>  #> Item (measurement: nominal, type: integer, length = 12)  #>  #>  [1:12] a b c d e f a b c d e f   test == 1 #>  [1]  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE   test != 1 #>  [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE   test == \"a\" #>  [1]  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE   test != \"a\" #>  [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE   test == c(\"a\",\"z\") #>  [1]  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE   test != c(\"a\",\"z\") #>  [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE   test  #>  #> Item (measurement: nominal, type: integer, length = 12)  #>  #>  [1:12] a b c d e f a b c d e f   test  #>  #> Item (measurement: nominal, type: integer, length = 12)  #>  #>  [1:12] a b c d e f a b c d e f    codebook(test) #> ================================================================================ #>  #>    test #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                   2    16.7 #>    2 'b'                   2    16.7 #>    3 'c'                   2    16.7 #>    4 'd'                   2    16.7 #>    5 'e'                   2    16.7 #>    6 'f'                   2    16.7 #>     Test <- as.item(rep(letters[1:6],2),                     labels=structure(letters[1:6],                                      names=LETTERS[1:6]))   Test #>  #> Item (measurement: nominal, type: character, length = 12)  #>  #>  [1:12] A B C D E F A B C D E F   Test == \"a\" #>  [1]  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE   Test != \"a\" #>  [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE   Test == \"A\" #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE   Test != \"A\" #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE   Test == c(\"a\",\"z\") #>  [1]  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE   Test != c(\"a\",\"z\") #>  [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE   Test  #>  #> Item (measurement: nominal, type: character, length = 12)  #>  #>  [1:12] A B C D E F A B C D E F   Test  #>  #> Item (measurement: nominal, type: character, length = 12)  #>  #>  [1:12] A B C D E F A B C D E F    as.factor(test) #>  [1] a b c d e f a b c d e f #> Levels: a b c d e f   as.factor(Test) #>  [1] A B C D E F A B C D E F #> Levels: A B C D E F   as.numeric(test) #>  [1] 1 2 3 4 5 6 1 2 3 4 5 6   as.character(test) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"   as.character(Test) #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\"    as.data.frame(test)[[1]] #>  [1] a b c d e f a b c d e f #> Levels: a b c d e f"},{"path":"https://melff.github.io/mclogit/reference/labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Value Labels — labels","title":"Value Labels — labels","text":"Value labels associate character labels possible values encoded survey item. Value labels represented objects class \"value.labels\". Value labels item can obtained using labels(x) can associated items vectors using labels(x) <- value Value labels also can updated using  + - operators.","code":""},{"path":"https://melff.github.io/mclogit/reference/labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value Labels — labels","text":"","code":"labels(object,...) labels(x) <- value"},{"path":"https://melff.github.io/mclogit/reference/labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value Labels — labels","text":"object object. ... arguments methods. x vector \"item\" object. value object class \"value.labels\"     vector can coerced \"value.labels\" object NULL","code":""},{"path":"https://melff.github.io/mclogit/reference/labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value Labels — labels","text":"","code":"x <- as.item(rep(1:5,4),       labels=c(           \"First\"      = 1,           \"Second\"     = 2,           \"Third\"      = 3,           \"Fourth\"     = 4,           \"Don't know\" = 5         ),       missing.values=5,       annotation = c(         description=\"test\"       ))   labels(x) #>  #>  Values and labels: #>  #>    1 'First'      #>    2 'Second'     #>    3 'Third'      #>    4 'Fourth'     #>    5 'Don't know' #>    labels(x) <- labels(x) - c(\"Second\"=2)   labels(x) #>  #>  Values and labels: #>  #>    1 'First'      #>    3 'Third'      #>    4 'Fourth'     #>    5 'Don't know' #>    labels(x) <- labels(x) + c(\"Second\"=2)   labels(x) #>  #>  Values and labels: #>  #>    1 'First'      #>    2 'Second'     #>    3 'Third'      #>    4 'Fourth'     #>    5 'Don't know' #>     puvl <- getOption(\"print.use.value.labels\")   options(print.use.value.labels=FALSE)   x #>  #> Item 'test' (measurement: nominal, type: integer, length = 20)  #>  #>  [1:20] 1 2 3 4 *5 1 2 3 4 *5 1 2 3 4 *5 1 2 3 4 *5   options(print.use.value.labels=TRUE)   x #>  #> Item 'test' (measurement: nominal, type: integer, length = 20)  #>  #>  [1:20] First Second Third Fourth *Don't know First Second Third Fourth ...   options(print.use.value.labels=puvl)"},{"path":"https://melff.github.io/mclogit/reference/measurement-autolevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically Adapt Measurement Levels — measurement_autolevel","title":"Automatically Adapt Measurement Levels — measurement_autolevel","text":"generic function measurement_autolevel changes measurement   levels \"item\" objects \"nominal\" \"ordinal\",   proportion values labels certain   threshold.","code":""},{"path":"https://melff.github.io/mclogit/reference/measurement-autolevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically Adapt Measurement Levels — measurement_autolevel","text":"","code":"measurement_autolevel(x, ...) # S4 method for ANY measurement_autolevel(x, ...) # Returns its argument as is # S4 method for item.vector measurement_autolevel(x,                  to=getOption(\"measurement.adapt.default\",\"nominal\"),                 threshold=getOption(\"measurement.adapt.threshold\",.75),                 ...) # S4 method for data.set measurement_autolevel(x,                  to=getOption(\"measurement.adapt.default\",\"nominal\"),                 threshold=getOption(\"measurement.adapt.threshold\",.75),                 except=NULL,                 only=NULL,                 ...)"},{"path":"https://melff.github.io/mclogit/reference/measurement-autolevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically Adapt Measurement Levels — measurement_autolevel","text":"x object class \"item.vector\" \"data.set\". character vector, target measurement level threshold proportion values, reached target     measurement level set except vector variable names, either symbols     (without quotation marks) character strings (quotation     markes), variables data set     changed measurement_autolevel(). vector variable names, either symbols     (without quotation marks) character strings (quotation     markes), variables data set     changed measurement_autolevel(). ... arguments, currently ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/measurement-autolevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically Adapt Measurement Levels — measurement_autolevel","text":"","code":"exvect <- as.item(rep(1:2,5))  labels(exvect) <- c(a=1,b=2)  codebook(exvect) #> ================================================================================ #>  #>    exvect #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: interval #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                   5    50.0 #>    2 'b'                   5    50.0 #>                                      #>         Min: 1.000                   #>         Max: 2.000                   #>        Mean: 1.500                   #>    Std.Dev.: 0.500                   #>   codebook(measurement_autolevel(exvect)) #> ================================================================================ #>  #>    measurement_autolevel(exvect) #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                   5    50.0 #>    2 'b'                   5    50.0 #>    avect <- as.item(sample(1:3,16,replace=TRUE))  labels(avect) <- c(a=1,b=2,c=3)  bvect <- as.item(sample(1:4,16,replace=TRUE))  labels(bvect) <- c(A=1,B=2,C=3,D=4)  ds <- data.set(a=avect,b=bvect)  codebook(ds) #> ================================================================================ #>  #>    a #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: interval #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                   5    31.2 #>    2 'b'                   6    37.5 #>    3 'c'                   5    31.2 #>                                      #>         Min: 1.000                   #>         Max: 3.000                   #>        Mean: 2.000                   #>    Std.Dev.: 0.791                   #>  #> ================================================================================ #>  #>    b #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: interval #>  #>    Values and labels       N Percent #>                                      #>    1 'A'                   3    18.8 #>    2 'B'                   6    37.5 #>    3 'C'                   3    18.8 #>    4 'D'                   4    25.0 #>                                      #>         Min: 1.000                   #>         Max: 4.000                   #>        Mean: 2.500                   #>    Std.Dev.: 1.061                   #>   codebook(measurement_autolevel(ds)) #> ================================================================================ #>  #>    a #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                   5    31.2 #>    2 'b'                   6    37.5 #>    3 'c'                   5    31.2 #>  #> ================================================================================ #>  #>    b #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'A'                   3    18.8 #>    2 'B'                   6    37.5 #>    3 'C'                   3    18.8 #>    4 'D'                   4    25.0 #>   codebook(measurement_autolevel(ds,except=c(a,b))) #> ================================================================================ #>  #>    a #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: interval #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                   5    31.2 #>    2 'b'                   6    37.5 #>    3 'c'                   5    31.2 #>                                      #>         Min: 1.000                   #>         Max: 3.000                   #>        Mean: 2.000                   #>    Std.Dev.: 0.791                   #>  #> ================================================================================ #>  #>    b #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: interval #>  #>    Values and labels       N Percent #>                                      #>    1 'A'                   3    18.8 #>    2 'B'                   6    37.5 #>    3 'C'                   3    18.8 #>    4 'D'                   4    25.0 #>                                      #>         Min: 1.000                   #>         Max: 4.000                   #>        Mean: 2.500                   #>    Std.Dev.: 1.061                   #>   codebook(measurement_autolevel(ds,only=a)) #> ================================================================================ #>  #>    a #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                   5    31.2 #>    2 'b'                   6    37.5 #>    3 'c'                   5    31.2 #>  #> ================================================================================ #>  #>    b #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: interval #>  #>    Values and labels       N Percent #>                                      #>    1 'A'                   3    18.8 #>    2 'B'                   6    37.5 #>    3 'C'                   3    18.8 #>    4 'D'                   4    25.0 #>                                      #>         Min: 1.000                   #>         Max: 4.000                   #>        Mean: 2.500                   #>    Std.Dev.: 1.061                   #>"},{"path":"https://melff.github.io/mclogit/reference/measurement.html","id":null,"dir":"Reference","previous_headings":"","what":"Levels of Measurement of Survey Items — measurement","title":"Levels of Measurement of Survey Items — measurement","text":"measurement level \"item\" object, one \"nominal\", \"ordinal\", \"interval\", \"ratio\",   determines happens , data.set   containing coerced data.frame.   level measurement level \"nominal\",   converted (unordered) factor, level measurement \"ordinal\",   item converted ordered vector. measurement   \"interval\" \"ratio\", item converted numerical vector.","code":""},{"path":"https://melff.github.io/mclogit/reference/measurement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Levels of Measurement of Survey Items — measurement","text":"","code":"# S4 method for item measurement(x) # S4 method for item measurement(x) <- value # S4 method for data.set measurement(x) # S4 method for data.set measurement(x) <- value is.nominal(x) is.ordinal(x) is.interval(x) is.ratio(x) as.nominal(x) as.ordinal(x) as.interval(x) as.ratio(x) set_measurement(x,...)"},{"path":"https://melff.github.io/mclogit/reference/measurement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Levels of Measurement of Survey Items — measurement","text":"x object, usually class \"item\". value item method,      character string; either \"nominal\", \"ordinal\", \"interval\",     \"ratio\";     data.set method,     list character vectors variable names,     names list corresponds measurement level     list elements indicates variables     measurement levels assigned. ... vectors variable names, either symbols character     strings, tagged intended measurement level.","code":""},{"path":"https://melff.github.io/mclogit/reference/measurement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Levels of Measurement of Survey Items — measurement","text":"item method measurement(x) returns character   string, data.set method returns named character vector,   name element variable name .  .nominal, .ordinal, .interval, .ratio return item requested level measurement setting.  .nominal, .ordinal, .interval, .ratio return logical value.","code":""},{"path":"https://melff.github.io/mclogit/reference/measurement.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Levels of Measurement of Survey Items — measurement","text":"Stevens, Stanley S. 1946. \"theory scales measurement.\" Science 103: 677-680.","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/measurement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Levels of Measurement of Survey Items — measurement","text":"","code":"vote <- sample(c(1,2,3,8,9),size=30,replace=TRUE) labels(vote) <- c(Conservatives         =  1,                   Labour                =  2,                   \"Liberal Democrats\"   =  3,                   \"Don't know\"          =  8,                   \"Answer refused\"      =  9                   ) missing.values(vote) <- c(8,9) as.data.frame(vote)[[1]] #>  [1] Labour            Conservatives     <NA>              Labour            #>  [5] Labour            Labour            Conservatives     Labour            #>  [9] Liberal Democrats Conservatives     <NA>              <NA>              #> [13] Conservatives     <NA>              <NA>              <NA>              #> [17] <NA>              Liberal Democrats Liberal Democrats <NA>              #> [21] Labour            Conservatives     <NA>              Liberal Democrats #> [25] Conservatives     Conservatives     Labour            Labour            #> [29] <NA>              <NA>              #> Levels: Conservatives Labour Liberal Democrats measurement(vote) <- \"interval\" as.data.frame(vote)[[1]] #>  [1]  2  1 NA  2  2  2  1  2  3  1 NA NA  1 NA NA NA NA  3  3 NA  2  1 NA  3  1 #> [26]  1  2  2 NA NA vote <- as.nominal(vote) as.data.frame(vote)[[1]] #>  [1] Labour            Conservatives     <NA>              Labour            #>  [5] Labour            Labour            Conservatives     Labour            #>  [9] Liberal Democrats Conservatives     <NA>              <NA>              #> [13] Conservatives     <NA>              <NA>              <NA>              #> [17] <NA>              Liberal Democrats Liberal Democrats <NA>              #> [21] Labour            Conservatives     <NA>              Liberal Democrats #> [25] Conservatives     Conservatives     Labour            Labour            #> [29] <NA>              <NA>              #> Levels: Conservatives Labour Liberal Democrats group <- sample(c(1,2),size=30,replace=TRUE) labels(group) <- c(A=1,B=2) DataS <- data.set(group,vote) measurement(DataS) #> NULL measurement(DataS) <- list(interval=c(\"group\",\"vote\")) head(as.data.frame(DataS)) #>   group vote #> 1     1    2 #> 2     1    1 #> 3     2   NA #> 4     1    2 #> 5     1    2 #> 6     2    2 DataS <- set_measurement(DataS,                          nominal=c(group,vote)) head(as.data.frame(DataS)) #>   group          vote #> 1     A        Labour #> 2     A Conservatives #> 3     B          <NA> #> 4     A        Labour #> 5     A        Labour #> 6     B        Labour"},{"path":"https://melff.github.io/mclogit/reference/memisc-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated Functions in Package memisc — memisc-deprecated","title":"Deprecated Functions in Package memisc — memisc-deprecated","text":"functions provided compatibility older versions   memisc , may defunct soon next release.","code":""},{"path":"https://melff.github.io/mclogit/reference/memisc-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated Functions in Package memisc — memisc-deprecated","text":"","code":"fapply(formula,data,...) # calls UseMethod(\"fapply\",data) # S3 method for default fapply(formula, data, subset=NULL,       names=NULL, addFreq=TRUE,...)"},{"path":"https://melff.github.io/mclogit/reference/memisc-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated Functions in Package memisc — memisc-deprecated","text":"formula formula. right hand side includes one   grouping variables separated '+'. may factors, numeric,   character vectors. left hand side may empty,   numerical variable, factor, expression.   See details . data environment data frame object coercable data frame. subset optional vector specifying subset observations     used. names optional character vector giving names     result(s) yielded expression left hand side formula.     argument may redundant left hand side results named vector.     (See example .) addFreq logical value. TRUE       data table data frame variable       named \"Freq\", call       table, Table, percent, nvalid       supplied additional argument Freq       call table translated       call Table. ... arguments, passed methods ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable-format-delim.html","id":null,"dir":"Reference","previous_headings":"","what":"Format for 'mtable' Objects for Writing into File — mtable_format_delim","title":"Format for 'mtable' Objects for Writing into File — mtable_format_delim","text":"mtable_mtable_print formats 'mtable' way suitable output file   write.table","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable-format-delim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format for 'mtable' Objects for Writing into File — mtable_format_delim","text":"","code":"mtable_format_delim(x,           colsep=\"\\t\",           rowsep=\"\\n\",           interaction.sep = \" x \",           ...           )"},{"path":"https://melff.github.io/mclogit/reference/mtable-format-delim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format for 'mtable' Objects for Writing into File — mtable_format_delim","text":"x object class mtable colsep character string seperates columns output. rowsep character string seperates rows output. interaction.sep character string separates factors involved         interaction effect ... arguments, ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable-format-delim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format for 'mtable' Objects for Writing into File — mtable_format_delim","text":"character string.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable-format-html.html","id":null,"dir":"Reference","previous_headings":"","what":"HTML Formatting for 'mtable' Results — mtable_format_html","title":"HTML Formatting for 'mtable' Results — mtable_format_html","text":"functions formats 'mtable' objects HTML format.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable-format-html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTML Formatting for 'mtable' Results — mtable_format_html","text":"","code":"mtable_format_html(x,                     interaction.sep = NULL,                     toprule=2,midrule=1,bottomrule=2,                     split.dec=TRUE,                     style=mtable_format_stdstyle,                     margin=\"2ex auto\",                      sig.notes.style=c(width=\"inherit\"),                     ...   ) # S3 method for memisc_mtable format_html(x,                     interaction.sep = NULL,                     toprule=2,midrule=1,bottomrule=2,                     split.dec=TRUE,                     style=mtable_format_stdstyle,                     margin=\"2ex auto\",                      sig.notes.style=c(width=\"inherit\"),                     ...   )"},{"path":"https://melff.github.io/mclogit/reference/mtable-format-html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTML Formatting for 'mtable' Results — mtable_format_html","text":"x object class mtable toprule integer;      thickness pixels rule top table. midrule integer;      thickness pixels rules within table. bottomrule integer;      thickness pixels rule bottom table. interaction.sep character string separates factors involved         interaction effect NULL. NULL reasonable default used         (either unicode character ampersand encoded HTML entity). split.dec logical; whether numbers centered     decimal point splitting table cells. style string containing default CSS styling. margin character string, determines margin thus       position HTML table. sig.notes.style character vector named elements,            allows extra styling p-values notes bottom            table. ... arguments, ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable-format-html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HTML Formatting for 'mtable' Results — mtable_format_html","text":"character string code suitable inclusion HTML-file.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable-format-html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTML Formatting for 'mtable' Results — mtable_format_html","text":"","code":"lm0 <- lm(sr ~ pop15 + pop75,              data = LifeCycleSavings) lm1 <- lm(sr ~                 dpi + ddpi, data = LifeCycleSavings) lm2 <- lm(sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings)  mtable123 <- mtable(\"Model 1\"=lm0,\"Model 2\"=lm1,\"Model 3\"=lm2,                     summary.stats=c(\"sigma\",\"R-squared\",\"F\",\"p\",\"N\"))  (mtable123 <- relabel(mtable123,                       \"(Intercept)\" = \"Constant\",                       pop15 = \"Percentage of population under 15\",                       pop75 = \"Percentage of population over 75\",                       dpi = \"Real per-capita disposable income\",                       ddpi = \"Growth rate of real per-capita disp. income\" )) #>  #> Calls: #> Model 1: lm(formula = sr ~ pop15 + pop75, data = LifeCycleSavings) #> Model 2: lm(formula = sr ~ dpi + ddpi, data = LifeCycleSavings) #> Model 3: lm(formula = sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings) #>  #> ================================================================================ #>                                                 Model 1    Model 2    Model 3    #> -------------------------------------------------------------------------------- #>   Constant                                     30.628***   6.360***  28.566***   #>                                                (7.409)    (1.252)    (7.355)     #>   Percentage of population under 15            -0.471**              -0.461**    #>                                                (0.147)               (0.145)     #>   Percentage of population over 75             -1.934                -1.691      #>                                                (1.041)               (1.084)     #>   Real per-capita disposable income                        0.001     -0.000      #>                                                           (0.001)    (0.001)     #>   Growth rate of real per-capita disp. income              0.529*     0.410*     #>                                                           (0.210)    (0.196)     #> -------------------------------------------------------------------------------- #>   sigma                                         3.931      4.189      3.803      #>   R-squared                                     0.262      0.162      0.338      #>   F                                             8.332      4.528      5.756      #>   p                                             0.001      0.016      0.001      #>   N                                            50         50         50          #> ================================================================================ #>   Significance: *** = p < 0.001; ** = p < 0.01; * = p < 0.05    # Use HTML entity '&minus;' for minus sign options(html.use.ampersand=TRUE) show_html(mtable123) #> <style> #>       table#mtable-1 { #>          border-collapse: collapse; border-style: none; margin: 2ex auto; #>       }  #>       table#mtable-1 tr { #>           border-style: none; #>       }  #>       table#mtable-1 td { #>         padding-top: 1px;  #>         padding-bottom: 1px;  #>         padding-left: 0.5ex;  #>         padding-right: 0.5ex;  #>         margin: 0px;  #>         margin-top: 0px; #>         margin-bottom: 0px; #>         border-style: none;  #>         border-width: 0px;  #>       } #> table#mtable-1 tr:nth-child(1){ #>      border-top: 2px solid; #> } #> table#mtable-1 tr:nth-child(1), #> table#mtable-1 tr:nth-child(11){ #>      border-bottom: 1px solid; #> } #> table#mtable-1 tr:nth-child(16){ #>      border-bottom: 2px solid; #> } table#mtable-1 td:nth-child(3), #> table#mtable-1 td:nth-child(6), #> table#mtable-1 td:nth-child(9){ #>          padding-left: 0px; #>          padding-right: 0px; #>          text-align: center;  #>          /*background-color: blue;*/ #>         } table#mtable-1 td:nth-child(2), #> table#mtable-1 td:nth-child(5), #> table#mtable-1 td:nth-child(8){ #>          padding-left: 0.5ex; #>          padding-right: 0px; #>          text-align: right;  #>          /*background-color: red;*/ #>         } table#mtable-1 td:nth-child(4), #> table#mtable-1 td:nth-child(7), #> table#mtable-1 td:nth-child(10){ #>          padding-left: 0px; #>          padding-right: 0.5ex; #>          text-align: left;  #>          /*background-color: green;*/ #>         }  #> table#mtable-1 td:nth-child(n of .header){ #>          padding-left: 0.5ex; #>          padding-right: 0.5ex; #>          text-align: center;  #>          /*background-color: gray;*/ #>         }  #> <\/style> #> <table id=\"mtable-1\"> #> <tr><td colspan=\"1\" class=\"header\"><\/td><td colspan=\"3\" class=\"header\">Model 1<\/td><td colspan=\"3\" class=\"header\">Model 2<\/td><td colspan=\"3\" class=\"header\">Model 3<\/td><\/tr> #> <tr><td>Constant<\/td><td>30<\/td><td>.<\/td><td>628<span class=\"signif.symbol\">***<\/span><\/td><td>6<\/td><td>.<\/td><td>360<span class=\"signif.symbol\">***<\/span><\/td><td>28<\/td><td>.<\/td><td>566<span class=\"signif.symbol\">***<\/span><\/td><\/tr> #> <tr><td><\/td><td>(7<\/td><td>.<\/td><td>409)<\/td><td>(1<\/td><td>.<\/td><td>252)<\/td><td>(7<\/td><td>.<\/td><td>355)<\/td><\/tr> #> <tr><td>Percentage of population under 15<\/td><td>&minus;0<\/td><td>.<\/td><td>471<span class=\"signif.symbol\">**<\/span><\/td><td><\/td><td><\/td><td><\/td><td>&minus;0<\/td><td>.<\/td><td>461<span class=\"signif.symbol\">**<\/span><\/td><\/tr> #> <tr><td><\/td><td>(0<\/td><td>.<\/td><td>147)<\/td><td><\/td><td><\/td><td><\/td><td>(0<\/td><td>.<\/td><td>145)<\/td><\/tr> #> <tr><td>Percentage of population over 75<\/td><td>&minus;1<\/td><td>.<\/td><td>934<\/td><td><\/td><td><\/td><td><\/td><td>&minus;1<\/td><td>.<\/td><td>691<\/td><\/tr> #> <tr><td><\/td><td>(1<\/td><td>.<\/td><td>041)<\/td><td><\/td><td><\/td><td><\/td><td>(1<\/td><td>.<\/td><td>084)<\/td><\/tr> #> <tr><td>Real per-capita disposable income<\/td><td><\/td><td><\/td><td><\/td><td>0<\/td><td>.<\/td><td>001<\/td><td>&minus;0<\/td><td>.<\/td><td>000<\/td><\/tr> #> <tr><td><\/td><td><\/td><td><\/td><td><\/td><td>(0<\/td><td>.<\/td><td>001)<\/td><td>(0<\/td><td>.<\/td><td>001)<\/td><\/tr> #> <tr><td>Growth rate of real per-capita disp. income<\/td><td><\/td><td><\/td><td><\/td><td>0<\/td><td>.<\/td><td>529<span class=\"signif.symbol\">*<\/span><\/td><td>0<\/td><td>.<\/td><td>410<span class=\"signif.symbol\">*<\/span><\/td><\/tr> #> <tr><td><\/td><td><\/td><td><\/td><td><\/td><td>(0<\/td><td>.<\/td><td>210)<\/td><td>(0<\/td><td>.<\/td><td>196)<\/td><\/tr> #> <tr><td>sigma<\/td><td>3<\/td><td>.<\/td><td>931<\/td><td>4<\/td><td>.<\/td><td>189<\/td><td>3<\/td><td>.<\/td><td>803<\/td><\/tr> #> <tr><td>R-squared<\/td><td>0<\/td><td>.<\/td><td>262<\/td><td>0<\/td><td>.<\/td><td>162<\/td><td>0<\/td><td>.<\/td><td>338<\/td><\/tr> #> <tr><td>F<\/td><td>8<\/td><td>.<\/td><td>332<\/td><td>4<\/td><td>.<\/td><td>528<\/td><td>5<\/td><td>.<\/td><td>756<\/td><\/tr> #> <tr><td>p<\/td><td>0<\/td><td>.<\/td><td>001<\/td><td>0<\/td><td>.<\/td><td>016<\/td><td>0<\/td><td>.<\/td><td>001<\/td><\/tr> #> <tr><td>N<\/td><td>50<\/td><td><\/td><td><\/td><td>50<\/td><td><\/td><td><\/td><td>50<\/td><td><\/td><td><\/td><\/tr> #> <tr><td colspan=\"10\"><p>Significance: *** = p &lt; 0.001; ** = p &lt; 0.01; * = p &lt; 0.05<\/p> #> <\/td><\/tr> #> <\/table> show_html(mtable123[1:2],           sig.notes.style=c(width=\"30ex\")) #> <style> #>       table#mtable-2 { #>          border-collapse: collapse; border-style: none; margin: 2ex auto; #>       }  #>       table#mtable-2 tr { #>           border-style: none; #>       }  #>       table#mtable-2 td { #>         padding-top: 1px;  #>         padding-bottom: 1px;  #>         padding-left: 0.5ex;  #>         padding-right: 0.5ex;  #>         margin: 0px;  #>         margin-top: 0px; #>         margin-bottom: 0px; #>         border-style: none;  #>         border-width: 0px;  #>       } #> table#mtable-2 tr:nth-child(1){ #>      border-top: 2px solid; #> } #> table#mtable-2 tr:nth-child(1), #> table#mtable-2 tr:nth-child(11){ #>      border-bottom: 1px solid; #> } #> table#mtable-2 tr:nth-child(16){ #>      border-bottom: 2px solid; #> } table#mtable-2 td:nth-child(3), #> table#mtable-2 td:nth-child(6){ #>          padding-left: 0px; #>          padding-right: 0px; #>          text-align: center;  #>          /*background-color: blue;*/ #>         } table#mtable-2 td:nth-child(2), #> table#mtable-2 td:nth-child(5){ #>          padding-left: 0.5ex; #>          padding-right: 0px; #>          text-align: right;  #>          /*background-color: red;*/ #>         } table#mtable-2 td:nth-child(4), #> table#mtable-2 td:nth-child(7){ #>          padding-left: 0px; #>          padding-right: 0.5ex; #>          text-align: left;  #>          /*background-color: green;*/ #>         }  #> table#mtable-2 td:nth-child(n of .header){ #>          padding-left: 0.5ex; #>          padding-right: 0.5ex; #>          text-align: center;  #>          /*background-color: gray;*/ #>         }  #> <\/style> #> <table id=\"mtable-2\"> #> <tr><td colspan=\"1\" class=\"header\"><\/td><td colspan=\"3\" class=\"header\">Model 1<\/td><td colspan=\"3\" class=\"header\">Model 2<\/td><\/tr> #> <tr><td>Constant<\/td><td>30<\/td><td>.<\/td><td>628<span class=\"signif.symbol\">***<\/span><\/td><td>6<\/td><td>.<\/td><td>360<span class=\"signif.symbol\">***<\/span><\/td><\/tr> #> <tr><td><\/td><td>(7<\/td><td>.<\/td><td>409)<\/td><td>(1<\/td><td>.<\/td><td>252)<\/td><\/tr> #> <tr><td>Percentage of population under 15<\/td><td>&minus;0<\/td><td>.<\/td><td>471<span class=\"signif.symbol\">**<\/span><\/td><td><\/td><td><\/td><td><\/td><\/tr> #> <tr><td><\/td><td>(0<\/td><td>.<\/td><td>147)<\/td><td><\/td><td><\/td><td><\/td><\/tr> #> <tr><td>Percentage of population over 75<\/td><td>&minus;1<\/td><td>.<\/td><td>934<\/td><td><\/td><td><\/td><td><\/td><\/tr> #> <tr><td><\/td><td>(1<\/td><td>.<\/td><td>041)<\/td><td><\/td><td><\/td><td><\/td><\/tr> #> <tr><td>Real per-capita disposable income<\/td><td><\/td><td><\/td><td><\/td><td>0<\/td><td>.<\/td><td>001<\/td><\/tr> #> <tr><td><\/td><td><\/td><td><\/td><td><\/td><td>(0<\/td><td>.<\/td><td>001)<\/td><\/tr> #> <tr><td>Growth rate of real per-capita disp. income<\/td><td><\/td><td><\/td><td><\/td><td>0<\/td><td>.<\/td><td>529<span class=\"signif.symbol\">*<\/span><\/td><\/tr> #> <tr><td><\/td><td><\/td><td><\/td><td><\/td><td>(0<\/td><td>.<\/td><td>210)<\/td><\/tr> #> <tr><td>sigma<\/td><td>3<\/td><td>.<\/td><td>931<\/td><td>4<\/td><td>.<\/td><td>189<\/td><\/tr> #> <tr><td>R-squared<\/td><td>0<\/td><td>.<\/td><td>262<\/td><td>0<\/td><td>.<\/td><td>162<\/td><\/tr> #> <tr><td>F<\/td><td>8<\/td><td>.<\/td><td>332<\/td><td>4<\/td><td>.<\/td><td>528<\/td><\/tr> #> <tr><td>p<\/td><td>0<\/td><td>.<\/td><td>001<\/td><td>0<\/td><td>.<\/td><td>016<\/td><\/tr> #> <tr><td>N<\/td><td>50<\/td><td><\/td><td><\/td><td>50<\/td><td><\/td><td><\/td><\/tr> #> <tr><td colspan=\"7\"><p>Significance: *** = p &lt; 0.001; ** = p &lt; 0.01; * = p &lt; 0.05<\/p> #> <\/td><\/tr> #> <\/table>  # Use unicode for minus sign (default) options(html.use.ampersand=FALSE) show_html(mtable123) #> <style> #>       table#mtable-3 { #>          border-collapse: collapse; border-style: none; margin: 2ex auto; #>       }  #>       table#mtable-3 tr { #>           border-style: none; #>       }  #>       table#mtable-3 td { #>         padding-top: 1px;  #>         padding-bottom: 1px;  #>         padding-left: 0.5ex;  #>         padding-right: 0.5ex;  #>         margin: 0px;  #>         margin-top: 0px; #>         margin-bottom: 0px; #>         border-style: none;  #>         border-width: 0px;  #>       } #> table#mtable-3 tr:nth-child(1){ #>      border-top: 2px solid; #> } #> table#mtable-3 tr:nth-child(1), #> table#mtable-3 tr:nth-child(11){ #>      border-bottom: 1px solid; #> } #> table#mtable-3 tr:nth-child(16){ #>      border-bottom: 2px solid; #> } table#mtable-3 td:nth-child(3), #> table#mtable-3 td:nth-child(6), #> table#mtable-3 td:nth-child(9){ #>          padding-left: 0px; #>          padding-right: 0px; #>          text-align: center;  #>          /*background-color: blue;*/ #>         } table#mtable-3 td:nth-child(2), #> table#mtable-3 td:nth-child(5), #> table#mtable-3 td:nth-child(8){ #>          padding-left: 0.5ex; #>          padding-right: 0px; #>          text-align: right;  #>          /*background-color: red;*/ #>         } table#mtable-3 td:nth-child(4), #> table#mtable-3 td:nth-child(7), #> table#mtable-3 td:nth-child(10){ #>          padding-left: 0px; #>          padding-right: 0.5ex; #>          text-align: left;  #>          /*background-color: green;*/ #>         }  #> table#mtable-3 td:nth-child(n of .header){ #>          padding-left: 0.5ex; #>          padding-right: 0.5ex; #>          text-align: center;  #>          /*background-color: gray;*/ #>         }  #> <\/style> #> <table id=\"mtable-3\"> #> <tr><td colspan=\"1\" class=\"header\"><\/td><td colspan=\"3\" class=\"header\">Model 1<\/td><td colspan=\"3\" class=\"header\">Model 2<\/td><td colspan=\"3\" class=\"header\">Model 3<\/td><\/tr> #> <tr><td>Constant<\/td><td>30<\/td><td>.<\/td><td>628<span class=\"signif.symbol\">***<\/span><\/td><td>6<\/td><td>.<\/td><td>360<span class=\"signif.symbol\">***<\/span><\/td><td>28<\/td><td>.<\/td><td>566<span class=\"signif.symbol\">***<\/span><\/td><\/tr> #> <tr><td><\/td><td>(7<\/td><td>.<\/td><td>409)<\/td><td>(1<\/td><td>.<\/td><td>252)<\/td><td>(7<\/td><td>.<\/td><td>355)<\/td><\/tr> #> <tr><td>Percentage of population under 15<\/td><td>−0<\/td><td>.<\/td><td>471<span class=\"signif.symbol\">**<\/span><\/td><td><\/td><td><\/td><td><\/td><td>−0<\/td><td>.<\/td><td>461<span class=\"signif.symbol\">**<\/span><\/td><\/tr> #> <tr><td><\/td><td>(0<\/td><td>.<\/td><td>147)<\/td><td><\/td><td><\/td><td><\/td><td>(0<\/td><td>.<\/td><td>145)<\/td><\/tr> #> <tr><td>Percentage of population over 75<\/td><td>−1<\/td><td>.<\/td><td>934<\/td><td><\/td><td><\/td><td><\/td><td>−1<\/td><td>.<\/td><td>691<\/td><\/tr> #> <tr><td><\/td><td>(1<\/td><td>.<\/td><td>041)<\/td><td><\/td><td><\/td><td><\/td><td>(1<\/td><td>.<\/td><td>084)<\/td><\/tr> #> <tr><td>Real per-capita disposable income<\/td><td><\/td><td><\/td><td><\/td><td>0<\/td><td>.<\/td><td>001<\/td><td>−0<\/td><td>.<\/td><td>000<\/td><\/tr> #> <tr><td><\/td><td><\/td><td><\/td><td><\/td><td>(0<\/td><td>.<\/td><td>001)<\/td><td>(0<\/td><td>.<\/td><td>001)<\/td><\/tr> #> <tr><td>Growth rate of real per-capita disp. income<\/td><td><\/td><td><\/td><td><\/td><td>0<\/td><td>.<\/td><td>529<span class=\"signif.symbol\">*<\/span><\/td><td>0<\/td><td>.<\/td><td>410<span class=\"signif.symbol\">*<\/span><\/td><\/tr> #> <tr><td><\/td><td><\/td><td><\/td><td><\/td><td>(0<\/td><td>.<\/td><td>210)<\/td><td>(0<\/td><td>.<\/td><td>196)<\/td><\/tr> #> <tr><td>sigma<\/td><td>3<\/td><td>.<\/td><td>931<\/td><td>4<\/td><td>.<\/td><td>189<\/td><td>3<\/td><td>.<\/td><td>803<\/td><\/tr> #> <tr><td>R-squared<\/td><td>0<\/td><td>.<\/td><td>262<\/td><td>0<\/td><td>.<\/td><td>162<\/td><td>0<\/td><td>.<\/td><td>338<\/td><\/tr> #> <tr><td>F<\/td><td>8<\/td><td>.<\/td><td>332<\/td><td>4<\/td><td>.<\/td><td>528<\/td><td>5<\/td><td>.<\/td><td>756<\/td><\/tr> #> <tr><td>p<\/td><td>0<\/td><td>.<\/td><td>001<\/td><td>0<\/td><td>.<\/td><td>016<\/td><td>0<\/td><td>.<\/td><td>001<\/td><\/tr> #> <tr><td>N<\/td><td>50<\/td><td><\/td><td><\/td><td>50<\/td><td><\/td><td><\/td><td>50<\/td><td><\/td><td><\/td><\/tr> #> <tr><td colspan=\"10\"><p>Significance: *** = p &lt; 0.001; ** = p &lt; 0.01; * = p &lt; 0.05<\/p> #> <\/td><\/tr> #> <\/table>"},{"path":"https://melff.github.io/mclogit/reference/mtable-format-latex.html","id":null,"dir":"Reference","previous_headings":"","what":"Format 'mtable' Results for LaTeX — mtable_format_latex","title":"Format 'mtable' Results for LaTeX — mtable_format_latex","text":"function formats objects created mtable inclusion   LaTeX files.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable-format-latex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format 'mtable' Results for LaTeX — mtable_format_latex","text":"","code":"mtable_format_latex(x,             useDcolumn=getOption(\"useDcolumn\",TRUE),             colspec=if(useDcolumn)                        paste(\"D{.}{\",LaTeXdec,\"}{\",ddigits,\"}\",sep=\"\")                      else \"l\",             LaTeXdec=\".\",             ddigits=min(3,getOption(\"digits\")),             useBooktabs=getOption(\"useBooktabs\",TRUE),             toprule=if(useBooktabs) \"\\\\toprule\" else \"\\\\hline\\\\hline\",             midrule=if(useBooktabs) \"\\\\midrule\" else \"\\\\hline\",             cmidrule=if(useBooktabs) \"\\\\cmidrule\" else \"\\\\cline\",             bottomrule=if(useBooktabs) \"\\\\bottomrule\" else \"\\\\hline\\\\hline\",             interaction.sep = \" $\\\\times$ \",             sdigits=min(1,ddigits),             compact=FALSE,             sumry.multicol=FALSE,             escape.tex=getOption(\"toLatex.escape.tex\",FALSE),             signif.notes.type=getOption(\"toLatex.signif.notes.type\",\"include\"),             signif.notes.spec=getOption(\"toLatex.signif.notes.spec\",\"p{.5\\\\linewidth}\"),             ...   )"},{"path":"https://melff.github.io/mclogit/reference/mtable-format-latex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format 'mtable' Results for LaTeX — mtable_format_latex","text":"x object class mtable useDcolumn dcolumn LaTeX package used?           true, include \\usepackage{dcolumn}           preamble LaTeX document. colspec LaTeX table column format specifyer(s). LaTeXdec decimal point final LaTeX output. ddigits alignment specification digits decimal point. useBooktabs booktabs LaTeX package used?           true, include \\usepackage{booktabs}           preamble LaTeX document. toprule appearance top border LaTeX tabular environment. midrule coefficients summary statistics         separated LaTeX tabular environment. cmidrule appearance rules section headings. bottomrule appearance bottom border LaTeX tabular environment. interaction.sep character string separates factors involved         interaction effect sdigits integer; number digits decimal dot summary statistics. compact logical; table compact, without extra columns     multi-equation models? sumry.multicol logical, summaries enclosed       \\multicol commands? escape.tex logical, symbols $, _, ^ \t\t\tescaped backslashes? signif.notes.type character string; either       \"include\",\"append\", \"drop\",  \"tnotes\".       \"append\", (simple) LaTeX code appended contains       notes relate significance symbols p-values.       \"include\", LaTeX table include (multi-column)       cell notes. \"drop\", notes added.       \"tnotes\", exported LaTeX       table wrapped threeparttable environment       p-value notes wrapped tablenotes environment.       requires LaTeX package threeparttable order work. signif.notes.spec character string; specifies format       cells include notes p-values; relevant       signif.notes.type=\"include\" ... arguments, ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable-format-latex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format 'mtable' Results for LaTeX — mtable_format_latex","text":"character string code suitable inclusion LaTeX-file.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable-format-print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Format for 'mtable' Objects — mtable_format_print","title":"Print Format for 'mtable' Objects — mtable_format_print","text":"mtable_format_print formats 'mtable' way suitable screen output   'print'.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable-format-print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Format for 'mtable' Objects — mtable_format_print","text":"","code":"mtable_format_print(x,   topsep=\"=\",   bottomsep=\"=\",   sectionsep=\"-\",   interaction.sep = \" x \",   center.at=getOption(\"OutDec\"),   align.integers=c(\"dot\",\"right\",\"left\"),   padding = \"  \",   ...   )"},{"path":"https://melff.github.io/mclogit/reference/mtable-format-print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Format for 'mtable' Objects — mtable_format_print","text":"x object class mtable topsep character string recycled top rule. bottomsep character string recycled bottom rule. sectionsep character string recycled seperate coefficients         summary statistics. interaction.sep character string separates factors involved         interaction effect center.character string resulting values centered.         Typically equal \".\". default forLaTeX==TRUE.         NULL, reported values centered. align.integers align integer values. padding character string, usually whitespace, used insert left- right-padding          table contents. ... arguments, ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable-format-print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Format for 'mtable' Objects — mtable_format_print","text":"character string.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparative Table of Model Estimates — mtable","title":"Comparative Table of Model Estimates — mtable","text":"mtable produces table estimates several models.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparative Table of Model Estimates — mtable","text":"","code":"mtable(...,coef.style=getOption(\"coef.style\"),     summary.stats=TRUE,     signif.symbols=getOption(\"signif.symbols\"),     factor.style=getOption(\"factor.style\"),     show.baselevel=getOption(\"show.baselevel\"),     baselevel.sep=getOption(\"baselevel.sep\"),     getSummary=eval.parent(quote(getSummary)),     float.style=getOption(\"float.style\"),     digits=min(3,getOption(\"digits\")),     sdigits=digits,     show.eqnames=getOption(\"mtable.show.eqnames\",NA),     gs.options=NULL,     controls=NULL,     collapse.controls=FALSE,     control.var.indicator=getOption(\"control.var.indicator\",c(\"Yes\",\"No\"))   ) # S3 method for memisc_mtable relabel(x, ..., gsub = FALSE, fixed = !gsub, warn = FALSE)  # S3 method for memisc_mtable format(x,target=c(\"print\",\"LaTeX\",\"HTML\",\"delim\"),     ...     )  # S3 method for memisc_mtable print(x,     center.at=getOption(\"OutDec\"),     topsep=\"=\",bottomsep=\"=\",sectionsep=\"-\",...)  write.mtable(object,file=\"\",              format=c(\"delim\",\"LaTeX\",\"HTML\"),...)  # S3 method for memisc_mtable toLatex(object,...)"},{"path":"https://melff.github.io/mclogit/reference/mtable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparative Table of Model Estimates — mtable","text":"... argument mtable: several model objects, e.g. class       lm; argument print.memisc_mtable,      toLatex.memisc_mtable, write.memisc_mtable: arguments      passed format.memisc_mtable; argument format.memisc_mtable:      arguments passed format.default;      argument relabel.memisc_mtable: arguments      passed dimrename. coef.style character string specifies style         coefficient values, whether standard errors, Wald/t-statistics,          significance levels reported, etc. See coef.style. summary.stats FALSE, summary statistics        repored. TRUE object ...        either summary statistics reported, specified        option \"summary.stats.<cls>\", <cls>        class respective object. argument may also contain character vector        names summary statistics report, list        character vectors names summary statistics        object passed argument .... signif.symbols named numeric vector specify           \"significance levels\" corresponding symbols.            numeric elements define significance levels,           attached names define associated symbols. factor.style character string specifies style         factor contrasts labled. See factor.style. show.baselevel logical; determines whether base levels factors indicated       dummy coefficients baselevel.sep character used separate base level             level dummy variable represents getSummary function computes model-related statistics         appear table. See getSummary. float.style default format floating point numbers         format specified coef.style . digits number significant digits specified         template returned getCoefTemplate         getSummaryTemplate sdigits integer; number digits decimal dot \t\t\t summary statistics. show.eqnames logical; TRUE, left-hand sides \t\t   equations (always) shown table header; \t\t\t FALSE, left-hand sides \t\t   equations shown; \t\t\t NA, left-hand sides \t\t   equations shown left-hand sides differ \t\t\t among models one models multiple equations. gs.options optional list arguments passed        getSummary controls optional formula character vector        designates \"control variables\" coefficients        reported, whether present model. collapse.controls logical values; report        inclusion control variables collapsed single value?        yes, models either contain none control        variables. control.var.indicator character vector elements; first element used        indicate presence control variable        control variables (collapse.controls=TRUE), second        element used otherwise. default elements        \"Yes\" \"\". x, object object class mtable gsub, warn, fixed logical values, see relabel target character string indicates target format.      Currenlty targets      \"print\" (see mtable_format_print),      \"LaTeX\" (see mtable_format_latex),      \"HTML\" (see mtable_format_html),      \"delim\" (see mtable_format_delim)      supported. center.character string resulting values centered.         Typically equal \".\". default forLaTeX==TRUE.         NULL, reported values centered. topsep character string recycled top rule. bottomsep character string recycled bottom rule. sectionsep character string recycled seperate coefficients         summary statistics. file name file write ; defaults console output. format character string specifies desired format.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparative Table of Model Estimates — mtable","text":"mtable constructs table estimates regression-type models.   format.memisc_mtable formats suitable use output conversion functions   print.memisc_mtable, toLatex.memisc_mtable,   write.memisc_mtable.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparative Table of Model Estimates — mtable","text":"call mtable results object class \"mtable\" following components: coefficients list contains model coefficients, summaries matrix contains model summaries, calls list calls created model estimates           summarised.","code":""},{"path":"https://melff.github.io/mclogit/reference/mtable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparative Table of Model Estimates — mtable","text":"","code":"#### Basic workflow  lm0 <- lm(sr ~ pop15 + pop75,              data = LifeCycleSavings) lm1 <- lm(sr ~                 dpi + ddpi, data = LifeCycleSavings) lm2 <- lm(sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings)  options(summary.stats.lm=c(\"R-squared\",\"N\")) mtable(\"Model 1\"=lm0,\"Model 2\"=lm1,\"Model 3\"=lm2) #>  #> Calls: #> Model 1: lm(formula = sr ~ pop15 + pop75, data = LifeCycleSavings) #> Model 2: lm(formula = sr ~ dpi + ddpi, data = LifeCycleSavings) #> Model 3: lm(formula = sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings) #>  #> ================================================ #>                 Model 1    Model 2    Model 3    #> ------------------------------------------------ #>   (Intercept)  30.628***   6.360***  28.566***   #>                (7.409)    (1.252)    (7.355)     #>   pop15        -0.471**              -0.461**    #>                (0.147)               (0.145)     #>   pop75        -1.934                -1.691      #>                (1.041)               (1.084)     #>   dpi                      0.001     -0.000      #>                           (0.001)    (0.001)     #>   ddpi                     0.529*     0.410*     #>                           (0.210)    (0.196)     #> ------------------------------------------------ #>   R-squared     0.262      0.162      0.338      #>   N            50         50         50          #> ================================================ #>   Significance: *** = p < 0.001;    #>                 ** = p < 0.01; * = p < 0.05    options(summary.stats.lm=c(\"sigma\",\"R-squared\",\"N\")) mtable(\"Model 1\"=lm0,\"Model 2\"=lm1,\"Model 3\"=lm2) #>  #> Calls: #> Model 1: lm(formula = sr ~ pop15 + pop75, data = LifeCycleSavings) #> Model 2: lm(formula = sr ~ dpi + ddpi, data = LifeCycleSavings) #> Model 3: lm(formula = sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings) #>  #> ================================================ #>                 Model 1    Model 2    Model 3    #> ------------------------------------------------ #>   (Intercept)  30.628***   6.360***  28.566***   #>                (7.409)    (1.252)    (7.355)     #>   pop15        -0.471**              -0.461**    #>                (0.147)               (0.145)     #>   pop75        -1.934                -1.691      #>                (1.041)               (1.084)     #>   dpi                      0.001     -0.000      #>                           (0.001)    (0.001)     #>   ddpi                     0.529*     0.410*     #>                           (0.210)    (0.196)     #> ------------------------------------------------ #>   sigma         3.931      4.189      3.803      #>   R-squared     0.262      0.162      0.338      #>   N            50         50         50          #> ================================================ #>   Significance: *** = p < 0.001;    #>                 ** = p < 0.01; * = p < 0.05    options(summary.stats.lm=NULL)  mtable123 <- mtable(\"Model 1\"=lm0,\"Model 2\"=lm1,\"Model 3\"=lm2,     summary.stats=c(\"sigma\",\"R-squared\",\"F\",\"p\",\"N\"))  (mtable123 <- relabel(mtable123,   \"(Intercept)\" = \"Constant\",           pop15 = \"Percentage of population under 15\",           pop75 = \"Percentage of population over 75\",             dpi = \"Real per-capita disposable income\",            ddpi = \"Growth rate of real per-capita disp. income\"   )) #>  #> Calls: #> Model 1: lm(formula = sr ~ pop15 + pop75, data = LifeCycleSavings) #> Model 2: lm(formula = sr ~ dpi + ddpi, data = LifeCycleSavings) #> Model 3: lm(formula = sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings) #>  #> ================================================================================ #>                                                 Model 1    Model 2    Model 3    #> -------------------------------------------------------------------------------- #>   Constant                                     30.628***   6.360***  28.566***   #>                                                (7.409)    (1.252)    (7.355)     #>   Percentage of population under 15            -0.471**              -0.461**    #>                                                (0.147)               (0.145)     #>   Percentage of population over 75             -1.934                -1.691      #>                                                (1.041)               (1.084)     #>   Real per-capita disposable income                        0.001     -0.000      #>                                                           (0.001)    (0.001)     #>   Growth rate of real per-capita disp. income              0.529*     0.410*     #>                                                           (0.210)    (0.196)     #> -------------------------------------------------------------------------------- #>   sigma                                         3.931      4.189      3.803      #>   R-squared                                     0.262      0.162      0.338      #>   F                                             8.332      4.528      5.756      #>   p                                             0.001      0.016      0.001      #>   N                                            50         50         50          #> ================================================================================ #>   Significance: *** = p < 0.001; ** = p < 0.01; * = p < 0.05    # This produces output in tab-delimited format: write.mtable(mtable123) #> \tModel 1\tModel 2\tModel 3 #> Constant\t30.628***\t6.360***\t28.566*** #> \t(7.409)\t(1.252)\t(7.355) #> Percentage of population under 15\t-0.471**\t\t-0.461** #> \t(0.147)\t\t(0.145) #> Percentage of population over 75\t-1.934\t\t-1.691 #> \t(1.041)\t\t(1.084) #> Real per-capita disposable income\t\t0.001\t-0.000 #> \t\t(0.001)\t(0.001) #> Growth rate of real per-capita disp. income\t\t0.529*\t0.410* #> \t\t(0.210)\t(0.196) #> sigma\t3.931\t4.189\t3.803 #> R-squared\t0.262\t0.162\t0.338 #> F\t8.332\t4.528\t5.756 #> p\t0.001\t0.016\t0.001 #> N\t50\t50\t50  if (FALSE) { # This produces output in tab-delimited format: file123 <- \"mtable123.txt\" write.mtable(mtable123,file=file123) file.show(file123) # The contents of this file can be pasted into Word # and converted into a Word table. } toLatex(mtable123) #> \\begin{tabular}{lD{.}{.}{3}D{.}{.}{3}D{.}{.}{3}} #> \\toprule #>  &  #> \\multicolumn{1}{c}{Model 1} &  #> \\multicolumn{1}{c}{Model 2} &  #> \\multicolumn{1}{c}{Model 3}\\\\ #> \\midrule #> Constant                                    & 30.628^{***} & 6.360^{***} & 28.566^{***}\\\\ #>                                             & (7.409) & (1.252) & (7.355)\\\\ #> Percentage of population under 15           & -0.471^{**} &  & -0.461^{**}\\\\ #>                                             & (0.147) &  & (0.145)\\\\ #> Percentage of population over 75            & -1.934 &  & -1.691\\\\ #>                                             & (1.041) &  & (1.084)\\\\ #> Real per-capita disposable income           &  & 0.001 & -0.000\\\\ #>                                             &  & (0.001) & (0.001)\\\\ #> Growth rate of real per-capita disp. income &  & 0.529^{*} & 0.410^{*}\\\\ #>                                             &  & (0.210) & (0.196)\\\\ #> \\midrule #> sigma                                       &  3.931 &  4.189 &  3.803\\\\ #> R-squared                                   &  0.262 &  0.162 &  0.338\\\\ #> F                                           &  8.332 &  4.528 &  5.756\\\\ #> p                                           &  0.001 &  0.016 &  0.001\\\\ #> N                                           & 50     & 50     & 50    \\\\ #> \\bottomrule #> \\multicolumn{4}{p{.7\\linewidth}}{Significance:  #>               $*** \\equiv p < 0{.}001$;  #>               $** \\equiv p < 0{.}01$;  #>               $* \\equiv p < 0{.}05$}\\\\ #> \\end{tabular} if (FALSE) texfile123 <- \"mtable123.tex\" write.mtable(mtable123,format=\"LaTeX\",file=texfile123) #> Error in eval(expr, envir, enclos): object 'texfile123' not found file.show(texfile123) #> Error in eval(expr, envir, enclos): object 'texfile123' not found  #### Examples with UC Berkeley data  berkeley <- Aggregate(Table(Admit,Freq)~.,data=UCBAdmissions)  berk0 <- glm(cbind(Admitted,Rejected)~1,data=berkeley,family=\"binomial\") berk1 <- glm(cbind(Admitted,Rejected)~Gender,data=berkeley,family=\"binomial\") berk2 <- glm(cbind(Admitted,Rejected)~Gender+Dept,data=berkeley,family=\"binomial\")  mtable(berk0,summary.stats=c(\"Deviance\",\"N\")) #>  #> Calls: #> berk0: glm(formula = cbind(Admitted, Rejected) ~ 1, family = \"binomial\",  #>     data = berkeley) #>  #> ============================ #>   (Intercept)    -0.457***   #>                  (0.031)     #> ---------------------------- #>   Deviance      877.056      #>   N            4526          #> ============================ #>   Significance:    #>                 *** = p < 0.001;    #>                 ** = p < 0.01;    #>                 * = p < 0.05   mtable(berk1,summary.stats=c(\"Deviance\",\"N\")) #>  #> Calls: #> berk1: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = berkeley) #>  #> ==================================== #>   (Intercept)            -0.220***   #>                          (0.039)     #>   Gender: Female/Male    -0.610***   #>                          (0.064)     #> ------------------------------------ #>   Deviance              783.607      #>   N                    4526          #> ==================================== #>   Significance: *** = p < 0.001;    #>                 ** = p < 0.01;    #>                 * = p < 0.05    mtable(berk0,berk1,berk2,summary.stats=c(\"Deviance\",\"N\")) #>  #> Calls: #> berk0: glm(formula = cbind(Admitted, Rejected) ~ 1, family = \"binomial\",  #>     data = berkeley) #> berk1: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = berkeley) #> berk2: glm(formula = cbind(Admitted, Rejected) ~ Gender + Dept, family = \"binomial\",  #>     data = berkeley) #>  #> ============================================================== #>                           berk0        berk1        berk2      #> -------------------------------------------------------------- #>   (Intercept)            -0.457***    -0.220***     0.582***   #>                          (0.031)      (0.039)      (0.069)     #>   Gender: Female/Male                 -0.610***     0.100      #>                                       (0.064)      (0.081)     #>   Dept: B/A                                        -0.043      #>                                                    (0.110)     #>   Dept: C/A                                        -1.263***   #>                                                    (0.107)     #>   Dept: D/A                                        -1.295***   #>                                                    (0.106)     #>   Dept: E/A                                        -1.739***   #>                                                    (0.126)     #>   Dept: F/A                                        -3.306***   #>                                                    (0.170)     #> -------------------------------------------------------------- #>   Deviance              877.056      783.607       20.204      #>   N                    4526         4526         4526          #> ============================================================== #>   Significance: *** = p < 0.001; ** = p < 0.01; * = p < 0.05    mtable(berk0,berk1,berk2,           coef.style=\"horizontal\",           summary.stats=c(\"Deviance\",\"AIC\",\"N\")) #>  #> Calls: #> berk0: glm(formula = cbind(Admitted, Rejected) ~ 1, family = \"binomial\",  #>     data = berkeley) #> berk1: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = berkeley) #> berk2: glm(formula = cbind(Admitted, Rejected) ~ Gender + Dept, family = \"binomial\",  #>     data = berkeley) #>  #> ====================================================================================== #>                               berk0                berk1                berk2          #> -------------------------------------------------------------------------------------- #>   (Intercept)            -0.457*** (0.031)    -0.220*** (0.039)     0.582*** (0.069)   #>   Gender: Female/Male                         -0.610*** (0.064)     0.100    (0.081)   #>   Dept: B/A                                                        -0.043    (0.110)   #>   Dept: C/A                                                        -1.263*** (0.107)   #>   Dept: D/A                                                        -1.295*** (0.106)   #>   Dept: E/A                                                        -1.739*** (0.126)   #>   Dept: F/A                                                        -3.306*** (0.170)   #> -------------------------------------------------------------------------------------- #>   Deviance              877.056              783.607               20.204              #>   AIC                   947.996              856.547              103.144              #>   N                    4526                 4526                 4526                  #> ====================================================================================== #>   Significance: *** = p < 0.001; ** = p < 0.01; * = p < 0.05   mtable(berk0,berk1,berk2,           coef.style=\"stat\",           summary.stats=c(\"Deviance\",\"AIC\",\"N\")) #>  #> Calls: #> berk0: glm(formula = cbind(Admitted, Rejected) ~ 1, family = \"binomial\",  #>     data = berkeley) #> berk1: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = berkeley) #> berk2: glm(formula = cbind(Admitted, Rejected) ~ Gender + Dept, family = \"binomial\",  #>     data = berkeley) #>  #> ============================================================== #>                           berk0        berk1        berk2      #> -------------------------------------------------------------- #>   (Intercept)            -0.457***    -0.220***     0.582***   #>                        (-14.972)     (-5.675)      (8.436)     #>   Gender: Female/Male                 -0.610***     0.100      #>                                      (-9.553)      (1.235)     #>   Dept: B/A                                        -0.043      #>                                                   (-0.395)     #>   Dept: C/A                                        -1.263***   #>                                                  (-11.841)     #>   Dept: D/A                                        -1.295***   #>                                                  (-12.234)     #>   Dept: E/A                                        -1.739***   #>                                                  (-13.792)     #>   Dept: F/A                                        -3.306***   #>                                                  (-19.452)     #> -------------------------------------------------------------- #>   Deviance              877.056      783.607       20.204      #>   AIC                   947.996      856.547      103.144      #>   N                    4526         4526         4526          #> ============================================================== #>   Significance: *** = p < 0.001; ** = p < 0.01; * = p < 0.05   mtable(berk0,berk1,berk2,           coef.style=\"ci\",           summary.stats=c(\"Deviance\",\"AIC\",\"N\")) #>  #> Calls: #> berk0: glm(formula = cbind(Admitted, Rejected) ~ 1, family = \"binomial\",  #>     data = berkeley) #> berk1: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = berkeley) #> berk2: glm(formula = cbind(Admitted, Rejected) ~ Gender + Dept, family = \"binomial\",  #>     data = berkeley) #>  #> ======================================================== #>                          berk0      berk1      berk2     #> -------------------------------------------------------- #>   (Intercept)            -0.457     -0.220      0.582    #>                         [-0.517    [-0.296     [0.447    #>                          -0.397]    -0.144]     0.717]   #>   Gender: Female/Male               -0.610      0.100    #>                                    [-0.736    [-0.059    #>                                     -0.485]     0.258]   #>   Dept: B/A                                    -0.043    #>                                               [-0.259    #>                                                 0.172]   #>   Dept: C/A                                    -1.263    #>                                               [-1.472    #>                                                -1.054]   #>   Dept: D/A                                    -1.295    #>                                               [-1.502    #>                                                -1.087]   #>   Dept: E/A                                    -1.739    #>                                               [-1.986    #>                                                -1.492]   #>   Dept: F/A                                    -3.306    #>                                               [-3.640    #>                                                -2.973]   #> -------------------------------------------------------- #>   Deviance              877.056    783.607     20.204    #>   AIC                   947.996    856.547    103.144    #>   N                    4526       4526       4526        #> ======================================================== mtable(berk0,berk1,berk2,           coef.style=\"ci.se\",           summary.stats=c(\"Deviance\",\"AIC\",\"N\")) #>  #> Calls: #> berk0: glm(formula = cbind(Admitted, Rejected) ~ 1, family = \"binomial\",  #>     data = berkeley) #> berk1: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = berkeley) #> berk2: glm(formula = cbind(Admitted, Rejected) ~ Gender + Dept, family = \"binomial\",  #>     data = berkeley) #>  #> ======================================================== #>                          berk0      berk1      berk2     #> -------------------------------------------------------- #>   (Intercept)            -0.457     -0.220      0.582    #>                          (0.031)    (0.039)    (0.069)   #>                         [-0.517    [-0.296     [0.447    #>                          -0.397]    -0.144]     0.717]   #>   Gender: Female/Male               -0.610      0.100    #>                                     (0.064)    (0.081)   #>                                    [-0.736    [-0.059    #>                                     -0.485]     0.258]   #>   Dept: B/A                                    -0.043    #>                                                (0.110)   #>                                               [-0.259    #>                                                 0.172]   #>   Dept: C/A                                    -1.263    #>                                                (0.107)   #>                                               [-1.472    #>                                                -1.054]   #>   Dept: D/A                                    -1.295    #>                                                (0.106)   #>                                               [-1.502    #>                                                -1.087]   #>   Dept: E/A                                    -1.739    #>                                                (0.126)   #>                                               [-1.986    #>                                                -1.492]   #>   Dept: F/A                                    -3.306    #>                                                (0.170)   #>                                               [-3.640    #>                                                -2.973]   #> -------------------------------------------------------- #>   Deviance              877.056    783.607     20.204    #>   AIC                   947.996    856.547    103.144    #>   N                    4526       4526       4526        #> ======================================================== mtable(berk0,berk1,berk2,           coef.style=\"ci.se.horizontal\",           summary.stats=c(\"Deviance\",\"AIC\",\"N\")) #>  #> Calls: #> berk0: glm(formula = cbind(Admitted, Rejected) ~ 1, family = \"binomial\",  #>     data = berkeley) #> berk1: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = berkeley) #> berk2: glm(formula = cbind(Admitted, Rejected) ~ Gender + Dept, family = \"binomial\",  #>     data = berkeley) #>  #> ============================================================================= #>                             berk0             berk1             berk2         #> ----------------------------------------------------------------------------- #>   (Intercept)            -0.457 (0.031)    -0.220 (0.039)     0.582 (0.069)   #>                         [-0.517 -0.397]   [-0.296 -0.144]    [0.447  0.717]   #>   Gender: Female/Male                      -0.610 (0.064)     0.100 (0.081)   #>                                           [-0.736 -0.485]   [-0.059  0.258]   #>   Dept: B/A                                                  -0.043 (0.110)   #>                                                             [-0.259  0.172]   #>   Dept: C/A                                                  -1.263 (0.107)   #>                                                             [-1.472 -1.054]   #>   Dept: D/A                                                  -1.295 (0.106)   #>                                                             [-1.502 -1.087]   #>   Dept: E/A                                                  -1.739 (0.126)   #>                                                             [-1.986 -1.492]   #>   Dept: F/A                                                  -3.306 (0.170)   #>                                                             [-3.640 -2.973]   #> ----------------------------------------------------------------------------- #>   Deviance              877.056           783.607            20.204           #>   AIC                   947.996           856.547           103.144           #>   N                    4526              4526              4526               #> ============================================================================= mtable(berk0,berk1,berk2,           coef.style=\"ci.p.horizontal\",           summary.stats=c(\"Deviance\",\"AIC\",\"N\")) #>  #> Calls: #> berk0: glm(formula = cbind(Admitted, Rejected) ~ 1, family = \"binomial\",  #>     data = berkeley) #> berk1: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = berkeley) #> berk2: glm(formula = cbind(Admitted, Rejected) ~ Gender + Dept, family = \"binomial\",  #>     data = berkeley) #>  #> ============================================================================= #>                             berk0             berk1             berk2         #> ----------------------------------------------------------------------------- #>   (Intercept)            -0.457 (0.000)    -0.220 (0.000)     0.582 (0.000)   #>                         [-0.517 -0.397]   [-0.296 -0.144]    [0.447  0.717]   #>   Gender: Female/Male                      -0.610 (0.000)     0.100 (0.217)   #>                                           [-0.736 -0.485]   [-0.059  0.258]   #>   Dept: B/A                                                  -0.043 (0.693)   #>                                                             [-0.259  0.172]   #>   Dept: C/A                                                  -1.263 (0.000)   #>                                                             [-1.472 -1.054]   #>   Dept: D/A                                                  -1.295 (0.000)   #>                                                             [-1.502 -1.087]   #>   Dept: E/A                                                  -1.739 (0.000)   #>                                                             [-1.986 -1.492]   #>   Dept: F/A                                                  -3.306 (0.000)   #>                                                             [-3.640 -2.973]   #> ----------------------------------------------------------------------------- #>   Deviance              877.056           783.607            20.204           #>   AIC                   947.996           856.547           103.144           #>   N                    4526              4526              4526               #> ============================================================================= #>   Significance: *** = p < 0.001; ** = p < 0.01; * = p < 0.05   mtable(berk0,berk1,berk2,           coef.style=\"ci.horizontal\",           summary.stats=c(\"Deviance\",\"AIC\",\"N\")) #>  #> Calls: #> berk0: glm(formula = cbind(Admitted, Rejected) ~ 1, family = \"binomial\",  #>     data = berkeley) #> berk1: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = berkeley) #> berk2: glm(formula = cbind(Admitted, Rejected) ~ Gender + Dept, family = \"binomial\",  #>     data = berkeley) #>  #> ===================================================================================================== #>                                 berk0                     berk1                     berk2             #> ----------------------------------------------------------------------------------------------------- #>   (Intercept)            -0.457 [-0.517 -0.397]    -0.220 [-0.296 -0.144]     0.582  [0.447  0.717]   #>   Gender: Female/Male                              -0.610 [-0.736 -0.485]     0.100 [-0.059  0.258]   #>   Dept: B/A                                                                  -0.043 [-0.259  0.172]   #>   Dept: C/A                                                                  -1.263 [-1.472 -1.054]   #>   Dept: D/A                                                                  -1.295 [-1.502 -1.087]   #>   Dept: E/A                                                                  -1.739 [-1.986 -1.492]   #>   Dept: F/A                                                                  -3.306 [-3.640 -2.973]   #> ----------------------------------------------------------------------------------------------------- #>   Deviance              877.056                   783.607                    20.204                   #>   AIC                   947.996                   856.547                   103.144                   #>   N                    4526                      4526                      4526                       #> ===================================================================================================== mtable(berk0,berk1,berk2,           coef.style=\"all\",           summary.stats=c(\"Deviance\",\"AIC\",\"N\")) #>  #> Calls: #> berk0: glm(formula = cbind(Admitted, Rejected) ~ 1, family = \"binomial\",  #>     data = berkeley) #> berk1: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = berkeley) #> berk2: glm(formula = cbind(Admitted, Rejected) ~ Gender + Dept, family = \"binomial\",  #>     data = berkeley) #>  #> ============================================================== #>                           berk0        berk1        berk2      #> -------------------------------------------------------------- #>   (Intercept)            -0.457***    -0.220***     0.582***   #>                          (0.031)      (0.039)      (0.069)     #>                        (-14.972)     (-5.675)      (8.436)     #>                          (0.000)      (0.000)      (0.000)     #>   Gender: Female/Male                 -0.610***     0.100      #>                                       (0.064)      (0.081)     #>                                      (-9.553)      (1.235)     #>                                       (0.000)      (0.217)     #>   Dept: B/A                                        -0.043      #>                                                    (0.110)     #>                                                   (-0.395)     #>                                                    (0.693)     #>   Dept: C/A                                        -1.263***   #>                                                    (0.107)     #>                                                  (-11.841)     #>                                                    (0.000)     #>   Dept: D/A                                        -1.295***   #>                                                    (0.106)     #>                                                  (-12.234)     #>                                                    (0.000)     #>   Dept: E/A                                        -1.739***   #>                                                    (0.126)     #>                                                  (-13.792)     #>                                                    (0.000)     #>   Dept: F/A                                        -3.306***   #>                                                    (0.170)     #>                                                  (-19.452)     #>                                                    (0.000)     #> -------------------------------------------------------------- #>   Deviance              877.056      783.607       20.204      #>   AIC                   947.996      856.547      103.144      #>   N                    4526         4526         4526          #> ============================================================== #>   Significance: *** = p < 0.001; ** = p < 0.01; * = p < 0.05   mtable(berk0,berk1,berk2,           coef.style=\"all.nostar\",           summary.stats=c(\"Deviance\",\"AIC\",\"N\")) #>  #> Calls: #> berk0: glm(formula = cbind(Admitted, Rejected) ~ 1, family = \"binomial\",  #>     data = berkeley) #> berk1: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = berkeley) #> berk2: glm(formula = cbind(Admitted, Rejected) ~ Gender + Dept, family = \"binomial\",  #>     data = berkeley) #>  #> ======================================================== #>                          berk0      berk1      berk2     #> -------------------------------------------------------- #>   (Intercept)            -0.457     -0.220      0.582    #>                          (0.031)    (0.039)    (0.069)   #>                        (-14.972)   (-5.675)    (8.436)   #>                          (0.000)    (0.000)    (0.000)   #>   Gender: Female/Male               -0.610      0.100    #>                                     (0.064)    (0.081)   #>                                    (-9.553)    (1.235)   #>                                     (0.000)    (0.217)   #>   Dept: B/A                                    -0.043    #>                                                (0.110)   #>                                               (-0.395)   #>                                                (0.693)   #>   Dept: C/A                                    -1.263    #>                                                (0.107)   #>                                              (-11.841)   #>                                                (0.000)   #>   Dept: D/A                                    -1.295    #>                                                (0.106)   #>                                              (-12.234)   #>                                                (0.000)   #>   Dept: E/A                                    -1.739    #>                                                (0.126)   #>                                              (-13.792)   #>                                                (0.000)   #>   Dept: F/A                                    -3.306    #>                                                (0.170)   #>                                              (-19.452)   #>                                                (0.000)   #> -------------------------------------------------------- #>   Deviance              877.056    783.607     20.204    #>   AIC                   947.996    856.547    103.144    #>   N                    4526       4526       4526        #> ======================================================== #>   Significance: *** = p < 0.001; ** = p < 0.01;    #>                 * = p < 0.05    mtable(by(berkeley,berkeley$Dept,   function(x)glm(cbind(Admitted,Rejected)~Gender,         data=x,family=\"binomial\")),       summary.stats=c(\"Likelihood-ratio\",\"N\")) #>  #> Calls: #> A: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = x) #> B: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = x) #> C: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = x) #> D: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = x) #> E: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = x) #> F: glm(formula = cbind(Admitted, Rejected) ~ Gender, family = \"binomial\",  #>     data = x) #>  #> =============================================================================================== #>                            A           B           C           D           E           F        #> ----------------------------------------------------------------------------------------------- #>   (Intercept)            0.492***    0.534***   -0.536***   -0.704***   -0.957***   -2.770***   #>                         (0.072)     (0.088)     (0.115)     (0.104)     (0.162)     (0.220)     #>   Gender: Female/Male    1.052***    0.220      -0.125       0.082      -0.200       0.189      #>                         (0.263)     (0.438)     (0.144)     (0.150)     (0.200)     (0.305)     #> ----------------------------------------------------------------------------------------------- #>   Likelihood-ratio      19.054       0.259       0.751       0.298       0.990       0.384      #>   N                    933         585         918         792         584         714          #> =============================================================================================== #>   Significance: *** = p < 0.001; ** = p < 0.01; * = p < 0.05     mtable(By(~Gender,   glm(cbind(Admitted,Rejected)~Dept,         family=\"binomial\"),         data=berkeley),       summary.stats=c(\"Likelihood-ratio\",\"N\")) #>  #> Calls: #> Male: glm(formula = cbind(Admitted, Rejected) ~ Dept, family = \"binomial\") #> Female: glm(formula = cbind(Admitted, Rejected) ~ Dept, family = \"binomial\") #>  #> ============================================== #>                        Male        Female      #> ---------------------------------------------- #>   (Intercept)          0.492***     1.544***   #>                       (0.072)      (0.253)     #>   Dept: B/A            0.042       -0.790      #>                       (0.113)      (0.498)     #>   Dept: C/A           -1.028***    -2.205***   #>                       (0.135)      (0.267)     #>   Dept: D/A           -1.196***    -2.166***   #>                       (0.126)      (0.275)     #>   Dept: E/A           -1.449***    -2.701***   #>                       (0.177)      (0.279)     #>   Dept: F/A           -3.262***    -4.125***   #>                       (0.231)      (0.330)     #> ---------------------------------------------- #>   Likelihood-ratio   514.756      268.851      #>   N                 2691         1835          #> ============================================== #>   Significance: *** = p < 0.001;    #>                 ** = p < 0.01; * = p < 0.05    berkfull <- glm(cbind(Admitted,Rejected)~Dept/Gender - 1,                       data=berkeley,family=\"binomial\") relabel(mtable(berkfull),Dept=\"Department\",gsub=TRUE) #>  #> Calls: #> berkfull: glm(formula = cbind(Admitted, Rejected) ~ Dept/Gender - 1, family = \"binomial\",  #>     data = berkeley) #>  #> ==================================================== #>   Department: A                           0.492***   #>                                          (0.072)     #>   Department: B                           0.534***   #>                                          (0.088)     #>   Department: C                          -0.536***   #>                                          (0.115)     #>   Department: D                          -0.704***   #>                                          (0.104)     #>   Department: E                          -0.957***   #>                                          (0.162)     #>   Department: F                          -2.770***   #>                                          (0.220)     #>   Department: A x Gender: Female/Male     1.052***   #>                                          (0.263)     #>   Department: B x Gender: Female/Male     0.220      #>                                          (0.438)     #>   Department: C x Gender: Female/Male    -0.125      #>                                          (0.144)     #>   Department: D x Gender: Female/Male     0.082      #>                                          (0.150)     #>   Department: E x Gender: Female/Male    -0.200      #>                                          (0.200)     #>   Department: F x Gender: Female/Male     0.189      #>                                          (0.305)     #> ---------------------------------------------------- #>   Log-likelihood                        -34.470      #>   N                                    4526          #> ==================================================== #>   Significance: *** = p < 0.001; ** = p < 0.01;    #>                 * = p < 0.05    #### Array-like semantics  mtable123 <- mtable(\"Model 1\"=lm0,\"Model 2\"=lm1,\"Model 3\"=lm2,     summary.stats=c(\"sigma\",\"R-squared\",\"F\",\"p\",\"N\"))  dim(mtable123) #> [1] 5 1 3 dimnames(mtable123) #> [[1]] #> [1] \"(Intercept)\" \"pop15\"       \"pop75\"       \"dpi\"         \"ddpi\"        #>  #> [[2]] #> [1] \"sr\" #>  #> [[3]] #> [1] \"Model 1\" \"Model 2\" \"Model 3\" #>  mtable123[c(\"dpi\",\"ddpi\"),           c(\"Model 2\",\"Model 3\")] #>  #> Calls: #> Model 2: lm(formula = sr ~ dpi + ddpi, data = LifeCycleSavings) #> Model 3: lm(formula = sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings) #>  #> =============================== #>              Model 2  Model 3   #> ------------------------------- #>   dpi         0.001   -0.000    #>              (0.001)  (0.001)   #>   ddpi        0.529*   0.410*   #>              (0.210)  (0.196)   #> ------------------------------- #>   sigma       4.189    3.803    #>   R-squared   0.162    0.338    #>   F           4.528    5.756    #>   p           0.016    0.001    #>   N          50       50        #> =============================== #>   Significance:    #>                 *** = p < 0.001;    #>                 ** = p < 0.01;    #>                 * = p < 0.05    #### Concatention mt01 <- mtable(lm0,lm1,summary.stats=c(\"R-squared\",\"N\")) mt12 <- mtable(lm1,lm2,summary.stats=c(\"R-squared\",\"F\",\"N\")) c(mt01,mt12) # not that this makes sense, but ... #>  #> Calls: #> lm0: lm(formula = sr ~ pop15 + pop75, data = LifeCycleSavings) #> lm1: lm(formula = sr ~ dpi + ddpi, data = LifeCycleSavings) #> lm1: lm(formula = sr ~ dpi + ddpi, data = LifeCycleSavings) #> lm2: lm(formula = sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings) #>  #> =========================================================== #>                   lm0        lm1        lm1        lm2      #> ----------------------------------------------------------- #>   (Intercept)  30.628***   6.360***   6.360***  28.566***   #>                (7.409)    (1.252)    (1.252)    (7.355)     #>   pop15        -0.471**                         -0.461**    #>                (0.147)                          (0.145)     #>   pop75        -1.934                           -1.691      #>                (1.041)                          (1.084)     #>   dpi                      0.001      0.001     -0.000      #>                           (0.001)    (0.001)    (0.001)     #>   ddpi                     0.529*     0.529*     0.410*     #>                           (0.210)    (0.210)    (0.196)     #> ----------------------------------------------------------- #>   R-squared     0.262      0.162      0.162      0.338      #>   N            50         50         50         50          #>   F                                   4.528      5.756      #> =========================================================== #>   Significance: *** = p < 0.001; ** = p < 0.01;    #>                 * = p < 0.05   c(\"Group 1\"=mt01,   \"Group 2\"=mt12) #>  #> Calls: #> lm0: lm(formula = sr ~ pop15 + pop75, data = LifeCycleSavings) #> lm1: lm(formula = sr ~ dpi + ddpi, data = LifeCycleSavings) #> lm1: lm(formula = sr ~ dpi + ddpi, data = LifeCycleSavings) #> lm2: lm(formula = sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings) #>  #> ========================================================= #>                      Group 1              Group 2         #>                -------------------  -------------------   #>                   lm0       lm1        lm1       lm2      #> --------------------------------------------------------- #>   (Intercept)  30.628***  6.360***   6.360*** 28.566***   #>                (7.409)   (1.252)    (1.252)   (7.355)     #>   pop15        -0.471**                       -0.461**    #>                (0.147)                        (0.145)     #>   pop75        -1.934                         -1.691      #>                (1.041)                        (1.084)     #>   dpi                     0.001      0.001    -0.000      #>                          (0.001)    (0.001)   (0.001)     #>   ddpi                    0.529*     0.529*    0.410*     #>                          (0.210)    (0.210)   (0.196)     #> --------------------------------------------------------- #>   R-squared     0.262     0.162      0.162     0.338      #>   N            50        50         50        50          #>   F                                  4.528     5.756      #> ========================================================= #>   Significance: *** = p < 0.001; ** = p < 0.01;    #>                 * = p < 0.05"},{"path":"https://melff.github.io/mclogit/reference/neg2mis.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark Negative Values as Missing — neg2mis","title":"Mark Negative Values as Missing — neg2mis","text":"many newer survey data sets available social   science data archives non-valid responses (\"know\"   \"answer refused\") given negative codes. function   neg2miss allows mark missing values.)","code":""},{"path":"https://melff.github.io/mclogit/reference/neg2mis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark Negative Values as Missing — neg2mis","text":"","code":"neg2mis(x,all=FALSE,exclude=NULL,select=NULL,zero=FALSE)"},{"path":"https://melff.github.io/mclogit/reference/neg2mis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark Negative Values as Missing — neg2mis","text":"x object inherits class \"item.list\", e.g.     \"data.set\" \"importer\" object. logical; marking negative values missing     applied variables? exclude optional vector variable naems     marking negative values missing     applied. select optional vector variable names     marking negative values missing applied. zero logical; zeroes also marked missing?","code":""},{"path":"https://melff.github.io/mclogit/reference/neg2mis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mark Negative Values as Missing — neg2mis","text":"","code":"ds <- data.set(           var1 = c(0,1,-1,2,3),           var2 = c(-1,-1,1,1,1),           var3 = c(1,2,3,4,5)           ) neg2mis(ds,all=TRUE) #>  #> Data set with 5 observations and 3 variables #>  #>   var1 var2 var3 #> 1    0  *-1    1 #> 2    1  *-1    2 #> 3  *-1    1    3 #> 4    2    1    4 #> 5    3    1    5 neg2mis(ds,all=TRUE,zero=TRUE) #>  #> Data set with 5 observations and 3 variables #>  #>   var1 var2 var3 #> 1   *0  *-1    1 #> 2    1  *-1    2 #> 3  *-1    1    3 #> 4    2    1    4 #> 5    3    1    5 neg2mis(ds,exclude=var1) #>  #> Data set with 5 observations and 3 variables #>  #>   var1 var2 var3 #> 1    0  *-1    1 #> 2    1  *-1    2 #> 3   -1    1    3 #> 4    2    1    4 #> 5    3    1    5 neg2mis(ds,select=var1) #>  #> Data set with 5 observations and 3 variables #>  #>   var1 var2 var3 #> 1    0   -1    1 #> 2    1   -1    2 #> 3  *-1    1    3 #> 4    2    1    4 #> 5    3    1    5"},{"path":"https://melff.github.io/mclogit/reference/nin.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative Match — negative match","title":"Negative Match — negative match","text":"%nin%   convenience operator:   x %nin% table   equivalent   !(x %% table).","code":""},{"path":"https://melff.github.io/mclogit/reference/nin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negative Match — negative match","text":"","code":"x %nin% table"},{"path":"https://melff.github.io/mclogit/reference/nin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negative Match — negative match","text":"x values matched table values match ","code":""},{"path":"https://melff.github.io/mclogit/reference/nin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negative Match — negative match","text":"logical vector","code":""},{"path":"https://melff.github.io/mclogit/reference/nin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Negative Match — negative match","text":"","code":"x <- sample(1:6,12,replace=TRUE) x %in% 1:3 #>  [1] FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE x %nin% 1:3 #>  [1]  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE"},{"path":"https://melff.github.io/mclogit/reference/percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Percentages with Percentage Base — percent","title":"Table of Percentages with Percentage Base — percent","text":"percent returns table percentages along   percentage base. useful   conjunction Aggregate genTable.","code":""},{"path":"https://melff.github.io/mclogit/reference/percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Percentages with Percentage Base — percent","text":"","code":"percent(x,...)   # S3 method for default percent(x,weights=NULL,total=!(se || ci),       se=FALSE,ci=FALSE,ci.level=.95,       total.name=\"N\",perc.label=\"Percentage\",...)   # S3 method for logical percent(x,weights=NULL,total=!(se || ci),       se=FALSE,ci=FALSE,ci.level=.95,       total.name=\"N\",perc.label=\"Percentage\",...)"},{"path":"https://melff.github.io/mclogit/reference/percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of Percentages with Percentage Base — percent","text":"x numeric vector factor. weights optional numeric vector weights length x. total logical; total sum counts percentages     computed included output? se logical; standard errors percentages included? ci logical; confidence intervals percentages included? ci.level numeric; nominal coverage confidence intervals total.name character; name given total sum counts perc.label character; label given percentages     table one dimensions, e.g. se ci TRUE. ... percent.mresp: one several 1-0 vectors matrices   otherwise, arguments, currently ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of Percentages with Percentage Base — percent","text":"table percentages.","code":""},{"path":"https://melff.github.io/mclogit/reference/percent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of Percentages with Percentage Base — percent","text":"","code":"x <- rnorm(100) y <- rnorm(100) z <- rnorm(100) f <- sample(1:3,100,replace=TRUE) f <- factor(f,labels=c(\"a\",\"b\",\"c\"))   percent(x>0) #> Percentage          N  #>         51        100  percent(f) #>   a   b   c   N  #>  37  39  24 100   genTable(   cbind(percent(x>0),         percent(y>0),         percent(z>0)) ~ f   ) #> , , f = a #>  #>              #>              percent(x > 0) percent(y > 0) percent(z > 0) #>   Percentage       62.16216       56.75676       43.24324 #>   N                37.00000       37.00000       37.00000 #>  #> , , f = b #>  #>              #>              percent(x > 0) percent(y > 0) percent(z > 0) #>   Percentage       46.15385       51.28205       66.66667 #>   N                39.00000       39.00000       39.00000 #>  #> , , f = c #>  #>              #>              percent(x > 0) percent(y > 0) percent(z > 0) #>   Percentage       41.66667       58.33333       54.16667 #>   N                24.00000       24.00000       24.00000 #>   gt <- genTable(   cbind(\"x > 0\" = percent(x>0,ci=TRUE),         \"y > 0\" = percent(y>0,ci=TRUE),         \"z > 0\" = percent(z>0,ci=TRUE)) ~ f   )  ftable(gt,row.vars=3:2,col.vars=1) #>          Percentage    lower    upper #> f                                     #> a x > 0    62.16216 44.75680 77.54239 #>   y > 0    56.75676 39.48844 72.90206 #>   z > 0    43.24324 27.09794 60.51156 #> b x > 0    46.15385 30.09478 62.81893 #>   y > 0    51.28205 34.78022 67.58192 #>   z > 0    66.66667 49.78277 80.91190 #> c x > 0    41.66667 22.10969 63.35694 #>   y > 0    58.33333 36.64306 77.89031 #>   z > 0    54.16667 32.82081 74.44698  ex.data <- expand.grid(mean=c(0,25,50),sd=c(1,10,100))[rep(1:9,rep(250,9)),] ex.data <- within(ex.data,x <- rnorm(n=nrow(ex.data),mean=ex.data$mean,sd=ex.data$sd)) ex.data <- within(ex.data,x.grp <- cases( x < 0,                                             x >= 0 & x < 50,                                             x >= 50 & x < 100,                                             x >= 100                                           )) genTable(percent(x.grp)~mean+sd,data=ex.data) #> , , sd = 1 #>  #>                    mean #>                         0  25    50 #>   x < 0              54.4   0   0.0 #>   x >= 0 & x < 50    45.6 100  50.4 #>   x >= 50 & x < 100   0.0   0  49.6 #>   x >= 100            0.0   0   0.0 #>   N                 250.0 250 250.0 #>  #> , , sd = 10 #>  #>                    mean #>                         0    25    50 #>   x < 0              52.8   0.8   0.0 #>   x >= 0 & x < 50    47.2  98.8  49.6 #>   x >= 50 & x < 100   0.0   0.4  50.4 #>   x >= 100            0.0   0.0   0.0 #>   N                 250.0 250.0 250.0 #>  #> , , sd = 100 #>  #>                    mean #>                         0    25    50 #>   x < 0              52.0  41.6  32.4 #>   x >= 0 & x < 50    16.0  19.6  14.4 #>   x >= 50 & x < 100  14.4  18.4  22.8 #>   x >= 100           17.6  20.4  30.4 #>   N                 250.0 250.0 250.0 #>   Aggregate(percent(Admit,weight=Freq)~Gender+Dept,data=UCBAdmissions) #>    Gender Dept  Admitted Rejected   N #> 1    Male    A 62.060606 37.93939 825 #> 2  Female    A 82.407407 17.59259 108 #> 3    Male    B 63.035714 36.96429 560 #> 4  Female    B 68.000000 32.00000  25 #> 5    Male    C 36.923077 63.07692 325 #> 6  Female    C 34.064081 65.93592 593 #> 7    Male    D 33.093525 66.90647 417 #> 8  Female    D 34.933333 65.06667 375 #> 9    Male    E 27.748691 72.25131 191 #> 10 Female    E 23.918575 76.08142 393 #> 11   Male    F  5.898123 94.10188 373 #> 12 Female    F  7.038123 92.96188 341"},{"path":"https://melff.github.io/mclogit/reference/percentages.html","id":null,"dir":"Reference","previous_headings":"","what":"Easy Creation of Tables of Percentages — percentages","title":"Easy Creation of Tables of Percentages — percentages","text":"generic function percentages methods   create one- multidimensional tables percentages. ,   function percentages can viewed convenience   interface prop.table. However, also   allows obtain standard errors confidence intervals.","code":""},{"path":"https://melff.github.io/mclogit/reference/percentages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easy Creation of Tables of Percentages — percentages","text":"","code":"percentages(obj, ...) # S3 method for table percentages(obj,       by=NULL, which=NULL, se=FALSE, ci=FALSE, ci.level=.95, ...) # S3 method for formula percentages(obj,       data=parent.frame(), weights=NULL, ...) # S3 method for default percentages(obj,       weights=NULL, ...) # S3 method for data.frame percentages(obj,       weights=NULL, ...) # S3 method for list percentages(obj,       weights=NULL, ...) # S3 method for percentage.table as.data.frame(x, ...) # S3 method for xpercentage.table as.data.frame(x, ...)"},{"path":"https://melff.github.io/mclogit/reference/percentages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easy Creation of Tables of Percentages — percentages","text":"obj object; contingency table formula.   formula, left-hand side determines factor    combination factors percentages    computed right-hand side determines    factor combination factors define    groups within percentages computed. character vector names   factor variables define groups within percentages   computed. Percentages sum 100 within combination   levels factors. character vector names   factor variables percentages    computed. se logical value; determines whether standard   errors computed. ci logical value; determines whether confidence   intervals computed. Note confidence intervals   infinite (large) populations. ci.level numerical value, required confidence level   confidence intervals. data contingency table (object inherits \"table\")    data frame object coercable data frame. weights optional vector weights. NULL     numeric vector. ... arguments passed     \"table\" method percentages ignored case      call .data.frame. x object coerced data frame.","code":""},{"path":"https://melff.github.io/mclogit/reference/percentages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easy Creation of Tables of Percentages — percentages","text":"array inherits classes \"percentage.table\" \"table\".  percentages called se=TRUE ci=TRUE result additionally inherits class \"xpercentage.table\".","code":""},{"path":"https://melff.github.io/mclogit/reference/percentages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easy Creation of Tables of Percentages — percentages","text":"","code":"percentages(UCBAdmissions) #> , , Dept = A #>  #>           Gender #> Admit            Male     Female #>   Admitted 11.3124171  1.9664163 #>   Rejected  6.9155988  0.4197967 #>  #> , , Dept = B #>  #>           Gender #> Admit            Male     Female #>   Admitted  7.7993814  0.3756076 #>   Rejected  4.5735749  0.1767565 #>  #> , , Dept = C #>  #>           Gender #> Admit            Male     Female #>   Admitted  2.6513478  4.4631021 #>   Rejected  4.5293858  8.6389748 #>  #> , , Dept = D #>  #>           Gender #> Admit            Male     Female #>   Admitted  3.0490499  2.8943880 #>   Rejected  6.1643836  5.3910738 #>  #> , , Dept = E #>  #>           Gender #> Admit            Male     Female #>   Admitted  1.1710119  2.0768891 #>   Rejected  3.0490499  6.6062749 #>  #> , , Dept = F #>  #>           Gender #> Admit            Male     Female #>   Admitted  0.4860804  0.5302696 #>   Rejected  7.7551922  7.0039770 #>   # Three equivalent ways to create the same table of conditional # percentages percentages(Admit~Gender+Dept,data=UCBAdmissions) #> , , Dept = A #>  #>           Gender #> Admit           Male    Female #>   Admitted 62.060606 82.407407 #>   Rejected 37.939394 17.592593 #>  #> , , Dept = B #>  #>           Gender #> Admit           Male    Female #>   Admitted 63.035714 68.000000 #>   Rejected 36.964286 32.000000 #>  #> , , Dept = C #>  #>           Gender #> Admit           Male    Female #>   Admitted 36.923077 34.064081 #>   Rejected 63.076923 65.935919 #>  #> , , Dept = D #>  #>           Gender #> Admit           Male    Female #>   Admitted 33.093525 34.933333 #>   Rejected 66.906475 65.066667 #>  #> , , Dept = E #>  #>           Gender #> Admit           Male    Female #>   Admitted 27.748691 23.918575 #>   Rejected 72.251309 76.081425 #>  #> , , Dept = F #>  #>           Gender #> Admit           Male    Female #>   Admitted  5.898123  7.038123 #>   Rejected 94.101877 92.961877 #>  percentages(UCBAdmissions,by=c(\"Gender\",\"Dept\")) #> , , Dept = A #>  #>           Gender #> Admit           Male    Female #>   Admitted 62.060606 82.407407 #>   Rejected 37.939394 17.592593 #>  #> , , Dept = B #>  #>           Gender #> Admit           Male    Female #>   Admitted 63.035714 68.000000 #>   Rejected 36.964286 32.000000 #>  #> , , Dept = C #>  #>           Gender #> Admit           Male    Female #>   Admitted 36.923077 34.064081 #>   Rejected 63.076923 65.935919 #>  #> , , Dept = D #>  #>           Gender #> Admit           Male    Female #>   Admitted 33.093525 34.933333 #>   Rejected 66.906475 65.066667 #>  #> , , Dept = E #>  #>           Gender #> Admit           Male    Female #>   Admitted 27.748691 23.918575 #>   Rejected 72.251309 76.081425 #>  #> , , Dept = F #>  #>           Gender #> Admit           Male    Female #>   Admitted  5.898123  7.038123 #>   Rejected 94.101877 92.961877 #>  percentages(UCBAdmissions,which=\"Admit\") #> , , Dept = A #>  #>           Gender #> Admit           Male    Female #>   Admitted 62.060606 82.407407 #>   Rejected 37.939394 17.592593 #>  #> , , Dept = B #>  #>           Gender #> Admit           Male    Female #>   Admitted 63.035714 68.000000 #>   Rejected 36.964286 32.000000 #>  #> , , Dept = C #>  #>           Gender #> Admit           Male    Female #>   Admitted 36.923077 34.064081 #>   Rejected 63.076923 65.935919 #>  #> , , Dept = D #>  #>           Gender #> Admit           Male    Female #>   Admitted 33.093525 34.933333 #>   Rejected 66.906475 65.066667 #>  #> , , Dept = E #>  #>           Gender #> Admit           Male    Female #>   Admitted 27.748691 23.918575 #>   Rejected 72.251309 76.081425 #>  #> , , Dept = F #>  #>           Gender #> Admit           Male    Female #>   Admitted  5.898123  7.038123 #>   Rejected 94.101877 92.961877 #>  # Percentage table as data frame as.data.frame(percentages(Admit~Gender+Dept,data=UCBAdmissions)) #>       Admit Gender Dept Percentage #> 1  Admitted   Male    A  62.060606 #> 2  Rejected   Male    A  37.939394 #> 3  Admitted Female    A  82.407407 #> 4  Rejected Female    A  17.592593 #> 5  Admitted   Male    B  63.035714 #> 6  Rejected   Male    B  36.964286 #> 7  Admitted Female    B  68.000000 #> 8  Rejected Female    B  32.000000 #> 9  Admitted   Male    C  36.923077 #> 10 Rejected   Male    C  63.076923 #> 11 Admitted Female    C  34.064081 #> 12 Rejected Female    C  65.935919 #> 13 Admitted   Male    D  33.093525 #> 14 Rejected   Male    D  66.906475 #> 15 Admitted Female    D  34.933333 #> 16 Rejected Female    D  65.066667 #> 17 Admitted   Male    E  27.748691 #> 18 Rejected   Male    E  72.251309 #> 19 Admitted Female    E  23.918575 #> 20 Rejected Female    E  76.081425 #> 21 Admitted   Male    F   5.898123 #> 22 Rejected   Male    F  94.101877 #> 23 Admitted Female    F   7.038123 #> 24 Rejected Female    F  92.961877  # Standard errors and confidence intervals percentages(Admit~Dept,data=UCBAdmissions,se=TRUE) #> , , Result = Percentage #>  #>           Dept #> Admit               A          B          C          D          E          F #>   Admitted 64.4158628 63.2478632 35.0762527 33.9646465 25.1712329  6.4425770 #>   Rejected 35.5841372 36.7521368 64.9237473 66.0353535 74.8287671 93.5574230 #>  #> , , Result = SE #>  #>           Dept #> Admit               A          B          C          D          E          F #>   Admitted  1.5674143  1.9933625  1.5750235  1.6828260  1.7958916  0.9187976 #>   Rejected  1.5674143  1.9933625  1.5750235  1.6828260  1.7958916  0.9187976 #>  percentages(Admit~Dept,data=UCBAdmissions,ci=TRUE) #> , , Result = Percentage #>  #>           Dept #> Admit              A         B         C         D         E         F #>   Admitted 64.415863 63.247863 35.076253 33.964646 25.171233  6.442577 #>   Rejected 35.584137 36.752137 64.923747 66.035354 74.828767 93.557423 #>  #> , , Result = Lower bound #>  #>           Dept #> Admit              A         B         C         D         E         F #>   Admitted 61.248477 59.196386 31.986890 30.668157 21.698820  4.755024 #>   Rejected 32.508100 32.835173 61.738250 62.618938 71.103049 91.499717 #>  #> , , Result = Upper bound #>  #>           Dept #> Admit              A         B         C         D         E         F #>   Admitted 67.491900 67.164827 38.261750 37.381062 28.896951  8.500283 #>   Rejected 38.751523 40.803614 68.013110 69.331843 78.301180 95.244976 #>  (p<- percentages(Admit~Dept,data=UCBAdmissions,ci=TRUE,se=TRUE)) #> , , Result = Percentage #>  #>           Dept #> Admit               A          B          C          D          E          F #>   Admitted 64.4158628 63.2478632 35.0762527 33.9646465 25.1712329  6.4425770 #>   Rejected 35.5841372 36.7521368 64.9237473 66.0353535 74.8287671 93.5574230 #>  #> , , Result = SE #>  #>           Dept #> Admit               A          B          C          D          E          F #>   Admitted  1.5674143  1.9933625  1.5750235  1.6828260  1.7958916  0.9187976 #>   Rejected  1.5674143  1.9933625  1.5750235  1.6828260  1.7958916  0.9187976 #>  #> , , Result = Lower bound #>  #>           Dept #> Admit               A          B          C          D          E          F #>   Admitted 61.2484768 59.1963862 31.9868896 30.6681566 21.6988202  4.7550241 #>   Rejected 32.5081003 32.8351731 61.7382497 62.6189380 71.1030491 91.4997166 #>  #> , , Result = Upper bound #>  #>           Dept #> Admit               A          B          C          D          E          F #>   Admitted 67.4918997 67.1648269 38.2617503 37.3810620 28.8969509  8.5002834 #>   Rejected 38.7515232 40.8036138 68.0131104 69.3318434 78.3011798 95.2449759 #>   # An extended table of percentages as data frame as.data.frame(p) #>       Admit Dept Percentage        SE Lower bound Upper bound #> 1  Admitted    A  64.415863 1.5674143   61.248477   67.491900 #> 2  Admitted    B  63.247863 1.9933625   59.196386   67.164827 #> 3  Admitted    C  35.076253 1.5750235   31.986890   38.261750 #> 4  Admitted    D  33.964646 1.6828260   30.668157   37.381062 #> 5  Admitted    E  25.171233 1.7958916   21.698820   28.896951 #> 6  Admitted    F   6.442577 0.9187976    4.755024    8.500283 #> 7  Rejected    A  35.584137 1.5674143   32.508100   38.751523 #> 8  Rejected    B  36.752137 1.9933625   32.835173   40.803614 #> 9  Rejected    C  64.923747 1.5750235   61.738250   68.013110 #> 10 Rejected    D  66.035354 1.6828260   62.618938   69.331843 #> 11 Rejected    E  74.828767 1.7958916   71.103049   78.301180 #> 12 Rejected    F  93.557423 0.9187976   91.499717   95.244976  # A table of percentages of a factor percentages(iris$Species) #> iris$Species #>     setosa versicolor  virginica  #>   33.33333   33.33333   33.33333   UCBA <- as.data.frame(UCBAdmissions) percentages(UCBA$Admit,weights=UCBA$Freq) #> UCBA$Admit #> Admitted Rejected  #> 38.77596 61.22404   percentages(UCBA,weights=UCBA$Freq) #> $Admit #> Admit #> Admitted Rejected  #> 38.77596 61.22404  #>  #> $Gender #> Gender #>     Male   Female  #> 59.45647 40.54353  #>  #> $Dept #> Dept #>        A        B        C        D        E        F  #> 20.61423 12.92532 20.28281 17.49890 12.90323 15.77552  #>  #> $Freq #> Freq #>          8         17         19         22         24         53         89  #>  0.1767565  0.3756076  0.4197967  0.4860804  0.5302696  1.1710119  1.9664163  #>         94        120        131        138        202        205        207  #>  2.0768891  2.6513478  2.8943880  6.0980999  4.4631021  4.5293858  4.5735749  #>        244        279        299        313        317        351        353  #>  5.3910738  6.1643836  6.6062749  6.9155988  7.0039770  7.7551922  7.7993814  #>        391        512  #>  8.6389748 11.3124171  #>"},{"path":"https://melff.github.io/mclogit/reference/query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query an Object for Information — query","title":"Query an Object for Information — query","text":"function query can used search object   keyword. data.set importer methods perform search   annotations value labels   items data set.","code":""},{"path":"https://melff.github.io/mclogit/reference/query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query an Object for Information — query","text":"","code":"query(x,pattern,...) # S4 method for data.set query(x,pattern,...) # S4 method for importer query(x,pattern,...)  # S4 method for item query(x,pattern,...) # (Called by the methods above.)"},{"path":"https://melff.github.io/mclogit/reference/query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query an Object for Information — query","text":"x object pattern character string gives pattern searched     ... optional arguments fuzzy logical, TRUE default; use fuzzy search via agrep regexp search          via grep extended logical, defaults FALSE; passed grep perl logical, defaults TRUE; passed grep fixed logical, defaults TRUE; passed grep ignore.case logical, defaults TRUE; passed grep agrep insertions numerical value, defaults                     0.999999999; passed agrep deletions numerical value, defaults 0; passed agrep substitutions numerical value, defaults 0; passed agrep","code":""},{"path":"https://melff.github.io/mclogit/reference/query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query an Object for Information — query","text":"annotation value labels item match pattern   query method 'item' objects returns list containing annotation   value labels, otherwise annotation value labels   match pattern, either annotation value labels returned,   otherwise neither matches pattern, query returns NULL. methods query 'data.set' 'importer' objects return   list non-NULL query results items contained   objects, NULL.","code":""},{"path":"https://melff.github.io/mclogit/reference/query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query an Object for Information — query","text":"","code":"nes1948.por <- unzip(system.file(\"anes/NES1948.ZIP\",package=\"memisc\"),                      \"NES1948.POR\",exdir=tempfile()) nes1948 <- spss.portable.file(nes1948.por) #> Warning: 9 variables have duplicated labels: #>   V480004, V480012, V480020, V480021A, V480021B, V480033A, V480033B, #>   V480034A, V480034B query(nes1948,\"TRUMAN\") #> $V480013 #>  #>  Values and labels: #>  #>    10 'SURPRISED -- THOUGHT PEOPLE WANTED CHA' #>    11 'SURPRISED -- EXPERTS, RADIO, PAPERS SA' #>    12 'SURPRISED -- DEWEY A BETTER MAN'        #>    13 'SURPRISED -- TRUMAN RECORD BAD'         #>    14 'SURPRISED -- OTHER, MISCELLANEOUS'      #>    15 'SURPRISED -- DON'T KNOW WHY'            #>    19 'SURPRISED -- NA WHY'                    #>    20 'EXPECTED -- PEOPLE WANTED SAME ADMINIS' #>    21 'EXPECTED -- SKEPTICAL OF RADIO, NEWSPA' #>    22 'EXPECTED -- REPUBLICANS OVER-CONFIDENT' #>    23 'EXPECTED -- TRUMAN'S CAMPAIGN MORE EFF' #>    24 'EXPECTED -- TRUMAN A BETTER MAN OR BET' #>    25 'EXPECTED -- PEOPLE OPPOSED TO 80TH CON' #>    26 'EXPECTED -- PEOPLE VOTED IN ROOSEVELT'  #>    27 'EXPECTED -- LABOR, NEGRO, GOVERNMENT E' #>    28 'EXPECTED -- DK WHY'                     #>    29 'EXPECTED -- NA WHY'                     #>    30 'EXPECTED -- OTHER'                      #>    88 'IGNORES POLITICS'                       #>    98 'DON'T KNOW WHETHER SURPRISED'           #>    99 'NA WHETHER SURPRISED'                   #>  #>  #> $V480014A #> $V480014A$annotation #> description: #>      WHY PPL VTD FOR TRUMAN 1 #>  #>  #> $V480014A$labels #>  #>  Values and labels: #>  #>    10 'BETTER MAN'                              #>    20 'EXPERIENCED, GOOD RECORD'                #>    30 'TRUMAN PRO-LABOR, NEGRO, WORKING MAN'    #>    40 'GOOD CAMPAIGN CONDUCTED BY TRUMAN'       #>    50 'DEMOCRATS MEAN PROSPERITY, REPUBLICANS'  #>    60 'TRUMAN PRO RENT CONTROL, PRICE CONTROL,' #>    70 'ROOSEVELT TRADITION'                     #>    80 'PERSONAL ATTRIBUTES'                     #>    90 'OTHER'                                   #>    91 'NO SECOND REASON'                        #>    98 'DK'                                      #>    99 'NA'                                      #>  #>  #>  #> $V480014B #> $V480014B$annotation #> description: #>      WHY PPL VTD FOR TRUMAN 2 #>  #>  #> $V480014B$labels #>  #>  Values and labelsannotation #> description: #>      WHY PPL VTD AGNST TRUMAN 1 #>  #>  #> $V480015A$labels #>  #>  Values and labels: #>  #>    10 'SMALL MAN, INADEQUATE BACKGROUND'        #>    20 'CAN'T HANDLE SUBORDINATES, OR PICKED BA' #>    30 'CAN'T GET THINGS DONE'                   #>    40 'PARTIAL TO LABOR, NEGRO, WORKING MAN, G' #>    50 'CAN'T GET ALONG WITH CONGRESS'           #>    60 'CIVIL RIGHTS PROGRAM'                    #>    70 'NOTHING SPECIAL ABOUT TRUMAN MADE PEOPL' #>    80 'PERSONAL ATTRIBUTES'                     #>    90 'OTHER REASONS'                           #>    91 'NO SECOND REASON'                        #>    98 'DK'                                      #>    99 'NA'                                      #>  #>  #>  #> $V480015B #> $V480015B$annotation #> description: #>      WHY PPL VTD AGNST TRUMAN 2 #>  #>  #> $V480015B$labels #>  #>  Values and labels: #>  #>    10 'SMALL MAN, INADEQUATE BACKGROUND'        #>    20 'CAN'T HANDLE SUBORDINATES, OR PICKED BA' #>    30 'CAN'T GET THINGS DONE'                   #>    40 'PARTIAL TO LABOR, NEGRO, WORKING MAN, G' #>    50 'CAN'T GET ALONG WITH CONGRESS'           #>    60 'CIVIL RIGHTS PROGRAM'                    #>    70 'NOTHING SPECIAL ABOUT TRUMAN MADE PEOPL' #>    80 'PERSONAL ATTRIBUTES'                     #>    90 'OTHER REASONS'                           #>    91 'NO SECOND REASON'                        #>    98 'DK'                                      #>    99 'NA'                                      #>  #>  #>  #> $V480016A #>  #>  Values and labels: #>  #>    10 'BETTER MAN'                              #>    20 'EXPERIENCED'                             #>    30 'DEWEY PRO BUSINESS, WEALTHY, TRUMAN PRO' #>    40 'GOOD CAMPAIGN CONDUCTED BY DEWEY'        #>    50 'REPUBLICANS BRING PROSPERITY, GOOD FOR'  #>    60 'DEWEY PRO-80TH CONGRESS, TAFT-HARTLEY A' #>    70 'DEMOCRATS IN OFFICE TOO LONG'            #>    80 'PERSONAL ATTRIBUTES'                     #>    90 'OTHER REASONS'                           #>    91 'NO SECOND REASON'                        #>    98 'DK'                                      #>    99 'NA'                                      #>  #>  #> $V480016B #>  #>  Values and labels: #>  #>    10 'BETTER MAN'                              #>    20 'EXPERIENCED'                             #>    30 'DEWEY PRO BUSINESS, WEALTHY, TRUMAN PRO' #>    40 'GOOD CAMPAIGN CONDUCTED BY DEWEY'        #>    50 'REPUBLICANS BRING PROSPERITY, GOOD FOR'  #>    60 'DEWEY PRO-80TH CONGRESS, TAFT-HARTLEY A' #>    70 'DEMOCRATS IN OFFICE TOO LONG'            #>    80 'PERSONAL ATTRIBUTES'                     #>    90 'OTHER REASONS'                           #>    91 'NO SECOND REASON'                        #>    98 'DK'                                      #>    99 'NA'                                      #>  #>  #> $V480018 #>  #>  Values and labels: #>  #>    1 'VOTED - FOR TRUMAN'  #>    2 'VOTED - FOR DEWEY'   #>    3 'VOTED - FOR WALLACE' #>    4 'VOTED - FOR OTHER'   #>    5 'VOTED - NA FOR WHOM' #>    6 'DID NOT VOTE'        #>    9 'NA WHETHER VOTED'    #>  #>  #> $V480020 #>  #>  Values and labels: #>  #>    11 'DID NOT CONSIDER ANYONE ELSE' #>    12 'CONSIDERED DEWEY'             #>    13 'CONSIDERED WALLACE'           #>    14 'CONSIDERED OTHER'             #>    19 'NA'                           #>    21 'CONSIDERED TRUMAN'            #>    22 'DID NOT CONSIDER ANYONE ELSE' #>    23 'CONSIDERED WALLACE'           #>    24 'CONSIDERED OTHER'             #>    29 'NA'                           #>    33 'DID NOT CONSIDER ANYONE ELSE' #>    41 'CONSIDERED TRUMAN'            #>    44 'DID NOT CONSIDER ANYONE ELSE' #>    49 'NA'                           #>    91 'INAP'                         #>  #>  #> $V480023 #>  #>  Values and labels: #>  #>    0 'INAP'               #>    1 'TRUMAN - STRAIGHT'  #>    2 'TRUMAN - SPLIT'     #>    3 'DEWEY - STRAIGHT'   #>    4 'DEWEY - SPLIT'      #>    5 'WALLACE - STRAIGHT' #>    6 'OTHER - STRAIGHT'   #>    7 'OTHER - SPLIT'      #>    8 'DK'                 #>    9 'NA'                 #>  #>  #> $V480024 #>  #>  Values and labels: #>  #>    0 'INAP'    #>    1 'TRUMAN'  #>    2 'DEWEY'   #>    3 'WALLACE' #>    7 'OTHER'   #>    8 'DK'      #>    9 'NA'      #>  #>  #> $V480031A #> description: #>      GRPS IDENTIFIED W TRUMAN 1 #>  #>  #> $V480031B #> description: #>      GRPS IDENTIFIED W TRUMAN 2 #>  #>  #> $V480031C #> description: #>      GRPS IDENTIFIED W TRUMAN 3 #>  #>  #> $V480037 #>  #>  Values and labels: #>  #>    0 'NO INCIDENT MENTIONED'       #>    1 'DEWEY - TRAIN ENGINEER'      #>    2 'DEWEY - 3 SYLLABLE WORDS'    #>    3 'DEWEY - DEBATE WITH STASSEN' #>    4 'DEWEY - PRESS CONFERENCE'    #>    5 'TRUMAN - VINSON-PRO'         #>    6 'TRUMAN - VINSON-CON'         #>  #>"},{"path":"https://melff.github.io/mclogit/reference/recode.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Items, Factors and Numeric Vectors — recode","title":"Recode Items, Factors and Numeric Vectors — recode","text":"recode substitutes old values factor numeric   vector new ones, just like recoding facilities   commercial statistical packages.","code":""},{"path":"https://melff.github.io/mclogit/reference/recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Items, Factors and Numeric Vectors — recode","text":"","code":"recode(x,...,        copy=getOption(\"recode_copy\",identical(otherwise,\"copy\")),        otherwise=NA) # S4 method for vector recode(x,...,     copy=getOption(\"recode_copy\",identical(otherwise,\"copy\")),     otherwise=NA) # S4 method for factor recode(x,...,     copy=getOption(\"recode_copy\",identical(otherwise,\"copy\")),     otherwise=NA) # S4 method for item recode(x,...,     copy=getOption(\"recode_copy\",identical(otherwise,\"copy\")),     otherwise=NA)"},{"path":"https://melff.github.io/mclogit/reference/recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Items, Factors and Numeric Vectors — recode","text":"x object ... One assignment expressions,      form new.value <- old.values.     new.value scalar numeric value     character string. one new.values     character string, return value     recode factor new.value     coerced character string labels level factor. old.value assignment expression may     (numeric character) vector. x numeric     assignment expression may form new.value <- range(lower,upper)     case, values lower upper exchanged     new.value. one arguments range min,     substituted minimum x.     one arguments range max,     substituted maximum x. case method labelled vectors, tags     arguments form tag = new.value <- old.values     define labels new codes. old.values different assignment expressions overlap,     error raised recoding ambigous. copy logical; values x given     explicit new code copied resulting vector? otherwise character string value     result may obtain. equal NA \"NA\",     original codes given explicit new code recoded     NA. equal \"copy\",     original codes given explicit new code copied.","code":""},{"path":"https://melff.github.io/mclogit/reference/recode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode Items, Factors and Numeric Vectors — recode","text":"numerical vector, factor item object.","code":""},{"path":"https://melff.github.io/mclogit/reference/recode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode Items, Factors and Numeric Vectors — recode","text":"recode relies lazy evaluation mechanism R: Arguments evaluated required function given . recode cause arguments appear ... evaluated. Instead, recode parses ... arguments. Therefore, although expressions like 1 <- 1:4 cause error action, evaluated place elsewhere R, cause error action, given recode argument. However, call form recode(x,1=1:4), syntax error. John Fox' package \"car\" installed, recode also callable syntax recode function package.","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode Items, Factors and Numeric Vectors — recode","text":"","code":"x <- as.item(sample(1:6,20,replace=TRUE),         labels=c( a=1,                   b=2,                   c=3,                   d=4,                   e=5,                   f=6)) print(x) #>  [1] f a d e c a d f d c e c b b a b b d a e   codebook(     recode(x,            a = 1 <- 1:2,            b = 2 <- 4:6)) #> Warning: recoding created 3 NAs #> ================================================================================ #>  #>    recode(x, a = 1 <- 1:2, b = 2 <- 4:6) #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels     N Valid Total #>                                        #>     1   'a'              8  47.1  40.0 #>     2   'b'              9  52.9  45.0 #>    NA M                  3        15.0 #>    codebook(     recode(x,            a = 1 <- 1:2,            b = 2 <- 4:6,            copy = TRUE)) #> ================================================================================ #>  #>    recode(x, a = 1 <- 1:2, b = 2 <- 4:6, copy = TRUE) #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                   8    40.0 #>    2 'b'                   9    45.0 #>    3 'c'                   3    15.0 #>   # Note the handling of labels if the recoding rules are bijective codebook(     recode(x,            1 <- 2,            2 <- 1,            copy=TRUE)) #> ================================================================================ #>  #>    recode(x, 1 <- 2, 2 <- 1, copy = TRUE) #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'b'                   4    20.0 #>    2 'a'                   4    20.0 #>    3 'c'                   3    15.0 #>    4 'd'                   4    20.0 #>    5 'e'                   3    15.0 #>    6 'f'                   2    10.0 #>   codebook(     recode(x,            a = 1 <- 2,            b = 2 <- 1,            copy=TRUE)) #> ================================================================================ #>  #>    recode(x, a = 1 <- 2, b = 2 <- 1, copy = TRUE) #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                   4    20.0 #>    2 'b'                   4    20.0 #>    3 'c'                   3    15.0 #>    4 'd'                   4    20.0 #>    5 'e'                   3    15.0 #>    6 'f'                   2    10.0 #>    # A recoded version of x is returned # containing the values 1, 2, 3, which are # labelled as \"A\", \"B\", \"C\". recode(x,   A = 1 <- range(min,2),   B = 2 <- 3:4,   C = 3 <- range(5,max), # this last comma is ignored   ) #>  #> Item (measurement: nominal, type: integer, length = 20)  #>  #>  [1:20] C A B C B A B C B B C B A A A A A B A C  # This causes an error action: the sets # of original values overlap. try(recode(x,   A = 1 <- range(min,2),   B = 2 <- 2:4,   C = 3 <- range(5,max)   )) #> Error in recode(x, A = 1 <- range(min, 2), B = 2 <- 2:4, C = 3 <- range(5,  :  #>   recoding request is ambiguous  recode(x,   A = 1 <- range(min,2),   B = 2 <- 3:4,   C = 3 <- range(5,6),   D = 4 <- 7   ) #> Warning: recoding 4 <- 7 has no consequences #>  #> Item (measurement: nominal, type: integer, length = 20)  #>  #>  [1:20] C A B C B A B C B B C B A A A A A B A C    # This results in an all-missing vector: recode(x,   D = 4 <- 7,   E = 5 <- 8   ) #> Warning: recodings 4 <- 7, 5 <- 8 have no consequences #> Warning: recoding created 20 NAs #>  #> Item (measurement: nominal, type: integer, length = 20)  #>  #>  [1:20] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA  f <- as.factor(x) x <- as.integer(x)  recode(x,   1 <- range(min,2),   2 <- 3:4,   3 <- range(5,max)   ) #>  [1] 3 1 2 3 2 1 2 3 2 2 3 2 1 1 1 1 1 2 1 3  # This causes another error action: # the third argument is an invalid # expression for a recoding. try(recode(x,   1 <- range(min,2),   3:4,   3 <- range(5,max)   )) #> Error in recode(x, 1 <- range(min, 2), 3:4, 3 <- range(5, max)) :  #>   invalid recoding request  # The new values are character strings, # therefore a factor is returned. recode(x,   \"a\" <- range(min,2),   \"b\" <- 3:4,   \"c\" <- range(5,6)   ) #>  [1] c a b c b a b c b b c b a a a a a b a c #> Levels: a b c    recode(x,   1 <- 1:3,   2 <- 4:6   ) #>  [1] 2 1 2 2 1 1 2 2 2 1 2 1 1 1 1 1 1 2 1 2    recode(x,   4 <- 7,   5 <- 8,   otherwise = \"copy\"   ) #> Warning: recodings 4 <- 7, 5 <- 8 have no consequences #>  [1] 6 1 4 5 3 1 4 6 4 3 5 3 2 2 1 2 2 4 1 5  recode(f,   \"A\" <- c(\"a\",\"b\"),   \"B\" <- c(\"c\",\"d\"),   otherwise=\"copy\"   ) #>  [1] f A B e B A B f B B e B A A A A A B A e #> Levels: A B e f  recode(f,   \"A\" <- c(\"a\",\"b\"),   \"B\" <- c(\"c\",\"d\"),   otherwise=\"C\"   ) #>  [1] C A B C B A B C B B C B A A A A A B A C #> Levels: A B C   recode(f,   \"A\" <- c(\"a\",\"b\"),   \"B\" <- c(\"c\",\"d\")   ) #> Warning: recoding created 5 NAs #>  [1] <NA> A    B    <NA> B    A    B    <NA> B    B    <NA> B    A    A    A    #> [16] A    A    B    A    <NA> #> Levels: A B  DS <- data.set(x=as.item(sample(1:6,20,replace=TRUE),         labels=c( a=1,                   b=2,                   c=3,                   d=4,                   e=5,                   f=6))) print(DS) #>    x #>  1 e #>  2 d #>  3 a #>  4 b #>  5 c #>  6 d #>  7 d #>  8 c #>  9 b #> 10 b #> 11 a #> 12 d #> 13 c #> 14 e #> 15 d #> 16 c #> 17 c #> 18 d #> 19 f #> 20 c  DS <- within(DS,{     xf <- recode(x,                  \"a\" <- range(min,2),                  \"b\" <- 3:4,                  \"c\" <- range(5,6)                  )     xn <- x@.Data     xc <- recode(xn,                  \"a\" <- range(min,2),                  \"b\" <- 3:4,                  \"c\" <- range(5,6)                  )     xc <- as.character(x)     xcc <- recode(xc,                   1 <- letters[1:2],                   2 <- letters[3:4],                   3 <- letters[5:6]                   ) })  DS #>  #> Data set with 20 observations and 5 variables #>  #>    x xf xn xc xcc #>  1 e  c  5  e   3 #>  2 d  b  4  d   2 #>  3 a  a  1  a   1 #>  4 b  a  2  b   1 #>  5 c  b  3  c   2 #>  6 d  b  4  d   2 #>  7 d  b  4  d   2 #>  8 c  b  3  c   2 #>  9 b  a  2  b   1 #> 10 b  a  2  b   1 #> 11 a  a  1  a   1 #> 12 d  b  4  d   2 #> 13 c  b  3  c   2 #> 14 e  c  5  e   3 #> 15 d  b  4  d   2 #> 16 c  b  3  c   2 #> 17 c  b  3  c   2 #> 18 d  b  4  d   2 #> 19 f  c  6  f   3 #> 20 c  b  3  c   2  DS <- within(DS,{     xf <- recode(x,                  \"a\" <- range(min,2),                  \"b\" <- 3:4,                  \"c\" <- range(5,6)                  )     x1 <- recode(x,                  1 <- range(1,2),                  2 <- range(3,4),                  copy=TRUE                  )     xf1 <- recode(x,                  \"A\" <- range(1,2),                  \"B\" <- range(3,4),                  copy=TRUE                  ) }) DS #>  #> Data set with 20 observations and 7 variables #>  #>    x xf xn xc xcc x1 xf1 #>  1 e  c  5  e   3  e   e #>  2 d  b  4  d   2  b   B #>  3 a  a  1  a   1  a   A #>  4 b  a  2  b   1  a   A #>  5 c  b  3  c   2  b   B #>  6 d  b  4  d   2  b   B #>  7 d  b  4  d   2  b   B #>  8 c  b  3  c   2  b   B #>  9 b  a  2  b   1  a   A #> 10 b  a  2  b   1  a   A #> 11 a  a  1  a   1  a   A #> 12 d  b  4  d   2  b   B #> 13 c  b  3  c   2  b   B #> 14 e  c  5  e   3  e   e #> 15 d  b  4  d   2  b   B #> 16 c  b  3  c   2  b   B #> 17 c  b  3  c   2  b   B #> 18 d  b  4  d   2  b   B #> 19 f  c  6  f   3  f   f #> 20 c  b  3  c   2  b   B codebook(DS) #> ================================================================================ #>  #>    x #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                   2    10.0 #>    2 'b'                   3    15.0 #>    3 'c'                   6    30.0 #>    4 'd'                   6    30.0 #>    5 'e'                   2    10.0 #>    6 'f'                   1     5.0 #>  #> ================================================================================ #>  #>    xf #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                   5    25.0 #>    2 'b'                  12    60.0 #>    3 'c'                   3    15.0 #>  #> ================================================================================ #>  #>    xn #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: interval #>  #>         Min: 1.000 #>         Max: 6.000 #>        Mean: 3.300 #>    Std.Dev.: 1.269 #>  #> ================================================================================ #>  #>    xc #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: character #>    Measurement: nominal #>  #>    Min: \"a\" #>    Max: \"f\" #>  #> ================================================================================ #>  #>    xcc #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 '1'                   5    25.0 #>    2 '2'                  12    60.0 #>    3 '3'                   3    15.0 #>  #> ================================================================================ #>  #>    x1 #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'a'                   5    25.0 #>    2 'b'                  12    60.0 #>    5 'e'                   2    10.0 #>    6 'f'                   1     5.0 #>  #> ================================================================================ #>  #>    xf1 #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'A'                   5    25.0 #>    2 'B'                  12    60.0 #>    5 'e'                   2    10.0 #>    6 'f'                   1     5.0 #>   DF <- data.frame(x=rep(1:6,4,replace=TRUE)) DF <- within(DF,{     xf <- recode(x,                  \"a\" <- range(min,2),                  \"b\" <- 3:4,                  \"c\" <- range(5,6)                  )     x1 <- recode(x,                  1 <- range(1,2),                  2 <- range(3,4),                  copy=TRUE                  )     xf1 <- recode(x,                  \"A\" <- range(1,2),                  \"B\" <- range(3,4),                  copy=TRUE                  )     xf2 <- recode(x,                  \"B\" <- range(3,4),                  \"A\" <- range(1,2),                  copy=TRUE                  ) }) DF #>    x xf2 xf1 x1 xf #> 1  1   A   A  1  a #> 2  2   A   A  1  a #> 3  3   B   B  2  b #> 4  4   B   B  2  b #> 5  5   5   5  5  c #> 6  6   6   6  6  c #> 7  1   A   A  1  a #> 8  2   A   A  1  a #> 9  3   B   B  2  b #> 10 4   B   B  2  b #> 11 5   5   5  5  c #> 12 6   6   6  6  c #> 13 1   A   A  1  a #> 14 2   A   A  1  a #> 15 3   B   B  2  b #> 16 4   B   B  2  b #> 17 5   5   5  5  c #> 18 6   6   6  6  c #> 19 1   A   A  1  a #> 20 2   A   A  1  a #> 21 3   B   B  2  b #> 22 4   B   B  2  b #> 23 5   5   5  5  c #> 24 6   6   6  6  c codebook(DF) #> ================================================================================ #>  #>    x #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>  #>         Min: 1.000000 #>         Max: 6.000000 #>        Mean: 3.500000 #>    Std.Dev.: 1.707825 #>  #> ================================================================================ #>  #>    xf2 #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Factor with 4 levels #>  #>    Levels and labels     N Valid #>                                  #>    1 'B'                 8  33.3 #>    2 'A'                 8  33.3 #>    3 '5'                 4  16.7 #>    4 '6'                 4  16.7 #>  #> ================================================================================ #>  #>    xf1 #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Factor with 4 levels #>  #>    Levels and labels     N Valid #>                                  #>    1 'A'                 8  33.3 #>    2 'B'                 8  33.3 #>    3 '5'                 4  16.7 #>    4 '6'                 4  16.7 #>  #> ================================================================================ #>  #>    x1 #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>  #>         Min: 1.000000 #>         Max: 6.000000 #>        Mean: 2.833333 #>    Std.Dev.: 1.950783 #>  #> ================================================================================ #>  #>    xf #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Factor with 3 levels #>  #>    Levels and labels     N Valid #>                                  #>    1 'a'                 8  33.3 #>    2 'b'                 8  33.3 #>    3 'c'                 8  33.3 #>"},{"path":"https://melff.github.io/mclogit/reference/relabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Change labels of factors or labelled objects — relabel","title":"Change labels of factors or labelled objects — relabel","text":"Function relabel changes labels factor object   names, labels, value.labels, variable.labels attribute.   Function relabel4 (internal) generic called relabel   handle S4 objects.","code":""},{"path":"https://melff.github.io/mclogit/reference/relabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change labels of factors or labelled objects — relabel","text":"","code":"# S3 method for default relabel(x, ..., gsub = FALSE, fixed = TRUE, warn = TRUE) # S3 method for factor relabel(x, ..., gsub = FALSE, fixed = TRUE, warn = TRUE)   # S4 method for item relabel4(x, ...) # This is an internal method, see details. # Use relabel(x, \\dots) for 'item' objects"},{"path":"https://melff.github.io/mclogit/reference/relabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change labels of factors or labelled objects — relabel","text":"x object names, labels, value.labels, variable.labels attribute ... sequence named arguments, type character gsub logical value; TRUE, gsub used change       labels object. , instead substituting whole labels, substrings       labels object can changed. fixed logical value, passed gsub. TRUE,     substitutions fixed strings regular expressions. warn logical value; TRUE, warning issues       change labels unsuccessful.","code":""},{"path":"https://melff.github.io/mclogit/reference/relabel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change labels of factors or labelled objects — relabel","text":"function changes names labels x according   remaining arguments.   gsub FALSE, argument tags old   labels, values new labels.   gsub TRUE, arguments substrings labels   substituted argument values. Function relabel S3 generic. first argument S4 object,   calls (internal) relabel4 generic function.","code":""},{"path":"https://melff.github.io/mclogit/reference/relabel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change labels of factors or labelled objects — relabel","text":"object x new labels defined ... arguments.","code":""},{"path":"https://melff.github.io/mclogit/reference/relabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change labels of factors or labelled objects — relabel","text":"","code":"f <- as.factor(rep(letters[1:4],5))   levels(f) #> [1] \"a\" \"b\" \"c\" \"d\"   F <- relabel(f,     a=\"A\",     b=\"B\",     c=\"C\",     d=\"D\"     )   levels(F) #> [1] \"A\" \"B\" \"C\" \"D\"      f <- as.item(f)   labels(f) #>  #>  Values and labels: #>  #>    1 'a' #>    2 'b' #>    3 'c' #>    4 'd' #>    F <- relabel(f,     a=\"A\",     b=\"B\",     c=\"C\",     d=\"D\"     )   labels(F) #>  #>  Values and labels: #>  #>    1 'A' #>    2 'B' #>    3 'C' #>    4 'D' #>     # Since version 0.99.22 - the following also works:    f <- as.factor(rep(letters[1:4],5))   levels(f) #> [1] \"a\" \"b\" \"c\" \"d\"   F <- relabel(f,     a=A,     b=B,     c=C,     d=D     )   levels(F) #> [1] \"A\" \"B\" \"C\" \"D\"      f <- as.item(f)   labels(f) #>  #>  Values and labels: #>  #>    1 'a' #>    2 'b' #>    3 'c' #>    4 'd' #>    F <- relabel(f,     a=A,     b=B,     c=C,     d=D     )   labels(F) #>  #>  Values and labels: #>  #>    1 'A' #>    2 'B' #>    3 'C' #>    4 'D' #>"},{"path":"https://melff.github.io/mclogit/reference/rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Change Names of a Named Object — rename","title":"Change Names of a Named Object — rename","text":"rename changes names named object.","code":""},{"path":"https://melff.github.io/mclogit/reference/rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change Names of a Named Object — rename","text":"","code":"rename(x, ..., gsub = FALSE, fixed = TRUE, warn = TRUE)"},{"path":"https://melff.github.io/mclogit/reference/rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change Names of a Named Object — rename","text":"x named object ... sequence named arguments, type character gsub logical value; TRUE, gsub used change       row column labels resulting table.       , instead substituting whole names, substrings       names object can changed. fixed logical value, passed gsub. TRUE,     substitutions fixed strings regular expressions. warn logical value; warning issued     names change found?","code":""},{"path":"https://melff.github.io/mclogit/reference/rename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change Names of a Named Object — rename","text":"function changes names x according   remaining arguments.   gsub FALSE, argument tags old   names, values new names.   gsub TRUE, arguments substrings names   substituted argument values.","code":""},{"path":"https://melff.github.io/mclogit/reference/rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change Names of a Named Object — rename","text":"object x new names defined ... arguments.","code":""},{"path":"https://melff.github.io/mclogit/reference/rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change Names of a Named Object — rename","text":"","code":"x <- c(a=1, b=2)   rename(x,a=\"A\",b=\"B\") #> A B  #> 1 2    # Since version 0.99.22 - the following also works:   rename(x,a=A,b=B) #> A B  #> 1 2       str(rename(iris,                   Sepal.Length=\"Sepal_Length\",                   Sepal.Width =\"Sepal_Width\",                   Petal.Length=\"Petal_Length\",                   Petal.Width =\"Petal_Width\"                   )) #> 'data.frame':\t150 obs. of  5 variables: #>  $ Sepal_Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>  $ Sepal_Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>  $ Petal_Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>  $ Petal_Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...   str(rename(iris,                   .=\"_\"                   ,gsub=TRUE)) #> 'data.frame':\t150 obs. of  5 variables: #>  $ Sepal_Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>  $ Sepal_Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>  $ Petal_Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>  $ Petal_Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...    # Since version 0.99.22 - the following also works:   str(rename(iris,                   Sepal.Length=Sepal_Length,                   Sepal.Width =Sepal_Width,                   Petal.Length=Petal_Length,                   Petal.Width =Petal_Width                   )) #> 'data.frame':\t150 obs. of  5 variables: #>  $ Sepal_Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>  $ Sepal_Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>  $ Petal_Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>  $ Petal_Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ..."},{"path":"https://melff.github.io/mclogit/reference/reorder.array.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder an Array or Matrix — reorder.array","title":"Reorder an Array or Matrix — reorder.array","text":"reorder.array reorders array along specified   dimension according given names, indices results   function applied.","code":""},{"path":"https://melff.github.io/mclogit/reference/reorder.array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder an Array or Matrix — reorder.array","text":"","code":"# S3 method for array reorder(x,dim=1,names=NULL,indices=NULL,FUN=mean,...) # S3 method for matrix reorder(x,dim=1,names=NULL,indices=NULL,FUN=mean,...)"},{"path":"https://melff.github.io/mclogit/reference/reorder.array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder an Array or Matrix — reorder.array","text":"x array dim integer specifying dimension along x ordered. names character vector indices numeric vector FUN function can used apply(x,dim,FUN) ... arguments, ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/reorder.array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder an Array or Matrix — reorder.array","text":"Typical usages result rename(x,dim,names) x   reordered dimnames(x)[[dim]] equal   concatenation elements names   dimnames(x)[[dim]] remaining elements   dimnames(x)[[dim]]. result rename(x,dim,indices) x   reordered along dim according indices. result rename(x,dim,FUN) x   reordered along dim according order(apply(x,dim,FUN)).","code":"reorder(x,dim,names)   reorder(x,dim,indices)   reorder(x,dim,FUN)"},{"path":"https://melff.github.io/mclogit/reference/reorder.array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder an Array or Matrix — reorder.array","text":"reordered object x.","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/reorder.array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder an Array or Matrix — reorder.array","text":"","code":"(M <- matrix(rnorm(n=25),5,5,dimnames=list(LETTERS[1:5],letters[1:5]))) #>             a          b          c           d          e #> A -1.49839350 -0.4742515  1.4294176 -0.22983819 -0.6226631 #> B  0.54596244  2.0317369 -0.4387259  0.06968574 -0.7142985 #> C -0.63526260  1.3707813  0.4107621 -0.70879481  0.4963113 #> D -0.01158975  0.6602181  1.8610739 -0.64008219  0.2363986 #> E  0.61778499  0.8965621 -0.7400881  1.05358096 -0.3974244   reorder(M,dim=1,names=c(\"E\",\"A\")) #>             a          b          c           d          e #> E  0.61778499  0.8965621 -0.7400881  1.05358096 -0.3974244 #> A -1.49839350 -0.4742515  1.4294176 -0.22983819 -0.6226631 #> B  0.54596244  2.0317369 -0.4387259  0.06968574 -0.7142985 #> C -0.63526260  1.3707813  0.4107621 -0.70879481  0.4963113 #> D -0.01158975  0.6602181  1.8610739 -0.64008219  0.2363986   reorder(M,dim=2,indices=3:1) #>            c          b           a           d          e #> A  1.4294176 -0.4742515 -1.49839350 -0.22983819 -0.6226631 #> B -0.4387259  2.0317369  0.54596244  0.06968574 -0.7142985 #> C  0.4107621  1.3707813 -0.63526260 -0.70879481  0.4963113 #> D  1.8610739  0.6602181 -0.01158975 -0.64008219  0.2363986 #> E -0.7400881  0.8965621  0.61778499  1.05358096 -0.3974244   reorder(M,dim=1) #>             a          b          c           d          e #> A -1.49839350 -0.4742515  1.4294176 -0.22983819 -0.6226631 #> C -0.63526260  1.3707813  0.4107621 -0.70879481  0.4963113 #> E  0.61778499  0.8965621 -0.7400881  1.05358096 -0.3974244 #> B  0.54596244  2.0317369 -0.4387259  0.06968574 -0.7142985 #> D -0.01158975  0.6602181  1.8610739 -0.64008219  0.2363986   reorder(M,dim=2) #>            e           a           d          c          b #> A -0.6226631 -1.49839350 -0.22983819  1.4294176 -0.4742515 #> B -0.7142985  0.54596244  0.06968574 -0.4387259  2.0317369 #> C  0.4963113 -0.63526260 -0.70879481  0.4107621  1.3707813 #> D  0.2363986 -0.01158975 -0.64008219  1.8610739  0.6602181 #> E -0.3974244  0.61778499  1.05358096 -0.7400881  0.8965621"},{"path":"https://melff.github.io/mclogit/reference/retain.html","id":null,"dir":"Reference","previous_headings":"","what":"Retain Objects in an Environment — retain","title":"Retain Objects in an Environment — retain","text":"retain removes objects environment   except mentioned argument.","code":""},{"path":"https://melff.github.io/mclogit/reference/retain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retain Objects in an Environment — retain","text":"","code":"retain(..., list = character(0), envir = parent.frame(),force=FALSE)"},{"path":"https://melff.github.io/mclogit/reference/retain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retain Objects in an Environment — retain","text":"... names objects retained, names (unquoted)     character strings(quoted). list character vector naming objects retained. envir environment objects removed     retained. force logical value. measure caution,     function removes objects local environments,     unless force equals TRUE. case, retain can     also used clear global environment, user's workspace.","code":""},{"path":"https://melff.github.io/mclogit/reference/retain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retain Objects in an Environment — retain","text":"","code":"local({   foreach(x=c(a,b,c,d,e,f,g,h),x<-1)   cat(\"Objects before call to 'retain':\\n\")   print(ls())   retain(a)   cat(\"Objects after call to 'retain':\\n\")   print(ls()) }) #> Objects before call to 'retain': #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" #> Objects after call to 'retain': #> [1] \"a\" x <- 1 y <- 2 retain(x)"},{"path":"https://melff.github.io/mclogit/reference/reversed.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse the codes of a survey item or the levels of a factor — reversed","title":"Reverse the codes of a survey item or the levels of a factor — reversed","text":"function reversed() returns copy argument codes levels reverse order.","code":""},{"path":"https://melff.github.io/mclogit/reference/reversed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse the codes of a survey item or the levels of a factor — reversed","text":"","code":"reversed(x) # S4 method for item.vector reversed(x) # S4 method for factor reversed(x)"},{"path":"https://melff.github.io/mclogit/reference/reversed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse the codes of a survey item or the levels of a factor — reversed","text":"x object -- \"item\" object \"data.set\" object","code":""},{"path":"https://melff.github.io/mclogit/reference/reversed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse the codes of a survey item or the levels of a factor — reversed","text":"argument function reversed() either   unique valid values labelled valid values recoded   reverse order. th argument factor function returns factor   levels reverse order.","code":""},{"path":"https://melff.github.io/mclogit/reference/reversed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse the codes of a survey item or the levels of a factor — reversed","text":"","code":"ds <- data.set(     x = as.item(sample(c(1:3,9),100,replace=TRUE),                 labels=c(\"One\"=1,                          \"Two\"=2,                          \"Three\"=3,                          \"Missing\"=9))) df <- as.data.frame(ds) ds <- within(ds,{     xr <- reversed(x) }) codebook(ds) #> ================================================================================ #>  #>    x #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'One'                15    15.0 #>    2 'Two'                31    31.0 #>    3 'Three'              26    26.0 #>    9 'Missing'            28    28.0 #>  #> ================================================================================ #>  #>    xr #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'Missing'            28    28.0 #>    2 'Three'              26    26.0 #>    3 'Two'                31    31.0 #>    9 'One'                15    15.0 #>  df <- within(df,{     xr <- reversed(x) }) codebook(df) #> ================================================================================ #>  #>    x #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Factor with 4 levels #>  #>    Levels and labels     N Valid #>                                  #>    1 'One'              15  15.0 #>    2 'Two'              31  31.0 #>    3 'Three'            26  26.0 #>    4 'Missing'          28  28.0 #>  #> ================================================================================ #>  #>    xr #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Factor with 4 levels #>  #>    Levels and labels     N Valid #>                                  #>    1 'Missing'          28  28.0 #>    2 'Three'            26  26.0 #>    3 'Two'              31  31.0 #>    4 'One'              15  15.0 #>"},{"path":"https://melff.github.io/mclogit/reference/sample-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Take a Sample from a Data Frame-like Object — sample-methods","title":"Take a Sample from a Data Frame-like Object — sample-methods","text":"methods convenience short-cuts   take samples data frames data sets.   result data frame data set, respectively,   rows sample complete   data frame/data set.","code":""},{"path":"https://melff.github.io/mclogit/reference/sample-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take a Sample from a Data Frame-like Object — sample-methods","text":"","code":"# S4 method for data.frame sample(x, size, replace = FALSE, prob = NULL) # S4 method for data.set sample(x, size, replace = FALSE, prob = NULL) # S4 method for importer sample(x, size, replace = FALSE, prob = NULL)"},{"path":"https://melff.github.io/mclogit/reference/sample-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take a Sample from a Data Frame-like Object — sample-methods","text":"x data frame data set. size (optional) numerical value, sample size,     defaults total number rows x. replace logical value, determines whether     sampling takes place without replacement. prob vector sampling probabities NULL.","code":""},{"path":"https://melff.github.io/mclogit/reference/sample-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take a Sample from a Data Frame-like Object — sample-methods","text":"data frame data set.","code":""},{"path":"https://melff.github.io/mclogit/reference/sample-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Take a Sample from a Data Frame-like Object — sample-methods","text":"","code":"for(.i in 1:4)   print(sample(iris,5)) #>    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 15          5.8         4.0          1.2         0.2     setosa #> 62          5.9         3.0          4.2         1.5 versicolor #> 77          6.8         2.8          4.8         1.4 versicolor #> 67          5.6         3.0          4.5         1.5 versicolor #> 50          5.0         3.3          1.4         0.2     setosa #>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 44           5.0         3.5          1.6         0.6    setosa #> 11           5.4         3.7          1.5         0.2    setosa #> 5            5.0         3.6          1.4         0.2    setosa #> 24           5.1         3.3          1.7         0.5    setosa #> 116          6.4         3.2          5.3         2.3 virginica #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 125          6.7         3.3          5.7         2.1  virginica #> 59           6.6         2.9          4.6         1.3 versicolor #> 146          6.7         3.0          5.2         2.3  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 71           5.9         3.2          4.8         1.8 versicolor #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 70           5.6         2.5          3.9         1.1 versicolor #> 126          7.2         3.2          6.0         1.8  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 37           5.5         3.5          1.3         0.2     setosa #> 118          7.7         3.8          6.7         2.2  virginica"},{"path":"https://melff.github.io/mclogit/reference/sort-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience Methods to Sort Data Frames and Data Sets — sort-methods","title":"Convenience Methods to Sort Data Frames and Data Sets — sort-methods","text":"methods return sorted version data frame data set, given first argument.","code":""},{"path":"https://melff.github.io/mclogit/reference/sort-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience Methods to Sort Data Frames and Data Sets — sort-methods","text":"","code":"# S3 method for data.frame sort(x,decreasing=FALSE,by=NULL,na.last=NA,...) # S3 method for data.set sort(x,decreasing=FALSE,by=NULL,na.last=NA,...)"},{"path":"https://melff.github.io/mclogit/reference/sort-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience Methods to Sort Data Frames and Data Sets — sort-methods","text":"x data frame data set. decreasing logical value, sorting     increasing decreasing order? character name variable names, sort;     formula giving variables, sort;     NULL, case, data frame / data set     sorted variables. na.last controlling treatment 'NA's. 'TRUE', missing           values data put last; 'FALSE', put           first; 'NA', removed ... arguments, currently ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/sort-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience Methods to Sort Data Frames and Data Sets — sort-methods","text":"sorted copy x.","code":""},{"path":"https://melff.github.io/mclogit/reference/sort-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience Methods to Sort Data Frames and Data Sets — sort-methods","text":"","code":"DF <- data.frame(         a = sample(1:2,size=20,replace=TRUE),         b = sample(1:4,size=20,replace=TRUE)) sort(DF) #>    a b #> 1  1 1 #> 14 1 3 #> 2  1 4 #> 7  1 4 #> 15 1 4 #> 8  2 1 #> 9  2 1 #> 18 2 1 #> 20 2 1 #> 4  2 2 #> 10 2 2 #> 13 2 2 #> 16 2 2 #> 17 2 2 #> 3  2 4 #> 5  2 4 #> 6  2 4 #> 11 2 4 #> 12 2 4 #> 19 2 4 sort(DF,by=~a+b) #>    a b #> 1  1 1 #> 8  2 1 #> 9  2 1 #> 18 2 1 #> 20 2 1 #> 4  2 2 #> 10 2 2 #> 13 2 2 #> 16 2 2 #> 17 2 2 #> 14 1 3 #> 2  1 4 #> 7  1 4 #> 15 1 4 #> 3  2 4 #> 5  2 4 #> 6  2 4 #> 11 2 4 #> 12 2 4 #> 19 2 4 sort(DF,by=~b+a) #>    a b #> 1  1 1 #> 14 1 3 #> 2  1 4 #> 7  1 4 #> 15 1 4 #> 8  2 1 #> 9  2 1 #> 18 2 1 #> 20 2 1 #> 4  2 2 #> 10 2 2 #> 13 2 2 #> 16 2 2 #> 17 2 2 #> 3  2 4 #> 5  2 4 #> 6  2 4 #> 11 2 4 #> 12 2 4 #> 19 2 4 sort(DF,by=c(\"b\",\"a\")) #>    a b #> 1  1 1 #> 8  2 1 #> 9  2 1 #> 18 2 1 #> 20 2 1 #> 4  2 2 #> 10 2 2 #> 13 2 2 #> 16 2 2 #> 17 2 2 #> 14 1 3 #> 2  1 4 #> 7  1 4 #> 15 1 4 #> 3  2 4 #> 5  2 4 #> 6  2 4 #> 11 2 4 #> 12 2 4 #> 19 2 4 sort(DF,by=c(\"a\",\"b\")) #>    a b #> 1  1 1 #> 14 1 3 #> 2  1 4 #> 7  1 4 #> 15 1 4 #> 8  2 1 #> 9  2 1 #> 18 2 1 #> 20 2 1 #> 4  2 2 #> 10 2 2 #> 13 2 2 #> 16 2 2 #> 17 2 2 #> 3  2 4 #> 5  2 4 #> 6  2 4 #> 11 2 4 #> 12 2 4 #> 19 2 4"},{"path":"https://melff.github.io/mclogit/reference/stats-conveniences.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience wrappers for common statistical functions — Mean","title":"Convenience wrappers for common statistical functions — Mean","text":"Mean(), Median(), etc. mere wrappers  functions mean(), median(), etc.  na.rm= optional argument set TRUE default.","code":""},{"path":"https://melff.github.io/mclogit/reference/stats-conveniences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience wrappers for common statistical functions — Mean","text":"","code":"Mean(x, na.rm=TRUE, ...) Median(x, na.rm=TRUE, ...) Min(x, na.rm=TRUE, ...) Max(x, na.rm=TRUE, ...) Weighted.Mean(x, w, ..., na.rm = TRUE) Var(x, na.rm=TRUE, ...) StdDev(x, na.rm=TRUE, ...)  Cov(x, y = NULL, use = \"pairwise.complete.obs\", ...) Cor(x, y = NULL, use = \"pairwise.complete.obs\", ...) Range(..., na.rm = TRUE, finite = FALSE)"},{"path":"https://melff.github.io/mclogit/reference/stats-conveniences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience wrappers for common statistical functions — Mean","text":"x (numeric) vector. y (numeric) vector NULL. w (numeric) vector weights. na.rm logical value, see mean. use character string, see cor. ... arguments, passed wrapped functions. finite logical value, see range.","code":""},{"path":"https://melff.github.io/mclogit/reference/styles.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting Styles for Coefficients, Factor Contrasts, and Summary Statistics — styles","title":"Formatting Styles for Coefficients, Factor Contrasts, and Summary Statistics — styles","text":"Methods setting getting templates formatting   model coefficients summaries use mtable.","code":""},{"path":"https://melff.github.io/mclogit/reference/styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting Styles for Coefficients, Factor Contrasts, and Summary Statistics — styles","text":"","code":"setCoefTemplate(...) getCoefTemplate(style) getSummaryTemplate(x) setSummaryTemplate(...) summaryTemplate(x)"},{"path":"https://melff.github.io/mclogit/reference/styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting Styles for Coefficients, Factor Contrasts, and Summary Statistics — styles","text":"... sevaral tagged arguments; case setCoefTemplate     tags specify coef.styles, case setSummaryTemplate     specify model classes.     associated values templates. style character string name coefficient style,       left empty, coefficient templates returned. x model name model class, example \"lm\" \"glm\";     left empty, summary templates returned.","code":""},{"path":"https://melff.github.io/mclogit/reference/styles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Formatting Styles for Coefficients, Factor Contrasts, and Summary Statistics — styles","text":"style model coefficients formatted mtable   default selected coef.style setting options,   \"factory-fresh\" setting options(coef.style=\"default\"). appearance factor levels mtable   can influenced factor.style setting options.   \"factory-fresh\" setting options(factor.style=\"($f): ($l)\"),   ($f) stands factor name ($l) stands   factor level. case treatment contrasts, baseline level   also appear mtable separated current   factor level baselevel.sep setting options.   \"factory-fresh\" setting options(baselevel.sep=\"-\"), Users may specify additional coefficient styles call setCoefTemplate. order adapt display summary statistics model classes, users need   set template model summaries via call setSummaryTemplate   define method generic function summaryTemplate.","code":""},{"path":"https://melff.github.io/mclogit/reference/tibbles.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to Packages 'tibble' and 'haven' — tibbles","title":"Interface to Packages 'tibble' and 'haven' — tibbles","text":"as_tibble method (as_table.data.set) allows transform \"data.set\" objects   objects class \"tbl_df\" defined package   \"tibble\". .item methods objects classes \"haven_labelled\"   \"have_labelled_spss\" allow transform \"tibble\" imported   using read_dta, read_spss, etc. package \"haven\"   object class \"data.set\". as_haven can used transform \"data.set\" objects   objects class \"tbl_df\" additional information   objects imported using \"haven\" package usually , .e.   variable labels value labels (\"label\"   \"labels\" attributes columns).","code":""},{"path":"https://melff.github.io/mclogit/reference/tibbles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface to Packages 'tibble' and 'haven' — tibbles","text":"","code":"as_tibble.data.set(x,...) # S4 method for haven_labelled as.item(x,...) # S4 method for haven_labelled_spss as.item(x,...) as_haven(x,...) # S4 method for data.set as_haven(x,user_na=FALSE,...) # S4 method for item.vector as_haven(x,user_na=FALSE,...) # S4 method for tbl_df as.data.set(x,row.names=NULL,...)"},{"path":"https://melff.github.io/mclogit/reference/tibbles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface to Packages 'tibble' and 'haven' — tibbles","text":"x as_tibble.data.set as_haven, object     class \"data.set\"; .item, object class     \"haven_labelled\" \"haven_labelled_spss\";     object class \"tbl_df\" .data.set. user_na logical; TRUE resulting vectors     \"na_values\" /\"na_range\" attribute. row.names NULL optional character vector row names. ... arguments, passed     as_tibble method lists, ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/tibbles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface to Packages 'tibble' and 'haven' — tibbles","text":"as_tibble.data.set \"data.set\"-method  as_haven return \"tibble\". \"item.vector\"-method   (internal use ) returns vector S3 class either  \"haven_labelled\" \"haven_labelled_spss\".","code":""},{"path":"https://melff.github.io/mclogit/reference/toDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an Array into a Data Frame — to.data.frame","title":"Convert an Array into a Data Frame — to.data.frame","text":".data.frame converts array data frame, way   chosen dimensional extent forms variables data frame.   elements array must either atomic, data frames   matching variables, coercable data frames.","code":""},{"path":"https://melff.github.io/mclogit/reference/toDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an Array into a Data Frame — to.data.frame","text":"","code":"to.data.frame(X,as.vars=1,name=\"Freq\")"},{"path":"https://melff.github.io/mclogit/reference/toDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an Array into a Data Frame — to.data.frame","text":"X array. .vars numeric value character string.     numeric value indicates dimensional extend     defines variables. character string     matched names dimenstional extents.     applicable e.g. X contingency table     dimensional extents named cross-classified factors.     Takes effect X      atomic array. .vars equals zero, new variable     created contains values array, ,     .data.frame acts array X     like .data.frame(.table(X)) name character string; name variable     created X atomic array .vars equals zero.","code":""},{"path":"https://melff.github.io/mclogit/reference/toDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an Array into a Data Frame — to.data.frame","text":"data frame.","code":""},{"path":"https://melff.github.io/mclogit/reference/toDataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an Array into a Data Frame — to.data.frame","text":"","code":"berkeley <- Aggregate(Table(Admit,Freq)~.,data=UCBAdmissions) berktest1 <- By(~Dept+Gender,                 glm(cbind(Admitted,Rejected)~1,family=\"binomial\"),                 data=berkeley) berktest2 <- By(~Dept,                 glm(cbind(Admitted,Rejected)~Gender,family=\"binomial\"),                 data=berkeley) Stest1 <- Lapply(berktest2,function(x)predict(x,,se.fit=TRUE)[c(\"fit\",\"se.fit\")]) Stest2 <- Sapply(berktest2,function(x)coef(summary(x))) Stest2.1 <- Lapply(berktest1,function(x)predict(x,,se.fit=TRUE)[c(\"fit\",\"se.fit\")]) to.data.frame(Stest1) #>    Dept        fit     se.fit #> 1     A  0.4921214 0.07174966 #> 2     A  1.5441974 0.25272027 #> 3     B  0.5337493 0.08754301 #> 4     B  0.7537718 0.42874646 #> 5     C -0.5355182 0.11494077 #> 6     C -0.6604399 0.08664894 #> 7     D -0.7039581 0.10407019 #> 8     D -0.6219709 0.10831411 #> 9     E -0.9569618 0.16159920 #> 10    E -1.1571488 0.11824880 #> 11    F -2.7697438 0.21978068 #> 12    F -2.5808479 0.21171027 to.data.frame(Stest2,as.vars=2) #>            Var1 Dept    Estimate Std. Error     z value     Pr(>|z|) #> 1   (Intercept)    A  0.49212143 0.07174966   6.8588682 6.940825e-12 #> 2  GenderFemale    A  1.05207596 0.26270810   4.0047336 6.208742e-05 #> 3   (Intercept)    B  0.53374926 0.08754301   6.0969945 1.080813e-09 #> 4  GenderFemale    B  0.22002254 0.43759263   0.5028022 6.151033e-01 #> 5   (Intercept)    C -0.53551824 0.11494077  -4.6590799 3.176259e-06 #> 6  GenderFemale    C -0.12492163 0.14394242  -0.8678583 3.854719e-01 #> 7   (Intercept)    D -0.70395810 0.10407019  -6.7642627 1.339898e-11 #> 8  GenderFemale    D  0.08198719 0.15020836   0.5458231 5.851875e-01 #> 9   (Intercept)    E -0.95696177 0.16159920  -5.9218225 3.183932e-09 #> 10 GenderFemale    E -0.20018702 0.20024255  -0.9997227 3.174447e-01 #> 11  (Intercept)    F -2.76974377 0.21978068 -12.6023077 2.050557e-36 #> 12 GenderFemale    F  0.18889583 0.30516354   0.6189987 5.359172e-01 to.data.frame(Stest2.1) #>    Dept Gender        fit     se.fit #> 1     A   Male  0.4921214 0.07174966 #> 2     B   Male  0.5337493 0.08754301 #> 3     C   Male -0.5355182 0.11494077 #> 4     D   Male -0.7039581 0.10407019 #> 5     E   Male -0.9569618 0.16159920 #> 6     F   Male -2.7697438 0.21978068 #> 7     A Female  1.5441974 0.25272027 #> 8     B Female  0.7537718 0.42874646 #> 9     C Female -0.6604399 0.08664894 #> 10    D Female -0.6219709 0.10831411 #> 11    E Female -1.1571488 0.11824870 #> 12    F Female -2.5808479 0.21171027 # Recasting a contingency table to.data.frame(UCBAdmissions,as.vars=\"Admit\") #>    Gender Dept Admitted Rejected #> 1    Male    A      512      313 #> 2  Female    A       89       19 #> 3    Male    B      353      207 #> 4  Female    B       17        8 #> 5    Male    C      120      205 #> 6  Female    C      202      391 #> 7    Male    D      138      279 #> 8  Female    D      131      244 #> 9    Male    E       53      138 #> 10 Female    E       94      299 #> 11   Male    F       22      351 #> 12 Female    F       24      317"},{"path":"https://melff.github.io/mclogit/reference/toLatexExtra.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional Methods for LaTeX Representations for R objects — toLatex","title":"Additional Methods for LaTeX Representations for R objects — toLatex","text":"Methods generic function toLatex package ``utils''   provided generating LaTeX representations   matrices flat contingency tables (see ftable). Also default method defined   coerces first argument matrix applies   matrix method.","code":""},{"path":"https://melff.github.io/mclogit/reference/toLatexExtra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional Methods for LaTeX Representations for R objects — toLatex","text":"","code":"# S3 method for default toLatex(object,...)  # S3 method for matrix toLatex(object,     show.titles=TRUE,     show.vars=FALSE,     show.xvar=show.vars,     show.yvar=show.vars,     digits=if(is.table(object)) 0 else getOption(\"digits\"),     format=\"f\",     useDcolumn=getOption(\"useDcolumn\",TRUE),     colspec=if(useDcolumn)                 paste(\"D{.}{\",LaTeXdec,\"}{\",ddigits,\"}\",sep=\"\")              else \"r\",     LaTeXdec=\".\",     ddigits=digits,     useBooktabs=getOption(\"useBooktabs\",TRUE),     toprule=if(useBooktabs) \"\\\\toprule\" else \"\\\\hline\\\\hline\",     midrule=if(useBooktabs) \"\\\\midrule\" else \"\\\\hline\",     cmidrule=if(useBooktabs) \"\\\\cmidrule\" else \"\\\\cline\",     bottomrule=if(useBooktabs) \"\\\\bottomrule\" else \"\\\\hline\\\\hline\",     toLatex.escape.tex=getOption(\"toLatex.escape.tex\",FALSE),     ...)   # S3 method for data.frame toLatex(object,     digits=getOption(\"digits\"),     format=\"f\",     useDcolumn=getOption(\"useDcolumn\",TRUE),     numeric.colspec=if(useDcolumn)                        paste(\"D{.}{\",LaTeXdec,\"}{\",ddigits,\"}\",sep=\"\")                     else \"r\",     factor.colspec=\"l\",     LaTeXdec=\".\",     ddigits=digits,     useBooktabs=getOption(\"useBooktabs\",TRUE),     toprule=if(useBooktabs) \"\\\\toprule\" else \"\\\\hline\\\\hline\",     midrule=if(useBooktabs) \"\\\\midrule\" else \"\\\\hline\",     cmidrule=if(useBooktabs) \"\\\\cmidrule\" else \"\\\\cline\",     bottomrule=if(useBooktabs) \"\\\\bottomrule\" else \"\\\\hline\\\\hline\",     row.names=is.character(attr(object,\"row.names\")),     NAas=\"\",     toLatex.escape.tex=getOption(\"toLatex.escape.tex\",FALSE),     ...)  # S3 method for ftable toLatex(object,     show.titles=TRUE,     digits=if(is.integer(object)) 0 else getOption(\"digits\"),     format=if(is.integer(object)) \"d\" else \"f\",     useDcolumn=getOption(\"useDcolumn\",TRUE),     colspec=if(useDcolumn)                 paste(\"D{.}{\",LaTeXdec,\"}{\",ddigits,\"}\",sep=\"\")              else \"r\",     LaTeXdec=\".\",     ddigits=digits,     useBooktabs=getOption(\"useBooktabs\",TRUE),     toprule=if(useBooktabs) \"\\\\toprule\" else \"\\\\hline\\\\hline\",     midrule=if(useBooktabs) \"\\\\midrule\" else \"\\\\hline\\n\",     cmidrule=if(useBooktabs) \"\\\\cmidrule\" else \"\\\\cline\",     bottomrule=if(useBooktabs) \"\\\\bottomrule\" else \"\\\\hline\\\\hline\",     extrarowsep = NULL,     toLatex.escape.tex=getOption(\"toLatex.escape.tex\",FALSE),     fold.leaders=FALSE,     ...)  # S3 method for ftable_matrix toLatex(object,     show.titles=TRUE,     digits=getOption(\"digits\"),     format=\"f\",     useDcolumn=getOption(\"useDcolumn\",TRUE),     colspec=if(useDcolumn)                 paste(\"D{.}{\",LaTeXdec,\"}{\",ddigits,\"}\",sep=\"\")              else \"r\",     LaTeXdec=\".\",     ddigits=digits,     useBooktabs=getOption(\"useBooktabs\",TRUE),     toprule=if(useBooktabs) \"\\\\toprule\" else \"\\\\hline\\\\hline\",     midrule=if(useBooktabs) \"\\\\midrule\" else \"\\\\hline\",     cmidrule=if(useBooktabs) \"\\\\cmidrule\" else \"\\\\cline\",     bottomrule=if(useBooktabs) \"\\\\bottomrule\" else \"\\\\hline\\\\hline\",     compact=FALSE,     varontop,varinfront,     groupsep=\"3pt\",     grouprule=midrule,     toLatex.escape.tex=getOption(\"toLatex.escape.tex\",FALSE),     ...)"},{"path":"https://melff.github.io/mclogit/reference/toLatexExtra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional Methods for LaTeX Representations for R objects — toLatex","text":"object ftable, matrix object coercable       matrix. show.titles logical, variable names (case       ftable table methods)       row column names (case matrix method) appear       LaTeX code? show.vars,show.xvar,show.yvar logical, names dimnames object       shown margins LaTeX tabular? names usually represent       row /column variables two-dimensional table. digits number significant digits. format character containing format specifier, see format. useDcolumn logical, facilities dcolumn LaTeX package used?           Note , TRUE, need include \\usepackage{dcolumn}           preamble LaTeX document. colspec character, LaTeX table column format specifyer(s). numeric.colspec character, LaTeX table column format           specifyer(s) numeric vectors data frame. factor.colspec character, LaTeX table column format           specifyer(s) factors data frame. LaTeXdec character, decimal point final LaTeX output. ddigits integer, digits decimal point. useBooktabs logical, facilities booktabs LaTeX package used?           Note , TRUE, need include \\usepackage{booktabs}           preamble LaTeX document. toprule character string, TeX code determines appearance top border LaTeX tabular environment. midrule character string, TeX code determines  coefficients summary statistics         separated LaTeX tabular environment. cmidrule character string, TeX code determines appearance rules section headings. bottomrule character string, TeX code determines appearance bottom border LaTeX tabular environment. extrarowsep character string, extra code inserted column titles      table body produced toLatex. compact logical, TRUE, extra column space sub-tables          suppressed. Defaults FALSE varontop logical, whether names column variables appear top factor levels varinfront logical, whether names row variables appear front factor levels groupsep character string, containing TeX length; extra        vertical space inserted sub-tables, unless compact TRUE. grouprule character string, TeX code determines        sub-table headings embellished. row.names logical, whether row names included \t\t\t exported LaTeX code. NAas character string, missing values represented. toLatex.escape.tex logical, symbols \"$\", \"_\", \"^\" \t   escaped backslashes? fold.leaders logical, TRUE, factor levels row        variables distributed different columns,        'folded' single column. ... argument, currently ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/toLatexExtra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional Methods for LaTeX Representations for R objects — toLatex","text":"","code":"toLatex(diag(5)) #> \\begin{tabular}{D{.}{.}{7}D{.}{.}{7}D{.}{.}{7}D{.}{.}{7}D{.}{.}{7}} #> \\toprule #> 1.0000000 & 0.0000000 & 0.0000000 & 0.0000000 & 0.0000000 \\\\ #> 0.0000000 & 1.0000000 & 0.0000000 & 0.0000000 & 0.0000000 \\\\ #> 0.0000000 & 0.0000000 & 1.0000000 & 0.0000000 & 0.0000000 \\\\ #> 0.0000000 & 0.0000000 & 0.0000000 & 1.0000000 & 0.0000000 \\\\ #> 0.0000000 & 0.0000000 & 0.0000000 & 0.0000000 & 1.0000000 \\\\ #> \\bottomrule #> \\end{tabular}  toLatex(ftable(UCBAdmissions)) #> \\begin{tabular}{lllD{.}{.}{7}D{.}{.}{7}D{.}{.}{7}D{.}{.}{7}D{.}{.}{7}D{.}{.}{7}} #> \\toprule #> & && \\multicolumn{6}{c}{Dept}\\\\ #> \\cmidrule{4-4}\\cmidrule{5-5}\\cmidrule{6-6}\\cmidrule{7-7}\\cmidrule{8-8}\\cmidrule{9-9} #> Admit&Gender && \\multicolumn{1}{c}{A}&\\multicolumn{1}{c}{B}&\\multicolumn{1}{c}{C}&\\multicolumn{1}{c}{D}&\\multicolumn{1}{c}{E}&\\multicolumn{1}{c}{F}\\\\ #> \\midrule #> Admitted&Male     && 512.0000000 & 353.0000000 & 120.0000000 & 138.0000000 & 53.0000000  & 22.0000000 \\\\ #>         &Female   && 89.0000000  & 17.0000000  & 202.0000000 & 131.0000000 & 94.0000000  & 24.0000000 \\\\ #> Rejected&Male     && 313.0000000 & 207.0000000 & 205.0000000 & 279.0000000 & 138.0000000 & 351.0000000\\\\ #>         &Female   && 19.0000000  & 8.0000000   & 391.0000000 & 244.0000000 & 299.0000000 & 317.0000000\\\\ #> \\bottomrule #> \\end{tabular}  toLatex(rbind(   ftable(margin.table(UCBAdmissions,c(2,1))),   ftable(margin.table(UCBAdmissions,c(3,1))) )) #> \\begin{tabular}{llD{.}{.}{7}D{.}{.}{7}} #> \\toprule #> &&\\multicolumn{2}{c}{Admit}\\\\ #> \\cmidrule{3-4} #> &&\\multicolumn{1}{c}{Admitted}&\\multicolumn{1}{c}{Rejected}\\\\ #> \\midrule #> Gender&Male&1198.0000000&1493.0000000\\\\ #> &Female&557.0000000&1278.0000000\\\\ #> \\midrule Dept&A&601.0000000&332.0000000\\\\ #> &B&370.0000000&215.0000000\\\\ #> &C&322.0000000&596.0000000\\\\ #> &D&269.0000000&523.0000000\\\\ #> &E&147.0000000&437.0000000\\\\ #> &F&46.0000000&668.0000000\\\\ #> \\bottomrule #> \\end{tabular}"},{"path":"https://melff.github.io/mclogit/reference/trim-labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim Codes from the Labels of an Item — trim_labels","title":"Trim Codes from the Labels of an Item — trim_labels","text":"Occasionally, labels codes survey data sets (e.g.   2016 American National Election Study) include   character representation codes labelled. may   technical reasons , often inconvenient (e.g. one   wants reorder labelled codes). function trim_labels   trims code representations (present.)","code":""},{"path":"https://melff.github.io/mclogit/reference/trim-labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim Codes from the Labels of an Item — trim_labels","text":"","code":"trim_labels(x,...) # S4 method for item.vector trim_labels(x,...) # S4 method for data.set trim_labels(x,...)"},{"path":"https://melff.github.io/mclogit/reference/trim-labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim Codes from the Labels of an Item — trim_labels","text":"x object -- \"item\" object \"data.set\" object ... arguments, currently ignored","code":""},{"path":"https://melff.github.io/mclogit/reference/trim-labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trim Codes from the Labels of an Item — trim_labels","text":"\"data.set\" method applies \"item.vector\" method   labelled items data set. \"item.vector\" returns copy argument modified labels,   label \"1. First alternative\" changed \"First alternative\".","code":""},{"path":"https://melff.github.io/mclogit/reference/trim-labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim Codes from the Labels of an Item — trim_labels","text":"","code":"x <- as.item(sample(1:3,10,replace=TRUE),              labels=c(\"1. One\"=1,                       \"2. Two\"=2,                       \"2. Three\"=3)) y <- as.item(sample(1:2,10,replace=TRUE),              labels=c(\"1. First category\"=1,                       \"2. Second category\"=2)) ds <- data.set(x,y) x <- trim_labels(x) codebook(x) #> ================================================================================ #>  #>    x #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'One'                 3    30.0 #>    2 'Two'                 3    30.0 #>    3 'Three'               4    40.0 #>  ds <- trim_labels(ds) codebook(ds) #> ================================================================================ #>  #>    x #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels       N Percent #>                                      #>    1 'One'                 3    30.0 #>    2 'Two'                 3    30.0 #>    3 'Three'               4    40.0 #>  #> ================================================================================ #>  #>    y #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: integer #>    Measurement: nominal #>  #>    Values and labels         N Percent #>                                        #>    1 'First category'        5    50.0 #>    2 'Second category'       5    50.0 #>"},{"path":"https://melff.github.io/mclogit/reference/utility-classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Named Lists, Lists of Items, and Atomic Vectors — Utility classes","title":"Named Lists, Lists of Items, and Atomic Vectors — Utility classes","text":"classes \"named.list\" \"item.list\" merely   'helper classes' construction classes \"data.set\"   \"importer\". Class \"named.list\" extends basic class \"list\" additional   slot \"names\". initialize method assures names   list unique. Class \"item.list\" extends class \"named.list\",   add slots. \"named.list\" differs    initialize method, calls \"named.list\"   makes sure elements list belong    class \"item\". Classes \"atomic\" \"double\" merely used   method selection.","code":""},{"path":"https://melff.github.io/mclogit/reference/utility-classes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Named Lists, Lists of Items, and Atomic Vectors — Utility classes","text":"","code":"new(\"named.list\",a=1,b=2) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>   # This should generate an error, since the names # are not unique. try(new(\"named.list\",a=1,a=2)) #> Error in validObject(.Object) :  #>   invalid class “named.list” object: list has duplicate names: \"a\"  # Another error, one name is missing. try(new(\"named.list\",a=1,2)) #> Error in validObject(.Object) :  #>   invalid class “named.list” object: element 2 is unnamed  # Also an error, the resulting list would be unnamed. try(new(\"named.list\",1,2)) #> Error in validObject(.Object) :  #>   invalid class “named.list” object: list is unnamed   new(\"item.list\",a=1,b=2) #> $a #>  #> Item (measurement: interval, type: double, length = 1)  #>  #>  [1:1] 1 #>  #> $b #>  #> Item (measurement: interval, type: double, length = 1)  #>  #>  [1:1] 2 #>   # Also an error: \"item.list\"s are \"named.lists\", # and here the names would be non-unique. try(new(\"item.list\",a=1,a=2)) #> Error in validObject(.Object) :  #>   invalid class “item.list” object: list has duplicate names: \"a\""},{"path":"https://melff.github.io/mclogit/reference/value-filters.html","id":null,"dir":"Reference","previous_headings":"","what":"Value Filters — value.filter","title":"Value Filters — value.filter","text":"Value filters, objects inherit class \"value.filter\",   mechanism distinguish valid codes survey   item codes considered missing,   codes answers like \"know\" \"answer refused\". Value filters optional slot values \"item\" objects.   determine codes \"item\" objects   replaced NA coerced   vector factor. three (sub)classes value filters:   \"missing.values\", specify individual   missing values /range missing values;   \"valid.values\", specify individual   valid values (, values   item considered missing);   \"valid.range\", specify range   valid values (, values outside range   considered missing).   Value filters class \"missing.values\" correspond   missing-values declarations SPSS files,     imported spss.fixed.file,   spss.portable.file,   spss.system.file. Value filters also can updated using  +   - operators.","code":""},{"path":"https://melff.github.io/mclogit/reference/value-filters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value Filters — value.filter","text":"","code":"value.filter(x)  missing.values(x) missing.values(x)<-value  valid.values(x) valid.values(x)<-value  valid.range(x) valid.range(x)<-value  is.valid(x) nvalid(x) is.missing(x) include.missings(x,mark=\"*\")"},{"path":"https://melff.github.io/mclogit/reference/value-filters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value Filters — value.filter","text":"x,value objects appropriate class. mark character string, used pasted   value labels x (present).","code":""},{"path":"https://melff.github.io/mclogit/reference/value-filters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value Filters — value.filter","text":"value.filter(x), missing.values(x), valid.values(x), valid.range(x),   return value filter associated x,   object class \"value.filter\", , class   \"missing.values\", \"valid.values\", \"valid.range\", respectively.  .missing(x) returns logical vector indicating   element x whether missing value .  .valid(x) returns logical vector indicating   element x whether valid value .  nvalid(x) returns number elements x valid. convenience, .missing(x) .valid(x) also work   atomic vectors factors, equivalent  .na(x) !.na(x). atomic vectors factors,  nvalid(x) returns number elements x   !.na(x) TRUE.  include.missings(x,...) returns copy x values declared valid.","code":""},{"path":"https://melff.github.io/mclogit/reference/value-filters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value Filters — value.filter","text":"","code":"x <- rep(c(1:4,8,9),2,length=60) labels(x) <- c(     a=1,     b=2,     c=3,     d=4,     dk=8,     refused=9     ) missing.values(x) <- 9 missing.values(x) #> 9 missing.values(x) <- missing.values(x) + 8 missing.values(x) #> 9, 8 missing.values(x) <- NULL missing.values(x) #> NULL missing.values(x) <- list(range=c(8,Inf)) missing.values(x) #> 8 - Inf valid.values(x) #> 1, 2, 3, 4 print(x) #>  [1]        a        b        c        d      *dk *refused        a        b #>  [9]        c        d      *dk *refused        a        b        c        d #> [17]      *dk *refused        a        b        c        d      *dk *refused #> [25]        a        b        c        d      *dk *refused        a        b #> [33]        c        d      *dk *refused        a        b        c        d #> [41]      *dk *refused        a        b        c        d      *dk *refused #> [49]        a        b        c        d      *dk *refused        a        b #> [57]        c        d      *dk *refused is.missing(x) #>  [1] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE #> [13] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE #> [25] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE #> [37] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE #> [49] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE is.valid(x) #>  [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE #> [13]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE #> [25]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE #> [37]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE #> [49]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE as.factor(x) #>  [1] a    b    c    d    <NA> <NA> a    b    c    d    <NA> <NA> a    b    c    #> [16] d    <NA> <NA> a    b    c    d    <NA> <NA> a    b    c    d    <NA> <NA> #> [31] a    b    c    d    <NA> <NA> a    b    c    d    <NA> <NA> a    b    c    #> [46] d    <NA> <NA> a    b    c    d    <NA> <NA> a    b    c    d    <NA> <NA> #> Levels: a b c d as.factor(include.missings(x)) #>  [1] a        b        c        d        *dk      *refused a        b        #>  [9] c        d        *dk      *refused a        b        c        d        #> [17] *dk      *refused a        b        c        d        *dk      *refused #> [25] a        b        c        d        *dk      *refused a        b        #> [33] c        d        *dk      *refused a        b        c        d        #> [41] *dk      *refused a        b        c        d        *dk      *refused #> [49] a        b        c        d        *dk      *refused a        b        #> [57] c        d        *dk      *refused #> Levels: a b c d *dk *refused as.integer(x) #>  [1]  1  2  3  4 NA NA  1  2  3  4 NA NA  1  2  3  4 NA NA  1  2  3  4 NA NA  1 #> [26]  2  3  4 NA NA  1  2  3  4 NA NA  1  2  3  4 NA NA  1  2  3  4 NA NA  1  2 #> [51]  3  4 NA NA  1  2  3  4 NA NA as.integer(include.missings(x)) #>  [1] 1 2 3 4 8 9 1 2 3 4 8 9 1 2 3 4 8 9 1 2 3 4 8 9 1 2 3 4 8 9 1 2 3 4 8 9 1 2 #> [39] 3 4 8 9 1 2 3 4 8 9 1 2 3 4 8 9 1 2 3 4 8 9"},{"path":"https://melff.github.io/mclogit/reference/view.html","id":null,"dir":"Reference","previous_headings":"","what":"A Generic Viewing Function — view","title":"A Generic Viewing Function — view","text":"function view provides generic interface non-generic   function View. contrast implementation View provided either   basic R RStudio, function can extended   handle new kinds objects defining viewPrep methods   . , view can adapted GUIs specifying   \"vfunc\" option vfunc= optional argument. Internally, view usues generic function viewPrep   prepare data can passed (non-generic) function   View (optionally) different graphical user interface   function can used display matrix- data frame-like   objects. vfunc argument determines result viewPrep   displayed. default function View,   alternative view_html creates displays HTML grid.","code":""},{"path":"https://melff.github.io/mclogit/reference/view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Generic Viewing Function — view","text":"","code":"view(x,      title=deparse(substitute(x)),      vfunc=getOption(\"vfunc\",\"View\"),      ...)  # The internal generic, not intended to be used by the end-user. viewPrep(x,title,...) # S3 method for data.set viewPrep(x,title,...) # S3 method for data.frame viewPrep(x,title,...) # S3 method for descriptions viewPrep(x,title,...) # S3 method for codeplan viewPrep(x,title,compact=FALSE,...) # S3 method for importer viewPrep(x,title,compact=TRUE,...)"},{"path":"https://melff.github.io/mclogit/reference/view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Generic Viewing Function — view","text":"x object, e.g. data frame, data.set, importer. title optional character string; shown title     display. vfunc character string; name GUI function call     results viewPrep() compact logical value; codeplan shown     compact form - one line per variable - expanive form -     one line per labelled value? ... arguments; view() passes     viewPrep.","code":""},{"path":"https://melff.github.io/mclogit/reference/view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Generic Viewing Function — view","text":"","code":"if (FALSE) {     example(data.set)     view(Data)     view(description(Data))     view(codeplan(Data))     # Note that this file is *not* included in the package     # and has to be obtained from GESIS in order to run the      # following     ZA7500sav <- spss.file(\"ZA7500_v2-0-0.sav\")     view(ZA7500sav) }"},{"path":"https://melff.github.io/mclogit/reference/view_html.html","id":null,"dir":"Reference","previous_headings":"","what":"HTML Output for 'view. — view_html","title":"HTML Output for 'view. — view_html","text":"alternative 'View' use 'view'.","code":""},{"path":"https://melff.github.io/mclogit/reference/view_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTML Output for 'view. — view_html","text":"","code":"view_html(x,title=deparse(substitute(x)),output,...)"},{"path":"https://melff.github.io/mclogit/reference/view_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTML Output for 'view. — view_html","text":"x result viewPrep, matrix character strings. title optional character string; shown title     display. output function name function. determines     HTML code directed . working environment RStudio, default value     \"file.show\". interactive environments     \"browser\". non-interactive sessions      \"stdout\". output equals \"browser\" generated HTML code     shown using browseURL. output     equals \"stdout\" HTML code written console     output window. output equals \"file.show\",     function file.show used. view_html called within Jupyter session,     HTML code created envelopped pair <div> tags     included Jupyter output. ... arguments; ignored.","code":""},{"path":"https://melff.github.io/mclogit/reference/view_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTML Output for 'view. — view_html","text":"","code":"if (FALSE) {     example(data.set)     view(Data,vfunc=view_html) }"},{"path":"https://melff.github.io/mclogit/reference/wild.codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of frequencies for unlabelled codes — wild.codes","title":"Table of frequencies for unlabelled codes — wild.codes","text":"function wild.codes creates table frequencies codes   item labelled attached . way, helps identify   coding errors.","code":""},{"path":"https://melff.github.io/mclogit/reference/wild.codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of frequencies for unlabelled codes — wild.codes","text":"","code":"wild.codes(x) # S4 method for item wild.codes(x)"},{"path":"https://melff.github.io/mclogit/reference/wild.codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of frequencies for unlabelled codes — wild.codes","text":"x object class \"item\"","code":""},{"path":"https://melff.github.io/mclogit/reference/wild.codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of frequencies for unlabelled codes — wild.codes","text":"table frequencies (.e. array class \"table\")","code":""},{"path":"https://melff.github.io/mclogit/reference/withVCov.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Alternative Variance Estimates to Models Estimates — withSE","title":"Add Alternative Variance Estimates to Models Estimates — withSE","text":"simple object-orientation infrastructure add alternative standard   errors, e.g. sandwich estimates New-West standard errors    fitted regression-type models, fitted lm() glm().","code":""},{"path":"https://melff.github.io/mclogit/reference/withVCov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Alternative Variance Estimates to Models Estimates — withSE","text":"","code":"withSE(object, vcov, ...)   withVCov(object, vcov, ...)  # S3 method for lm withVCov(object, vcov, ...)  # S3 method for withVCov summary(object, ...) # S3 method for withVCov.lm summary(object, ...)"},{"path":"https://melff.github.io/mclogit/reference/withVCov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Alternative Variance Estimates to Models Estimates — withSE","text":"object fitted model object vcov function returns variance matrix estimate,     given matrix estimate, character string     identifies function returns variance matrix estimate     (e.g. \"HAC\" vcovHAC). ... arguments, passed vcov() , respectively,     parent method summary()","code":""},{"path":"https://melff.github.io/mclogit/reference/withVCov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Alternative Variance Estimates to Models Estimates — withSE","text":"Using withVCov() alternative variance-covariance matrix attributed fitted model object. matrix may produced variance estimators provided \"sandwich\" package package extends . withVCov() consequences fitted model printed represented, consequences standard errors reported, function summary() function mtable() applied. withSE() convenience front-end withVCov(). can called way withVCov, also allows specify type variance estimate character string identifies function gives covariance matrix (e.g. \"OPG\" vcovOPG).","code":""},{"path":"https://melff.github.io/mclogit/reference/withVCov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Alternative Variance Estimates to Models Estimates — withSE","text":"withVCov returns slightly modified model object: adds   attribute named \".VCov\" contains alternate covaraince matrix   modifies class attribute. e.g. original model object class   \"lm\" model object modified withVCov class   attribute c(\"withVCov.lm\", \"withVCov\", \"lm\").","code":""},{"path":"https://melff.github.io/mclogit/reference/withVCov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Alternative Variance Estimates to Models Estimates — withSE","text":"","code":"## Generate poisson regression relationship x <- sin(1:100) y <- rpois(100, exp(1 + x)) ## compute usual covariance matrix of coefficient estimates fm <- glm(y ~ x, family = poisson)  library(sandwich) fmo <- withVCov(fm,vcovOPG) vcov(fm) #>              (Intercept)            x #> (Intercept)  0.004299161 -0.003546488 #> x           -0.003546488  0.007671187 vcov(fmo) #>              (Intercept)            x #> (Intercept)  0.005052204 -0.004860083 #> x           -0.004860083  0.008847587  summary(fm) #>  #> Call: #> glm(formula = y ~ x, family = poisson) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  1.06954    0.06557   16.31   <2e-16 *** #> x            1.04135    0.08759   11.89   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for poisson family taken to be 1) #>  #>     Null deviance: 279.91  on 99  degrees of freedom #> Residual deviance: 109.54  on 98  degrees of freedom #> AIC: 385.01 #>  #> Number of Fisher Scoring iterations: 5 #>  summary(fmo) #>  #> Call: #> glm(formula = y ~ x, family = poisson) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  1.06954    0.07108   15.05   <2e-16 *** #> x            1.04135    0.09406   11.07   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for poisson family taken to be 1) #>  #>     Null deviance: 279.91  on 99  degrees of freedom #> Residual deviance: 109.54  on 98  degrees of freedom #> AIC: 385.01 #>  #> Number of Fisher Scoring iterations: 5 #>   mtable(Default=fm,        OPG=withSE(fm,\"OPG\"),        summary.stats=c(\"Deviance\",\"N\")        ) #>  #> Calls: #> Default: glm(formula = y ~ x, family = poisson) #> OPG: glm(formula = y ~ x, family = poisson) #>  #> ======================================= #>                 Default       OPG       #> --------------------------------------- #>   (Intercept)    1.070***    1.070***   #>                 (0.066)     (0.071)     #>   x              1.041***    1.041***   #>                 (0.088)     (0.094)     #> --------------------------------------- #>   Deviance     109.540     109.540      #>   N            100         100          #> ======================================= #>   Significance: *** = p < 0.001;    #>                 ** = p < 0.01;    #>                 * = p < 0.05    vo <- vcovOPG(fm)  mtable(Default=fm,        OPG=withSE(fm,vo),        summary.stats=c(\"Deviance\",\"N\")        ) #>  #> Calls: #> Default: glm(formula = y ~ x, family = poisson) #> OPG: glm(formula = y ~ x, family = poisson) #>  #> ======================================= #>                 Default       OPG       #> --------------------------------------- #>   (Intercept)    1.070***    1.070***   #>                 (0.066)     (0.071)     #>   x              1.041***    1.041***   #>                 (0.088)     (0.094)     #> --------------------------------------- #>   Deviance     109.540     109.540      #>   N            100         100          #> ======================================= #>   Significance: *** = p < 0.001;    #>                 ** = p < 0.01;    #>                 * = p < 0.05"},{"path":"https://melff.github.io/mclogit/reference/within-operators.html","id":null,"dir":"Reference","previous_headings":"","what":"Operators to abbreviate use of ","title":"Operators to abbreviate use of ","text":"operators %$% %$$% provide   abbrevitions calls () within()   respectively.   function Within() variant ()   resulting data frame contains newly created variables   order created (reverse order).","code":""},{"path":"https://melff.github.io/mclogit/reference/within-operators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Operators to abbreviate use of ","text":"","code":"data %$% expr data %$$% expr Within(data,expr,...) # S3 method for data.frame Within(data,expr,...)"},{"path":"https://melff.github.io/mclogit/reference/within-operators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Operators to abbreviate use of ","text":"data data frame similar object, see within expr single compound expression (.e. several expressions   enclosed curly braces), see   within ... arguments, currently ignored","code":""},{"path":[]},{"path":"https://melff.github.io/mclogit/reference/within-operators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Operators to abbreviate use of ","text":"","code":"df <- data.frame(a = 1:7,                  b = 7:1)  df #>   a b #> 1 1 7 #> 2 2 6 #> 3 3 5 #> 4 4 4 #> 5 5 3 #> 6 6 2 #> 7 7 1  df <- within(df,{   ab <- a + b   a2b2 <- a^2 + b^2 }) df #>   a b a2b2 ab #> 1 1 7   50  8 #> 2 2 6   40  8 #> 3 3 5   34  8 #> 4 4 4   32  8 #> 5 5 3   34  8 #> 6 6 2   40  8 #> 7 7 1   50  8  df <- data.frame(a = 1:7,                  b = 7:1) df <- Within(df,{   ab <- a + b   a2b2 <- a^2 + b^2 }) df #>   a b ab a2b2 #> 1 1 7  8   50 #> 2 2 6  8   40 #> 3 3 5  8   34 #> 4 4 4  8   32 #> 5 5 3  8   34 #> 6 6 2  8   40 #> 7 7 1  8   50   df <- data.frame(a = 1:7,                  b = 7:1) df #>   a b #> 1 1 7 #> 2 2 6 #> 3 3 5 #> 4 4 4 #> 5 5 3 #> 6 6 2 #> 7 7 1  ds <- as.data.set(df) ds #>  #> Data set with 7 observations and 2 variables #>  #>   a b #> 1 1 7 #> 2 2 6 #> 3 3 5 #> 4 4 4 #> 5 5 3 #> 6 6 2 #> 7 7 1  df %$$% {   ab <- a + b   a2b2 <- a^2 + b^2 } df #>   a b ab a2b2 #> 1 1 7  8   50 #> 2 2 6  8   40 #> 3 3 5  8   34 #> 4 4 4  8   32 #> 5 5 3  8   34 #> 6 6 2  8   40 #> 7 7 1  8   50  ds %$$% {   ab <- a + b   a2b2 <- a^2 + b^2 } #> Note: method with signature ‘numeric.item#numeric’ chosen for function ‘+’, #>  target signature ‘integer.item#integer.item’. #>  \"numeric#numeric.item\" would also be valid ds #>  #> Data set with 7 observations and 4 variables #>  #>   a b ab a2b2 #> 1 1 7  8   50 #> 2 2 6  8   40 #> 3 3 5  8   34 #> 4 4 4  8   32 #> 5 5 3  8   34 #> 6 6 2  8   40 #> 7 7 1  8   50  df %$% c(a.ssq = sum(a^2),          b.ssq = sum(b^2)) #> a.ssq b.ssq  #>   140   140"},{"path":"https://melff.github.io/mclogit/reference/xapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to ranges of variables — xapply","title":"Apply a function to ranges of variables — xapply","text":"xapply evaluates expression given second argument substituting   variables. results collected list array   similar way done Sapply lapply.","code":""},{"path":"https://melff.github.io/mclogit/reference/xapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to ranges of variables — xapply","text":"","code":"xapply(...,.sorted,simplify=TRUE,USE.NAMES=TRUE,.outer=FALSE)"},{"path":"https://melff.github.io/mclogit/reference/xapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to ranges of variables — xapply","text":"... tagged untagged arguments.     tagged arguments define 'variables' looped ,     first untagged argument defines expression wich     evaluated. .sorted optional logical value; relevant     range variable specified using column operator     \":\". Decises whether variable names sorted     alphabetically range variables created. argument missing, default value TRUE, xapply() called     global environment, otherwise FALSE. simplify logical value; result simplifies     Sapply? USE.NAMES logical value positive integer.     integer, determines variable used name     highest dimension result (columns, case matrix).     TRUE, first variable used. .outer optional logical value; TRUE, combination     variables used evaluate expression,     FALSE (default) variables need     length corresponding values     variables used evaluation expression.","code":""},{"path":"https://melff.github.io/mclogit/reference/xapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to ranges of variables — xapply","text":"","code":"x <- 1:3 y <- -(1:3) z <- c(\"Uri\",\"Schwyz\",\"Unterwalden\") print(x) #> [1] 1 2 3 print(y) #> [1] -1 -2 -3 print(z) #> [1] \"Uri\"         \"Schwyz\"      \"Unterwalden\" foreach(var=c(x,y,z),          # assigns names   names(var) <- letters[1:3]   # to the elements of x, y, and z   ) print(x) #> a b c  #> 1 2 3  print(y) #>  a  b  c  #> -1 -2 -3  print(z) #>             a             b             c  #>         \"Uri\"      \"Schwyz\" \"Unterwalden\"   ds <- data.set(         a = c(1,2,3,2,3,8,9),         b = c(2,8,3,2,1,8,9),         c = c(1,3,2,1,2,8,8)       ) print(ds) #>   a b c #> 1 1 2 1 #> 2 2 8 3 #> 3 3 3 2 #> 4 2 2 1 #> 5 3 1 2 #> 6 8 8 8 #> 7 9 9 8 ds <- within(ds,{        description(a) <- \"First item in questionnaire\"       description(b) <- \"Second item in questionnaire\"       description(c) <- \"Third item in questionnaire\"              wording(a) <- \"What number do you like first?\"       wording(b) <- \"What number do you like second?\"       wording(c) <- \"What number do you like third?\"        foreach(x=a:c,{ # Lazy data documentation:         labels(x) <- c(    # a,b,c get value labels in one statement                          one = 1,                          two = 2,                        three = 3,                 \"don't know\" = 8,          \"refused to answer\" = 9)         missing.values(x) <- c(8,9)         })       })        codebook(ds) #> ================================================================================ #>  #>    a 'First item in questionnaire' #>  #>    \"What number do you like first?\" #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: interval #>    Missing values: 8, 9 #>  #>    Values and labels           N Valid Total #>                                              #>    1   'one'                   1  20.0  14.3 #>    2   'two'                   2  40.0  28.6 #>    3   'three'                 2  40.0  28.6 #>    8 M 'don't know'            1        14.3 #>    9 M 'refused to answer'     1        14.3 #>                                              #>         Min: 1.000                           #>         Max: 3.000                           #>        Mean: 2.200                           #>    Std.Dev.: 0.748                           #>  #> ================================================================================ #>  #>    b 'Second item in questionnaire' #>  #>    \"What number do you like second?\" #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: interval #>    Missing values: 8, 9 #>  #>    Values and labels           N Valid Total #>                                              #>    1   'one'                   1  25.0  14.3 #>    2   'two'                   2  50.0  28.6 #>    3   'three'                 1  25.0  14.3 #>    8 M 'don't know'            2        28.6 #>    9 M 'refused to answer'     1        14.3 #>                                              #>         Min: 1.000                           #>         Max: 3.000                           #>        Mean: 2.000                           #>    Std.Dev.: 0.707                           #>  #> ================================================================================ #>  #>    c 'Third item in questionnaire' #>  #>    \"What number do you like third?\" #>  #> -------------------------------------------------------------------------------- #>  #>    Storage mode: double #>    Measurement: interval #>    Missing values: 8, 9 #>  #>    Values and labels     N Valid Total #>                                        #>    1   'one'             2  40.0  28.6 #>    2   'two'             2  40.0  28.6 #>    3   'three'           1  20.0  14.3 #>    8 M 'don't know'      2        28.6 #>                                        #>         Min: 1.000                     #>         Max: 3.000                     #>        Mean: 1.800                     #>    Std.Dev.: 0.748                     #>   # The colon-operator respects the order of the variables # in the data set, if .sorted=FALSE with(ds[c(3,1,2)],      xapply(x=a:c,             description(x)             )) #>                             a                             c  #> \"First item in questionnaire\" \"Third item in questionnaire\"   # Since .sorted=TRUE, the colon operator creates a range  # of alphabetically sorted variables. with(ds[c(3,1,2)],      xapply(x=a:c,             description(x),             .sorted=TRUE             )) #>                              a                              b  #>  \"First item in questionnaire\" \"Second item in questionnaire\"  #>                              c  #>  \"Third item in questionnaire\"   # The variables in reverse order with(ds,      xapply(x=c:a,              description(x)             )) #>                              c                              b  #>  \"Third item in questionnaire\" \"Second item in questionnaire\"  #>                              a  #>  \"First item in questionnaire\"   # The colon operator can be combined with the  # concatenation function with(ds,      xapply(x=c(a:b,c,c,b:a),              description(x)             )) #>                              a                              b  #>  \"First item in questionnaire\" \"Second item in questionnaire\"  #>                              c                              c  #>  \"Third item in questionnaire\"  \"Third item in questionnaire\"  #>                              b                              a  #> \"Second item in questionnaire\"  \"First item in questionnaire\"   # Variables can also be selected by regular expressions. with(ds,      xapply(x=rx(\"[a-b]\"),              description(x)             )) #>                              a                              b  #>  \"First item in questionnaire\" \"Second item in questionnaire\"   # Demonstrating the effects of the 'USE.NAMES' argument. with(ds,      xapply(x=a:c,mean(x))) #>        a        b        c  #> 4.000000 4.714286 3.571429   with(ds,      xapply(x=a:c,mean(x),      USE.NAMES=FALSE)) #> [1] 4.000000 4.714286 3.571429  t(with(ds,       xapply(i=1:3,              x=a:c,              c(Index=i,                Mean=mean(x)),       USE.NAMES=2))) #>   Index     Mean #> a     1 4.000000 #> b     2 4.714286 #> c     3 3.571429  # Result with 'simplify=FALSE' with(ds,      xapply(x=a:c,mean(x),      simplify=FALSE)) #> $a #> [1] 4 #>  #> $b #> [1] 4.714286 #>  #> $c #> [1] 3.571429 #>   # It is also possible to loop over functions: xapply(fun=c(exp,log),        fun(1)) #>      exp      log  #> 2.718282 0.000000   # Two demonstrations for '.outer=TRUE' with(ds,       xapply(x=a:c,              y=a:c,              cov(x,y),              .outer=TRUE)) #>    y #> x           a         b        c #>   a 10.000000  7.833333 9.500000 #>   b  7.833333 11.904762 9.023810 #>   c  9.500000  9.023810 9.619048  with(ds,       xapply(x=a:c,              y=a:c,              fun=c(cov,cor),              fun(x,y),              .outer=TRUE)) #> , , fun = cov #>  #>    y #> x           a         b        c #>   a 10.000000  7.833333 9.500000 #>   b  7.833333 11.904762 9.023810 #>   c  9.500000  9.023810 9.619048 #>  #> , , fun = cor #>  #>    y #> x           a         b         c #>   a 1.0000000 0.7179369 0.9686292 #>   b 0.7179369 1.0000000 0.8432639 #>   c 0.9686292 0.8432639 1.0000000 #>"}]
